{"ast":null,"code":"/**\r\n * DevExtreme (viz/series/bar_series.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar scatterSeries = require(\"./scatter_series\");\n\nvar areaSeries = require(\"./area_series\").chart.area;\n\nvar chartSeries = scatterSeries.chart;\nvar polarSeries = scatterSeries.polar;\nvar _extend = extend;\nvar _each = each;\nexports.chart = {};\nexports.polar = {};\nvar baseBarSeriesMethods = {\n  _createLegendState: function _createLegendState(styleOptions, defaultColor) {\n    return {\n      fill: styleOptions.color || defaultColor,\n      hatching: styleOptions.hatching\n    };\n  },\n  _parsePointStyle: function _parsePointStyle(style, defaultColor, defaultBorderColor) {\n    var color = style.color || defaultColor;\n\n    var base = chartSeries._parsePointStyle.call(this, style, color, defaultBorderColor);\n\n    base.fill = color;\n    base.hatching = style.hatching;\n    base.dashStyle = style.border && style.border.dashStyle || \"solid\";\n    delete base.r;\n    return base;\n  },\n  _applyMarkerClipRect: function _applyMarkerClipRect(settings) {\n    settings[\"clip-path\"] = null;\n  },\n  _setGroupsSettings: function _setGroupsSettings(animationEnabled, firstDrawing) {\n    var that = this;\n    var settings = {};\n\n    chartSeries._setGroupsSettings.apply(that, arguments);\n\n    if (animationEnabled && firstDrawing) {\n      settings = this._getAffineCoordOptions();\n    } else {\n      if (!animationEnabled) {\n        settings = {\n          scaleX: 1,\n          scaleY: 1,\n          translateX: 0,\n          translateY: 0\n        };\n      }\n    }\n\n    that._markersGroup.attr(settings);\n  },\n  _drawPoint: function _drawPoint(options) {\n    options.hasAnimation = options.hasAnimation && !options.firstDrawing;\n    options.firstDrawing = false;\n\n    chartSeries._drawPoint.call(this, options);\n  },\n  _getMainColor: function _getMainColor() {\n    return this._options.mainSeriesColor;\n  },\n  _createPointStyles: function _createPointStyles(pointOptions) {\n    var that = this;\n\n    var mainColor = pointOptions.color || that._getMainColor();\n\n    return {\n      normal: that._parsePointStyle(pointOptions, mainColor, mainColor),\n      hover: that._parsePointStyle(pointOptions.hoverStyle || {}, mainColor, mainColor),\n      selection: that._parsePointStyle(pointOptions.selectionStyle || {}, mainColor, mainColor)\n    };\n  },\n  _updatePointsVisibility: function _updatePointsVisibility() {\n    var visibility = this._options.visible;\n    each(this._points, function (_, point) {\n      point._options.visible = visibility;\n    });\n  },\n  _getOptionsForPoint: function _getOptionsForPoint() {\n    return this._options;\n  },\n  _animate: function _animate(firstDrawing) {\n    var that = this;\n\n    var complete = function complete() {\n      that._animateComplete();\n    };\n\n    var animateFunc = function animateFunc(drawnPoints, complete) {\n      var lastPointIndex = drawnPoints.length - 1;\n\n      _each(drawnPoints || [], function (i, point) {\n        point.animate(i === lastPointIndex ? complete : void 0, point.getMarkerCoords());\n      });\n    };\n\n    that._animatePoints(firstDrawing, complete, animateFunc);\n  },\n  getValueRangeInitialValue: areaSeries.getValueRangeInitialValue,\n  _patchMarginOptions: function _patchMarginOptions(options) {\n    options.checkInterval = true;\n    return options;\n  },\n  _defaultAggregator: \"sum\",\n  _defineDrawingState: function _defineDrawingState() {},\n  usePointsToDefineAutoHiding: function usePointsToDefineAutoHiding() {\n    return false;\n  }\n};\nexports.chart.bar = _extend({}, chartSeries, baseBarSeriesMethods, {\n  _getAffineCoordOptions: function _getAffineCoordOptions() {\n    var rotated = this._options.rotated;\n    var direction = rotated ? \"X\" : \"Y\";\n    var settings = {\n      scaleX: rotated ? .001 : 1,\n      scaleY: rotated ? 1 : .001\n    };\n    settings[\"translate\" + direction] = this.getValueAxis().getTranslator().translate(\"canvas_position_default\");\n    return settings;\n  },\n  _animatePoints: function _animatePoints(firstDrawing, complete, animateFunc) {\n    var that = this;\n\n    that._markersGroup.animate({\n      scaleX: 1,\n      scaleY: 1,\n      translateY: 0,\n      translateX: 0\n    }, void 0, complete);\n\n    if (!firstDrawing) {\n      animateFunc(that._drawnPoints, complete);\n    }\n  },\n  checkSeriesViewportCoord: function checkSeriesViewportCoord(axis, coord) {\n    if (0 === this._points.length) {\n      return false;\n    }\n\n    if (axis.isArgumentAxis) {\n      return true;\n    }\n\n    var translator = axis.getTranslator();\n    var range = this.getViewport();\n    var min = translator.translate(range.categories ? range.categories[0] : range.min);\n    var max = translator.translate(range.categories ? range.categories[range.categories.length - 1] : range.max);\n    var rotated = this.getOptions().rotated;\n    var inverted = axis.getOptions().inverted;\n    return rotated && !inverted || !rotated && inverted ? coord >= min && coord <= max : coord >= max && coord <= min;\n  },\n  getSeriesPairCoord: function getSeriesPairCoord(coord, isArgument) {\n    var oppositeCoord = null;\n    var rotated = this._options.rotated;\n    var isOpposite = !isArgument && !rotated || isArgument && rotated;\n    var coordName = isOpposite ? \"vy\" : \"vx\";\n    var oppositeCoordName = isOpposite ? \"vx\" : \"vy\";\n    var points = this.getPoints();\n\n    for (var i = 0; i < points.length; i++) {\n      var p = points[i];\n      var tmpCoord = void 0;\n\n      if (isArgument) {\n        tmpCoord = p.getCenterCoord()[coordName[1]] === coord ? p[oppositeCoordName] : void 0;\n      } else {\n        tmpCoord = p[coordName] === coord ? p[oppositeCoordName] : void 0;\n      }\n\n      if (this.checkAxisVisibleAreaCoord(!isArgument, tmpCoord)) {\n        oppositeCoord = tmpCoord;\n        break;\n      }\n    }\n\n    return oppositeCoord;\n  }\n});\nexports.polar.bar = _extend({}, polarSeries, baseBarSeriesMethods, {\n  _animatePoints: function _animatePoints(firstDrawing, complete, animateFunc) {\n    animateFunc(this._drawnPoints, complete);\n  },\n  _setGroupsSettings: chartSeries._setGroupsSettings,\n  _drawPoint: function _drawPoint(point, groups, animationEnabled) {\n    chartSeries._drawPoint.call(this, point, groups, animationEnabled);\n  },\n  _parsePointStyle: function _parsePointStyle(style) {\n    var base = baseBarSeriesMethods._parsePointStyle.apply(this, arguments);\n\n    base.opacity = style.opacity;\n    return base;\n  },\n  _createGroups: chartSeries._createGroups,\n  _setMarkerGroupSettings: function _setMarkerGroupSettings() {\n    var that = this;\n\n    var markersSettings = that._createPointStyles(that._getMarkerGroupOptions()).normal;\n\n    var groupSettings;\n    markersSettings.class = \"dxc-markers\";\n\n    that._applyMarkerClipRect(markersSettings);\n\n    groupSettings = _extend({}, markersSettings);\n    delete groupSettings.opacity;\n\n    that._markersGroup.attr(groupSettings);\n  },\n  _createLegendState: areaSeries._createLegendState\n});","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/viz/series/bar_series.js"],"names":["extend","require","each","scatterSeries","areaSeries","chart","area","chartSeries","polarSeries","polar","_extend","_each","exports","baseBarSeriesMethods","_createLegendState","styleOptions","defaultColor","fill","color","hatching","_parsePointStyle","style","defaultBorderColor","base","call","dashStyle","border","r","_applyMarkerClipRect","settings","_setGroupsSettings","animationEnabled","firstDrawing","that","apply","arguments","_getAffineCoordOptions","scaleX","scaleY","translateX","translateY","_markersGroup","attr","_drawPoint","options","hasAnimation","_getMainColor","_options","mainSeriesColor","_createPointStyles","pointOptions","mainColor","normal","hover","hoverStyle","selection","selectionStyle","_updatePointsVisibility","visibility","visible","_points","_","point","_getOptionsForPoint","_animate","complete","_animateComplete","animateFunc","drawnPoints","lastPointIndex","length","i","animate","getMarkerCoords","_animatePoints","getValueRangeInitialValue","_patchMarginOptions","checkInterval","_defaultAggregator","_defineDrawingState","usePointsToDefineAutoHiding","bar","rotated","direction","getValueAxis","getTranslator","translate","_drawnPoints","checkSeriesViewportCoord","axis","coord","isArgumentAxis","translator","range","getViewport","min","categories","max","getOptions","inverted","getSeriesPairCoord","isArgument","oppositeCoord","isOpposite","coordName","oppositeCoordName","points","getPoints","p","tmpCoord","getCenterCoord","checkAxisVisibleAreaCoord","groups","opacity","_createGroups","_setMarkerGroupSettings","markersSettings","_getMarkerGroupOptions","groupSettings","class"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/series/bar_series.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar extend = require(\"../../core/utils/extend\").extend;\r\nvar each = require(\"../../core/utils/iterator\").each;\r\nvar scatterSeries = require(\"./scatter_series\");\r\nvar areaSeries = require(\"./area_series\").chart.area;\r\nvar chartSeries = scatterSeries.chart;\r\nvar polarSeries = scatterSeries.polar;\r\nvar _extend = extend;\r\nvar _each = each;\r\nexports.chart = {};\r\nexports.polar = {};\r\nvar baseBarSeriesMethods = {\r\n    _createLegendState: function(styleOptions, defaultColor) {\r\n        return {\r\n            fill: styleOptions.color || defaultColor,\r\n            hatching: styleOptions.hatching\r\n        }\r\n    },\r\n    _parsePointStyle: function(style, defaultColor, defaultBorderColor) {\r\n        var color = style.color || defaultColor;\r\n        var base = chartSeries._parsePointStyle.call(this, style, color, defaultBorderColor);\r\n        base.fill = color;\r\n        base.hatching = style.hatching;\r\n        base.dashStyle = style.border && style.border.dashStyle || \"solid\";\r\n        delete base.r;\r\n        return base\r\n    },\r\n    _applyMarkerClipRect: function(settings) {\r\n        settings[\"clip-path\"] = null\r\n    },\r\n    _setGroupsSettings: function(animationEnabled, firstDrawing) {\r\n        var that = this;\r\n        var settings = {};\r\n        chartSeries._setGroupsSettings.apply(that, arguments);\r\n        if (animationEnabled && firstDrawing) {\r\n            settings = this._getAffineCoordOptions()\r\n        } else {\r\n            if (!animationEnabled) {\r\n                settings = {\r\n                    scaleX: 1,\r\n                    scaleY: 1,\r\n                    translateX: 0,\r\n                    translateY: 0\r\n                }\r\n            }\r\n        }\r\n        that._markersGroup.attr(settings)\r\n    },\r\n    _drawPoint: function(options) {\r\n        options.hasAnimation = options.hasAnimation && !options.firstDrawing;\r\n        options.firstDrawing = false;\r\n        chartSeries._drawPoint.call(this, options)\r\n    },\r\n    _getMainColor: function() {\r\n        return this._options.mainSeriesColor\r\n    },\r\n    _createPointStyles: function(pointOptions) {\r\n        var that = this;\r\n        var mainColor = pointOptions.color || that._getMainColor();\r\n        return {\r\n            normal: that._parsePointStyle(pointOptions, mainColor, mainColor),\r\n            hover: that._parsePointStyle(pointOptions.hoverStyle || {}, mainColor, mainColor),\r\n            selection: that._parsePointStyle(pointOptions.selectionStyle || {}, mainColor, mainColor)\r\n        }\r\n    },\r\n    _updatePointsVisibility: function() {\r\n        var visibility = this._options.visible;\r\n        each(this._points, function(_, point) {\r\n            point._options.visible = visibility\r\n        })\r\n    },\r\n    _getOptionsForPoint: function() {\r\n        return this._options\r\n    },\r\n    _animate: function(firstDrawing) {\r\n        var that = this;\r\n        var complete = function() {\r\n            that._animateComplete()\r\n        };\r\n        var animateFunc = function(drawnPoints, complete) {\r\n            var lastPointIndex = drawnPoints.length - 1;\r\n            _each(drawnPoints || [], function(i, point) {\r\n                point.animate(i === lastPointIndex ? complete : void 0, point.getMarkerCoords())\r\n            })\r\n        };\r\n        that._animatePoints(firstDrawing, complete, animateFunc)\r\n    },\r\n    getValueRangeInitialValue: areaSeries.getValueRangeInitialValue,\r\n    _patchMarginOptions: function(options) {\r\n        options.checkInterval = true;\r\n        return options\r\n    },\r\n    _defaultAggregator: \"sum\",\r\n    _defineDrawingState: function() {},\r\n    usePointsToDefineAutoHiding: function() {\r\n        return false\r\n    }\r\n};\r\nexports.chart.bar = _extend({}, chartSeries, baseBarSeriesMethods, {\r\n    _getAffineCoordOptions: function() {\r\n        var rotated = this._options.rotated;\r\n        var direction = rotated ? \"X\" : \"Y\";\r\n        var settings = {\r\n            scaleX: rotated ? .001 : 1,\r\n            scaleY: rotated ? 1 : .001\r\n        };\r\n        settings[\"translate\" + direction] = this.getValueAxis().getTranslator().translate(\"canvas_position_default\");\r\n        return settings\r\n    },\r\n    _animatePoints: function(firstDrawing, complete, animateFunc) {\r\n        var that = this;\r\n        that._markersGroup.animate({\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            translateY: 0,\r\n            translateX: 0\r\n        }, void 0, complete);\r\n        if (!firstDrawing) {\r\n            animateFunc(that._drawnPoints, complete)\r\n        }\r\n    },\r\n    checkSeriesViewportCoord: function(axis, coord) {\r\n        if (0 === this._points.length) {\r\n            return false\r\n        }\r\n        if (axis.isArgumentAxis) {\r\n            return true\r\n        }\r\n        var translator = axis.getTranslator();\r\n        var range = this.getViewport();\r\n        var min = translator.translate(range.categories ? range.categories[0] : range.min);\r\n        var max = translator.translate(range.categories ? range.categories[range.categories.length - 1] : range.max);\r\n        var rotated = this.getOptions().rotated;\r\n        var inverted = axis.getOptions().inverted;\r\n        return rotated && !inverted || !rotated && inverted ? coord >= min && coord <= max : coord >= max && coord <= min\r\n    },\r\n    getSeriesPairCoord: function(coord, isArgument) {\r\n        var oppositeCoord = null;\r\n        var rotated = this._options.rotated;\r\n        var isOpposite = !isArgument && !rotated || isArgument && rotated;\r\n        var coordName = isOpposite ? \"vy\" : \"vx\";\r\n        var oppositeCoordName = isOpposite ? \"vx\" : \"vy\";\r\n        var points = this.getPoints();\r\n        for (var i = 0; i < points.length; i++) {\r\n            var p = points[i];\r\n            var tmpCoord = void 0;\r\n            if (isArgument) {\r\n                tmpCoord = p.getCenterCoord()[coordName[1]] === coord ? p[oppositeCoordName] : void 0\r\n            } else {\r\n                tmpCoord = p[coordName] === coord ? p[oppositeCoordName] : void 0\r\n            }\r\n            if (this.checkAxisVisibleAreaCoord(!isArgument, tmpCoord)) {\r\n                oppositeCoord = tmpCoord;\r\n                break\r\n            }\r\n        }\r\n        return oppositeCoord\r\n    }\r\n});\r\nexports.polar.bar = _extend({}, polarSeries, baseBarSeriesMethods, {\r\n    _animatePoints: function(firstDrawing, complete, animateFunc) {\r\n        animateFunc(this._drawnPoints, complete)\r\n    },\r\n    _setGroupsSettings: chartSeries._setGroupsSettings,\r\n    _drawPoint: function(point, groups, animationEnabled) {\r\n        chartSeries._drawPoint.call(this, point, groups, animationEnabled)\r\n    },\r\n    _parsePointStyle: function(style) {\r\n        var base = baseBarSeriesMethods._parsePointStyle.apply(this, arguments);\r\n        base.opacity = style.opacity;\r\n        return base\r\n    },\r\n    _createGroups: chartSeries._createGroups,\r\n    _setMarkerGroupSettings: function() {\r\n        var that = this;\r\n        var markersSettings = that._createPointStyles(that._getMarkerGroupOptions()).normal;\r\n        var groupSettings;\r\n        markersSettings.class = \"dxc-markers\";\r\n        that._applyMarkerClipRect(markersSettings);\r\n        groupSettings = _extend({}, markersSettings);\r\n        delete groupSettings.opacity;\r\n        that._markersGroup.attr(groupSettings)\r\n    },\r\n    _createLegendState: areaSeries._createLegendState\r\n});\r\n"]},"metadata":{},"sourceType":"script"}
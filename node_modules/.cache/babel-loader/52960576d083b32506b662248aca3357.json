{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/inflector.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar map = require(\"./iterator\").map;\n\nvar _normalize = function _normalize(text) {\n  if (void 0 === text || null === text) {\n    return \"\";\n  }\n\n  return String(text);\n};\n\nvar _upperCaseFirst = function _upperCaseFirst(text) {\n  return _normalize(text).charAt(0).toUpperCase() + text.substr(1);\n};\n\nvar _chop = function _chop(text) {\n  return _normalize(text).replace(/([a-z\\d])([A-Z])/g, \"$1 $2\").split(/[\\s_-]+/);\n};\n\nvar dasherize = function dasherize(text) {\n  return map(_chop(text), function (p) {\n    return p.toLowerCase();\n  }).join(\"-\");\n};\n\nvar underscore = function underscore(text) {\n  return dasherize(text).replace(/-/g, \"_\");\n};\n\nvar camelize = function camelize(text, upperFirst) {\n  return map(_chop(text), function (p, i) {\n    p = p.toLowerCase();\n\n    if (upperFirst || i > 0) {\n      p = _upperCaseFirst(p);\n    }\n\n    return p;\n  }).join(\"\");\n};\n\nvar humanize = function humanize(text) {\n  return _upperCaseFirst(dasherize(text).replace(/-/g, \" \"));\n};\n\nvar titleize = function titleize(text) {\n  return map(_chop(text), function (p) {\n    return _upperCaseFirst(p.toLowerCase());\n  }).join(\" \");\n};\n\nvar DIGIT_CHARS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n\nvar captionize = function captionize(name) {\n  var captionList = [];\n  var i;\n  var char;\n  var isPrevCharNewWord = false;\n  var isNewWord = false;\n\n  for (i = 0; i < name.length; i++) {\n    char = name.charAt(i);\n    isNewWord = char === char.toUpperCase() && \"-\" !== char && \")\" !== char && \"/\" !== char || char in DIGIT_CHARS;\n\n    if (\"_\" === char || \".\" === char) {\n      char = \" \";\n      isNewWord = true;\n    } else {\n      if (0 === i) {\n        char = char.toUpperCase();\n        isNewWord = true;\n      } else {\n        if (!isPrevCharNewWord && isNewWord) {\n          if (captionList.length > 0) {\n            captionList.push(\" \");\n          }\n        }\n      }\n    }\n\n    captionList.push(char);\n    isPrevCharNewWord = isNewWord;\n  }\n\n  return captionList.join(\"\");\n};\n\nexports.dasherize = dasherize;\nexports.camelize = camelize;\nexports.humanize = humanize;\nexports.titleize = titleize;\nexports.underscore = underscore;\nexports.captionize = captionize;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/core/utils/inflector.js"],"names":["map","require","_normalize","text","String","_upperCaseFirst","charAt","toUpperCase","substr","_chop","replace","split","dasherize","p","toLowerCase","join","underscore","camelize","upperFirst","i","humanize","titleize","DIGIT_CHARS","captionize","name","captionList","char","isPrevCharNewWord","isNewWord","length","push","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (core/utils/inflector.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar map = require(\"./iterator\").map;\r\nvar _normalize = function(text) {\r\n    if (void 0 === text || null === text) {\r\n        return \"\"\r\n    }\r\n    return String(text)\r\n};\r\nvar _upperCaseFirst = function(text) {\r\n    return _normalize(text).charAt(0).toUpperCase() + text.substr(1)\r\n};\r\nvar _chop = function(text) {\r\n    return _normalize(text).replace(/([a-z\\d])([A-Z])/g, \"$1 $2\").split(/[\\s_-]+/)\r\n};\r\nvar dasherize = function(text) {\r\n    return map(_chop(text), function(p) {\r\n        return p.toLowerCase()\r\n    }).join(\"-\")\r\n};\r\nvar underscore = function(text) {\r\n    return dasherize(text).replace(/-/g, \"_\")\r\n};\r\nvar camelize = function(text, upperFirst) {\r\n    return map(_chop(text), function(p, i) {\r\n        p = p.toLowerCase();\r\n        if (upperFirst || i > 0) {\r\n            p = _upperCaseFirst(p)\r\n        }\r\n        return p\r\n    }).join(\"\")\r\n};\r\nvar humanize = function(text) {\r\n    return _upperCaseFirst(dasherize(text).replace(/-/g, \" \"))\r\n};\r\nvar titleize = function(text) {\r\n    return map(_chop(text), function(p) {\r\n        return _upperCaseFirst(p.toLowerCase())\r\n    }).join(\" \")\r\n};\r\nvar DIGIT_CHARS = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\nvar captionize = function(name) {\r\n    var captionList = [];\r\n    var i;\r\n    var char;\r\n    var isPrevCharNewWord = false;\r\n    var isNewWord = false;\r\n    for (i = 0; i < name.length; i++) {\r\n        char = name.charAt(i);\r\n        isNewWord = char === char.toUpperCase() && \"-\" !== char && \")\" !== char && \"/\" !== char || char in DIGIT_CHARS;\r\n        if (\"_\" === char || \".\" === char) {\r\n            char = \" \";\r\n            isNewWord = true\r\n        } else {\r\n            if (0 === i) {\r\n                char = char.toUpperCase();\r\n                isNewWord = true\r\n            } else {\r\n                if (!isPrevCharNewWord && isNewWord) {\r\n                    if (captionList.length > 0) {\r\n                        captionList.push(\" \")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        captionList.push(char);\r\n        isPrevCharNewWord = isNewWord\r\n    }\r\n    return captionList.join(\"\")\r\n};\r\nexports.dasherize = dasherize;\r\nexports.camelize = camelize;\r\nexports.humanize = humanize;\r\nexports.titleize = titleize;\r\nexports.underscore = underscore;\r\nexports.captionize = captionize;\r\n"]},"metadata":{},"sourceType":"script"}
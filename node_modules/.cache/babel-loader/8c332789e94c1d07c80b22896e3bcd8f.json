{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\src\\\\Components\\\\World\\\\Graph.jsx\";\nimport React, { useContext } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { HistoryContext } from '../Store';\nimport axios from \"axios\";\nimport { Chart, Series, ArgumentAxis, CommonSeriesSettings, Export, Legend, Margin, Title, Subtitle, Tooltip, Grid } from \"devextreme-react/chart\";\n\nfunction Graph(props) {\n  const _useContext = useContext(HistoryContext),\n        _useContext2 = _slicedToArray(_useContext, 2),\n        history = _useContext2[0],\n        setHistory = _useContext2[1];\n\n  const Hist = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var rec;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios({\n              \"method\": \"get\",\n              \"url\": \"https://corona.lmao.ninja/v2/historical\"\n            }).then(response => {\n              const Timeline = response.data;\n              return Timeline;\n            }).catch(error => {\n              console.log(error);\n            });\n\n          case 2:\n            rec = _context.sent;\n            setHistory(rec);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function Hist() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  if (history.length === 0) Hist();\n  const info = history.filter(rec => rec.country === props.name);\n\n  function getData(record) {\n    const Cases = record.timeline.cases;\n    const Deaths = record.timeline.deaths;\n    const Recovered = record.timeline.recovered;\n    const data = [];\n    const dates = Object.keys(Cases);\n    var i = 0;\n    var k = Math.round(dates.length / 4);\n    var date;\n\n    for (var _i = 0, _dates = dates; _i < _dates.length; _i++) {\n      date = _dates[_i];\n\n      if (Cases[date] > 0) {\n        if (i % k === 0) {\n          if (date.length === 7) data.push({\n            argument: date.substring(0, 4),\n            cases: Cases[date],\n            deaths: Deaths[date],\n            recovered: Recovered[date]\n          });else data.push({\n            argument: date.substring(0, 3),\n            cases: Cases[date],\n            deaths: Deaths[date],\n            recovered: Recovered[date]\n          });\n        } //else\n        //data.push({argument:\"\" , cases: Cases[date], deaths: Deaths[date], recovered: Recovered[date] });\n\n      }\n\n      i++;\n    }\n\n    date = dates[dates.length - 1];\n    data.push({\n      argument: date.substring(0, 4),\n      cases: Cases[date],\n      deaths: Deaths[date],\n      recovered: Recovered[date]\n    });\n    return /*#__PURE__*/React.createElement(Chart, {\n      palette: \"Violet\",\n      dataSource: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CommonSeriesSettings, {\n      argumentField: \"argument\",\n      type: \"line\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Series, {\n      key: \"cases\",\n      valueField: \"cases\",\n      name: \"Total Cases\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Series, {\n      key: \"deaths\",\n      valueField: \"deaths\",\n      name: \"Total Deaths\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Series, {\n      key: \"recovered\",\n      valueField: \"recovered\",\n      name: \"Total Recoveries\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Margin, {\n      bottom: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ArgumentAxis, {\n      valueMarginsEnabled: false,\n      discreteAxisDivisionMode: \"crossLabels\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      wordWrap: \"none\",\n      overlappingBehavior: \"stagger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      visible: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Legend, {\n      verticalAlignment: \"bottom\",\n      horizontalAlignment: \"center\",\n      itemTextPosition: \"bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Export, {\n      enabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Title, {\n      text: \"Energy Consumption in 2004\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Subtitle, {\n      text: \"(Millions of Tons, Oil Equivalent)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Tooltip, {\n      enabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, info.map(getData));\n}\n\nexport default Graph;\n{\n  /* <Chart data={data} width={800} height={400}>\r\n         <ArgumentAxis>\r\n         <Label\r\n               wordWrap=\"none\"\r\n               overlappingBehavior={\"stagger\"}\r\n             />\r\n         </ArgumentAxis>\r\n         <ValueAxis />\r\n         <Title text={\"Corona Record in \" + props.name} />\r\n  \n         <LineSeries\r\n             name=\"Total Cases\"\r\n             valueField=\"cases\"\r\n             argumentField=\"argument\"\r\n           />\r\n           <LineSeries\r\n             name=\"Total Deaths\"\r\n             valueField=\"deaths\"\r\n             argumentField=\"argument\"\r\n           />\r\n           <LineSeries\r\n             name=\"Total Recoveries\"\r\n             valueField=\"recovered\"\r\n             argumentField=\"argument\"\r\n           />\r\n           <Legend />\r\n           <ZoomAndPan />\r\n       </Chart> */\n}","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/src/Components/World/Graph.jsx"],"names":["React","useContext","Paper","HistoryContext","axios","Chart","Series","ArgumentAxis","CommonSeriesSettings","Export","Legend","Margin","Title","Subtitle","Tooltip","Grid","Graph","props","history","setHistory","Hist","then","response","Timeline","data","catch","error","console","log","rec","length","info","filter","country","name","getData","record","Cases","timeline","cases","Deaths","deaths","Recovered","recovered","dates","Object","keys","i","k","Math","round","date","push","argument","substring","map"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {HistoryContext} from '../Store';\r\nimport axios from \"axios\";\r\nimport {\r\n  Chart,\r\n  Series,\r\n  ArgumentAxis,\r\n  CommonSeriesSettings,\r\n  Export,\r\n  Legend,\r\n  Margin,\r\n  Title,\r\n  Subtitle,\r\n  Tooltip,\r\n  Grid\r\n} from \"devextreme-react/chart\";\r\n\r\n\r\nfunction Graph(props) {\r\n\r\n  const [history, setHistory] = useContext(HistoryContext);\r\n\r\n  const Hist = async () => {\r\n    const rec = await axios({\r\n    \"method\": \"get\",\r\n    \"url\": \"https://corona.lmao.ninja/v2/historical\"})\r\n    .then((response)=>{\r\n        const Timeline = response.data;\r\n        return Timeline;\r\n    })\r\n    .catch((error)=>{\r\n        console.log(error)\r\n  });\r\n  setHistory(rec)\r\n  }\r\n\r\n  if(history.length===0)\r\n    Hist();\r\n\r\n  const info = history.filter((rec)=>(rec.country===props.name))\r\n\r\n  function getData(record) {\r\n\r\n    const Cases = record.timeline.cases;\r\n    const Deaths = record.timeline.deaths;\r\n    const Recovered = record.timeline.recovered;\r\n    const data = []\r\n    const dates = Object.keys(Cases);\r\n    var i =0;\r\n    var k = Math.round(dates.length/4);\r\n    var date;\r\n    for(date of dates) {\r\n       if(Cases[date]>0){\r\n        if(i%(k)===0){\r\n          if(date.length===7)\r\n            data.push({argument:date.substring(0,4) , cases: Cases[date], deaths: Deaths[date], recovered: Recovered[date] });\r\n          else\r\n            data.push({argument:date.substring(0,3) , cases: Cases[date], deaths: Deaths[date], recovered: Recovered[date] });\r\n        }\r\n        //else\r\n          //data.push({argument:\"\" , cases: Cases[date], deaths: Deaths[date], recovered: Recovered[date] });\r\n       }\r\n       i++;\r\n    }\r\n      date = dates[dates.length-1];\r\n      data.push({argument:date.substring(0,4) , cases: Cases[date], deaths: Deaths[date], recovered: Recovered[date] });\r\n    return (\r\n      <Chart\r\n          palette=\"Violet\"\r\n          dataSource={data}\r\n        >\r\n          <CommonSeriesSettings\r\n            argumentField=\"argument\"\r\n            type=\"line\"\r\n          />\r\n          <Series key=\"cases\" valueField=\"cases\" name=\"Total Cases\" />\r\n          <Series key=\"deaths\" valueField=\"deaths\" name=\"Total Deaths\" />\r\n          <Series key=\"recovered\" valueField=\"recovered\" name=\"Total Recoveries\" />\r\n          <Margin bottom={20} />\r\n          <ArgumentAxis\r\n            valueMarginsEnabled={false}\r\n            discreteAxisDivisionMode=\"crossLabels\"\r\n          >\r\n          <Label\r\n              wordWrap=\"none\"\r\n              overlappingBehavior={\"stagger\"}\r\n            />\r\n          <Grid visible={true} />\r\n          </ArgumentAxis>\r\n          <Legend\r\n              verticalAlignment=\"bottom\"\r\n              horizontalAlignment=\"center\"\r\n              itemTextPosition=\"bottom\"\r\n            />\r\n            <Export enabled={true} />\r\n            <Title text=\"Energy Consumption in 2004\">\r\n              <Subtitle text=\"(Millions of Tons, Oil Equivalent)\" />\r\n            </Title>\r\n            <Tooltip enabled={true} />\r\n          </Chart>\r\n    )\r\n    \r\n  }\r\n\r\n  return (\r\n    <Paper>\r\n\r\n      {info.map(getData)}\r\n      \r\n    </Paper>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default (Graph);\r\n\r\n\r\n{/* <Chart data={data} width={800} height={400}>\r\n        <ArgumentAxis>\r\n        <Label\r\n              wordWrap=\"none\"\r\n              overlappingBehavior={\"stagger\"}\r\n            />\r\n        </ArgumentAxis>\r\n        <ValueAxis />\r\n        <Title text={\"Corona Record in \" + props.name} />\r\n\r\n        <LineSeries\r\n            name=\"Total Cases\"\r\n            valueField=\"cases\"\r\n            argumentField=\"argument\"\r\n          />\r\n          <LineSeries\r\n            name=\"Total Deaths\"\r\n            valueField=\"deaths\"\r\n            argumentField=\"argument\"\r\n          />\r\n          <LineSeries\r\n            name=\"Total Recoveries\"\r\n            valueField=\"recovered\"\r\n            argumentField=\"argument\"\r\n          />\r\n          <Legend />\r\n          <ZoomAndPan />\r\n      </Chart> */}"]},"metadata":{},"sourceType":"module"}
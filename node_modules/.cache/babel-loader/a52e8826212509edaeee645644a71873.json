{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\src\\\\Components\\\\World\\\\Graph.jsx\";\nimport React, { useContext, useState } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { HistoryContext } from '../Store';\nimport SelectBox from 'devextreme-react/select-box';\nimport axios from \"axios\";\nimport { Chart, Series, ArgumentAxis, CommonSeriesSettings, Export, Legend, Margin, Title, Subtitle, Tooltip, Label, Grid } from \"devextreme-react/chart\";\n\nfunction Graph(props) {\n  const _useContext = useContext(HistoryContext),\n        _useContext2 = _slicedToArray(_useContext, 2),\n        history = _useContext2[0],\n        setHistory = _useContext2[1];\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        chart = _useState2[0],\n        setChart = _useState2[1];\n\n  const Hist = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var rec;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios({\n              \"method\": \"get\",\n              \"url\": \"https://corona.lmao.ninja/v2/historical\"\n            }).then(response => {\n              const Timeline = response.data;\n              return Timeline;\n            }).catch(error => {\n              console.log(error);\n            });\n\n          case 2:\n            rec = _context.sent;\n            setHistory(rec);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function Hist() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  if (history.length === 0) Hist();\n  const info = history.filter(rec => rec.country === props.name);\n\n  function getData(record) {\n    const Cases = record.timeline.cases;\n    const Deaths = record.timeline.deaths;\n    const Recovered = record.timeline.recovered;\n    const data = [];\n    const dates = Object.keys(Cases);\n    var date;\n\n    for (var _i = 0, _dates = dates; _i < _dates.length; _i++) {\n      date = _dates[_i];\n\n      if (Cases[date] > 0) {\n        if (date.length === 7) data.push({\n          argument: date.substring(0, 4),\n          cases: Cases[date],\n          deaths: Deaths[date],\n          recovered: Recovered[date]\n        });else data.push({\n          argument: date.substring(0, 3),\n          cases: Cases[date],\n          deaths: Deaths[date],\n          recovered: Recovered[date]\n        });\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(Chart, {\n      palette: \"Violet\",\n      dataSource: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CommonSeriesSettings, {\n      argumentField: \"argument\",\n      type: \"line\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }), chart === 0 || chart === 1 ? /*#__PURE__*/React.createElement(Series, {\n      key: \"cases\",\n      valueField: \"cases\",\n      name: \"Total Cases\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 33\n      }\n    }) : null, chart === 0 || chart === 2 ? /*#__PURE__*/React.createElement(Series, {\n      key: \"deaths\",\n      valueField: \"deaths\",\n      name: \"Total Deaths\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }\n    }) : null, chart === 0 || chart === 3 ? /*#__PURE__*/React.createElement(Series, {\n      key: \"recovered\",\n      valueField: \"recovered\",\n      name: \"Total Recoveries\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 33\n      }\n    }) : null, /*#__PURE__*/React.createElement(Margin, {\n      bottom: 20,\n      right: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ArgumentAxis, {\n      valueMarginsEnabled: false,\n      discreteAxisDivisionMode: \"crossLabels\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      wordWrap: \"none\",\n      overlappingBehavior: \"hidden\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      visible: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Legend, {\n      verticalAlignment: \"bottom\",\n      horizontalAlignment: \"center\",\n      itemTextPosition: \"bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Title, {\n      text: \"Corona Record in \" + props.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      enabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  const chartTypes = [\"All\", \"Total Cases\", \"Deaths\", \"Recovered\"];\n\n  function handleChange(event) {}\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, info.map(getData), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"option\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SelectBox, {\n    dataSource: chartTypes,\n    value: chart == 0 ? \"All\" : chart === 1 ? \"Total Cases\" : chart === 2 ? \"Deaths\" : chart === 3 ? \"Recovered\" : null,\n    onValueChanged: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Graph;\n{\n  /* <Chart data={data} width={800} height={400}>\r\n         <ArgumentAxis>\r\n         <Label\r\n               wordWrap=\"none\"\r\n               overlappingBehavior={\"stagger\"}\r\n             />\r\n         </ArgumentAxis>\r\n         <ValueAxis />\r\n         <Title text={\"Corona Record in \" + props.name} />\r\n  \n         <LineSeries\r\n             name=\"Total Cases\"\r\n             valueField=\"cases\"\r\n             argumentField=\"argument\"\r\n           />\r\n           <LineSeries\r\n             name=\"Total Deaths\"\r\n             valueField=\"deaths\"\r\n             argumentField=\"argument\"\r\n           />\r\n           <LineSeries\r\n             name=\"Total Recoveries\"\r\n             valueField=\"recovered\"\r\n             argumentField=\"argument\"\r\n           />\r\n           <Legend />\r\n           <ZoomAndPan />\r\n       </Chart> */\n}","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/src/Components/World/Graph.jsx"],"names":["React","useContext","useState","Paper","HistoryContext","SelectBox","axios","Chart","Series","ArgumentAxis","CommonSeriesSettings","Export","Legend","Margin","Title","Subtitle","Tooltip","Label","Grid","Graph","props","history","setHistory","chart","setChart","Hist","then","response","Timeline","data","catch","error","console","log","rec","length","info","filter","country","name","getData","record","Cases","timeline","cases","Deaths","deaths","Recovered","recovered","dates","Object","keys","date","push","argument","substring","chartTypes","handleChange","event","map"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {HistoryContext} from '../Store';\r\nimport SelectBox from 'devextreme-react/select-box';\r\nimport axios from \"axios\";\r\nimport {\r\n  Chart,\r\n  Series,\r\n  ArgumentAxis,\r\n  CommonSeriesSettings,\r\n  Export,\r\n  Legend,\r\n  Margin,\r\n  Title,\r\n  Subtitle,\r\n  Tooltip,\r\n  Label,\r\n  Grid\r\n} from \"devextreme-react/chart\";\r\n\r\n\r\nfunction Graph(props) {\r\n\r\n  const [history, setHistory] = useContext(HistoryContext);\r\n  const [chart, setChart] = useState(0);\r\n\r\n  const Hist = async () => {\r\n    const rec = await axios({\r\n    \"method\": \"get\",\r\n    \"url\": \"https://corona.lmao.ninja/v2/historical\"})\r\n    .then((response)=>{\r\n        const Timeline = response.data;\r\n        return Timeline;\r\n    })\r\n    .catch((error)=>{\r\n        console.log(error)\r\n  });\r\n  setHistory(rec)\r\n  }\r\n\r\n  if(history.length===0)\r\n    Hist();\r\n\r\n  const info = history.filter((rec)=>(rec.country===props.name))\r\n\r\n  \r\n\r\n  function getData(record) {\r\n\r\n    const Cases = record.timeline.cases;\r\n    const Deaths = record.timeline.deaths;\r\n    const Recovered = record.timeline.recovered;\r\n    const data = []\r\n    const dates = Object.keys(Cases);\r\n    var date;\r\n    for(date of dates) {\r\n       if(Cases[date]>0){\r\n          if(date.length===7)\r\n            data.push({argument:date.substring(0,4) , cases: Cases[date], deaths: Deaths[date], recovered: Recovered[date] });\r\n          else\r\n            data.push({argument:date.substring(0,3) , cases: Cases[date], deaths: Deaths[date], recovered: Recovered[date] });       \r\n          }\r\n    }\r\n\r\n    return (\r\n      <Chart\r\n          palette=\"Violet\"\r\n          dataSource={data}\r\n        >\r\n          <CommonSeriesSettings\r\n            argumentField=\"argument\"\r\n            type=\"line\"\r\n          />\r\n          {chart===0||chart===1?<Series key=\"cases\" valueField=\"cases\" name=\"Total Cases\" />:null}\r\n          {chart===0||chart===2?<Series key=\"deaths\" valueField=\"deaths\" name=\"Total Deaths\" />:null}\r\n          {chart===0||chart===3?<Series key=\"recovered\" valueField=\"recovered\" name=\"Total Recoveries\" />:null}\r\n          <Margin bottom={20} right={10} />\r\n          <ArgumentAxis\r\n            valueMarginsEnabled={false}\r\n            discreteAxisDivisionMode=\"crossLabels\"\r\n          >\r\n          <Label\r\n              wordWrap=\"none\"\r\n              overlappingBehavior={\"hidden\"}\r\n            />\r\n          <Grid visible={true} />\r\n          </ArgumentAxis>\r\n          <Legend\r\n              verticalAlignment=\"bottom\"\r\n              horizontalAlignment=\"center\"\r\n              itemTextPosition=\"bottom\"\r\n            />\r\n            <Title text={\"Corona Record in \" + props.name}>\r\n              \r\n            </Title>\r\n            <Tooltip enabled={true} />\r\n          </Chart>\r\n    )\r\n    \r\n  }\r\n  \r\n  const chartTypes = [\"All\", \"Total Cases\", \"Deaths\", \"Recovered\"];\r\n\r\n  function handleChange(event) {\r\n\r\n  }\r\n\r\n  return (\r\n    <Paper>\r\n\r\n      {info.map(getData)}\r\n      <div className=\"option\">\r\n        <SelectBox\r\n          dataSource={chartTypes}\r\n          value={chart==0?\"All\":chart===1?\"Total Cases\":chart===2?\"Deaths\":chart===3?\"Recovered\":null}\r\n          onValueChanged={handleChange}\r\n        />\r\n      </div>\r\n      \r\n    </Paper>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default (Graph);\r\n\r\n\r\n{/* <Chart data={data} width={800} height={400}>\r\n        <ArgumentAxis>\r\n        <Label\r\n              wordWrap=\"none\"\r\n              overlappingBehavior={\"stagger\"}\r\n            />\r\n        </ArgumentAxis>\r\n        <ValueAxis />\r\n        <Title text={\"Corona Record in \" + props.name} />\r\n\r\n        <LineSeries\r\n            name=\"Total Cases\"\r\n            valueField=\"cases\"\r\n            argumentField=\"argument\"\r\n          />\r\n          <LineSeries\r\n            name=\"Total Deaths\"\r\n            valueField=\"deaths\"\r\n            argumentField=\"argument\"\r\n          />\r\n          <LineSeries\r\n            name=\"Total Recoveries\"\r\n            valueField=\"recovered\"\r\n            argumentField=\"argument\"\r\n          />\r\n          <Legend />\r\n          <ZoomAndPan />\r\n      </Chart> */}"]},"metadata":{},"sourceType":"module"}
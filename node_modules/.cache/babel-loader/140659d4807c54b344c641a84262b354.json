{"ast":null,"code":"/**\r\n * DevExtreme (viz/translators/translator2d.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar Range = require(\"./range\").Range;\n\nvar categoryTranslator = require(\"./category_translator\");\n\nvar intervalTranslator = require(\"./interval_translator\");\n\nvar datetimeTranslator = require(\"./datetime_translator\");\n\nvar logarithmicTranslator = require(\"./logarithmic_translator\");\n\nvar vizUtils = require(\"../core/utils\");\n\nvar typeUtils = require(\"../../core/utils/type\");\n\nvar getLog = vizUtils.getLogExt;\nvar getPower = vizUtils.getPower;\nvar raiseToExt = vizUtils.raiseToExt;\nvar isDefined = typeUtils.isDefined;\n\nvar adjust = require(\"../../core/utils/math\").adjust;\n\nvar _abs = Math.abs;\nvar CANVAS_PROP = [\"width\", \"height\", \"left\", \"top\", \"bottom\", \"right\"];\n\nvar _Translator2d;\n\nvar addInterval = require(\"../../core/utils/date\").addInterval;\n\nvar dummyTranslator = {\n  to: function to(value) {\n    var coord = this._canvasOptions.startPoint + (this._options.conversionValue ? value : Math.round(value));\n    return coord > this._canvasOptions.endPoint ? this._canvasOptions.endPoint : coord;\n  },\n  from: function from(value) {\n    return value - this._canvasOptions.startPoint;\n  }\n};\n\nvar validateCanvas = function validateCanvas(canvas) {\n  each(CANVAS_PROP, function (_, prop) {\n    canvas[prop] = parseInt(canvas[prop]) || 0;\n  });\n  return canvas;\n};\n\nvar makeCategoriesToPoints = function makeCategoriesToPoints(categories) {\n  var categoriesToPoints = {};\n  categories.forEach(function (item, i) {\n    categoriesToPoints[item.valueOf()] = i;\n  });\n  return categoriesToPoints;\n};\n\nvar validateBusinessRange = function validateBusinessRange(businessRange) {\n  if (!(businessRange instanceof Range)) {\n    businessRange = new Range(businessRange);\n  }\n\n  function validate(valueSelector, baseValueSelector) {\n    if (!isDefined(businessRange[valueSelector]) && isDefined(businessRange[baseValueSelector])) {\n      businessRange[valueSelector] = businessRange[baseValueSelector];\n    }\n  }\n\n  validate(\"minVisible\", \"min\");\n  validate(\"maxVisible\", \"max\");\n  return businessRange;\n};\n\nfunction prepareBreaks(breaks, range) {\n  var transform = \"logarithmic\" === range.axisType ? function (value) {\n    return getLog(value, range.base);\n  } : function (value) {\n    return value;\n  };\n  var array = [];\n  var br;\n  var transformFrom;\n  var transformTo;\n  var i;\n  var length = breaks.length;\n  var sum = 0;\n\n  for (i = 0; i < length; i++) {\n    br = breaks[i];\n    transformFrom = transform(br.from);\n    transformTo = transform(br.to);\n    sum += transformTo - transformFrom;\n    array.push({\n      trFrom: transformFrom,\n      trTo: transformTo,\n      from: br.from,\n      to: br.to,\n      length: sum,\n      cumulativeWidth: br.cumulativeWidth\n    });\n  }\n\n  return array;\n}\n\nfunction getCanvasBounds(range) {\n  var min = range.min;\n  var max = range.max;\n  var minVisible = range.minVisible;\n  var maxVisible = range.maxVisible;\n  var isLogarithmic = \"logarithmic\" === range.axisType;\n\n  if (isLogarithmic) {\n    maxVisible = getLog(maxVisible, range.base, range.allowNegatives, range.linearThreshold);\n    minVisible = getLog(minVisible, range.base, range.allowNegatives, range.linearThreshold);\n    min = getLog(min, range.base, range.allowNegatives, range.linearThreshold);\n    max = getLog(max, range.base, range.allowNegatives, range.linearThreshold);\n  }\n\n  return {\n    base: range.base,\n    rangeMin: min,\n    rangeMax: max,\n    rangeMinVisible: minVisible,\n    rangeMaxVisible: maxVisible\n  };\n}\n\nfunction getCheckingMethodsAboutBreaks(inverted) {\n  return {\n    isStartSide: !inverted ? function (pos, breaks, start, end) {\n      return pos < breaks[0][start];\n    } : function (pos, breaks, start, end) {\n      return pos <= breaks[breaks.length - 1][end];\n    },\n    isEndSide: !inverted ? function (pos, breaks, start, end) {\n      return pos >= breaks[breaks.length - 1][end];\n    } : function (pos, breaks, start, end) {\n      return pos > breaks[0][start];\n    },\n    isInBreak: !inverted ? function (pos, br, start, end) {\n      return pos >= br[start] && pos < br[end];\n    } : function (pos, br, start, end) {\n      return pos > br[end] && pos <= br[start];\n    },\n    isBetweenBreaks: !inverted ? function (pos, br, prevBreak, start, end) {\n      return pos < br[start] && pos >= prevBreak[end];\n    } : function (pos, br, prevBreak, start, end) {\n      return pos >= br[end] && pos < prevBreak[start];\n    },\n    getLength: !inverted ? function (br) {\n      return br.length;\n    } : function (br, lastBreak) {\n      return lastBreak.length - br.length;\n    },\n    getBreaksSize: !inverted ? function (br) {\n      return br.cumulativeWidth;\n    } : function (br, lastBreak) {\n      return lastBreak.cumulativeWidth - br.cumulativeWidth;\n    }\n  };\n}\n\nexports.Translator2D = _Translator2d = function _Translator2d(businessRange, canvas, options) {\n  this.update(businessRange, canvas, options);\n};\n\n_Translator2d.prototype = {\n  constructor: _Translator2d,\n  reinit: function reinit() {\n    var that = this;\n    var options = that._options;\n    var range = that._businessRange;\n    var categories = range.categories || [];\n    var script = {};\n\n    var canvasOptions = that._prepareCanvasOptions();\n\n    var visibleCategories = vizUtils.getCategoriesInfo(categories, range.minVisible, range.maxVisible).categories;\n    var categoriesLength = visibleCategories.length;\n\n    if (range.isEmpty()) {\n      script = dummyTranslator;\n    } else {\n      switch (range.axisType) {\n        case \"logarithmic\":\n          script = logarithmicTranslator;\n          break;\n\n        case \"semidiscrete\":\n          script = intervalTranslator;\n          canvasOptions.ratioOfCanvasRange = canvasOptions.canvasLength / (addInterval(canvasOptions.rangeMaxVisible, options.interval) - canvasOptions.rangeMinVisible);\n          break;\n\n        case \"discrete\":\n          script = categoryTranslator;\n          that._categories = categories;\n          canvasOptions.interval = that._getDiscreteInterval(options.addSpiderCategory ? categoriesLength + 1 : categoriesLength, canvasOptions);\n          that._categoriesToPoints = makeCategoriesToPoints(categories, canvasOptions.invert);\n\n          if (categoriesLength) {\n            canvasOptions.startPointIndex = that._categoriesToPoints[visibleCategories[0].valueOf()];\n            that.visibleCategories = visibleCategories;\n          }\n\n          break;\n\n        default:\n          if (\"datetime\" === range.dataType) {\n            script = datetimeTranslator;\n          }\n\n      }\n    }\n\n    (that._oldMethods || []).forEach(function (methodName) {\n      delete that[methodName];\n    });\n    that._oldMethods = Object.keys(script);\n    extend(that, script);\n    that._conversionValue = options.conversionValue ? function (value) {\n      return value;\n    } : function (value) {\n      return Math.round(value);\n    };\n    that.sc = {};\n    that._checkingMethodsAboutBreaks = [getCheckingMethodsAboutBreaks(false), getCheckingMethodsAboutBreaks(that.isInverted())];\n\n    that._translateBreaks();\n\n    that._calculateSpecialValues();\n  },\n  _translateBreaks: function _translateBreaks() {\n    var breaks = this._breaks;\n    var size = this._options.breaksSize;\n    var i;\n    var b;\n    var end;\n    var length;\n\n    if (void 0 === breaks) {\n      return;\n    }\n\n    for (i = 0, length = breaks.length; i < length; i++) {\n      b = breaks[i];\n      end = this.translate(b.to);\n      b.end = end;\n      b.start = !b.gapSize ? !this.isInverted() ? end - size : end + size : end;\n    }\n  },\n  _checkValueAboutBreaks: function _checkValueAboutBreaks(breaks, pos, start, end, methods) {\n    var i;\n    var length;\n    var prop = {\n      length: 0,\n      breaksSize: void 0,\n      inBreak: false\n    };\n    var br;\n    var prevBreak;\n    var lastBreak = breaks[breaks.length - 1];\n\n    if (methods.isStartSide(pos, breaks, start, end)) {\n      return prop;\n    } else {\n      if (methods.isEndSide(pos, breaks, start, end)) {\n        return {\n          length: lastBreak.length,\n          breaksSize: lastBreak.cumulativeWidth,\n          inBreak: false\n        };\n      }\n    }\n\n    for (i = 0, length = breaks.length; i < length; i++) {\n      br = breaks[i];\n      prevBreak = breaks[i - 1];\n\n      if (methods.isInBreak(pos, br, start, end)) {\n        prop.inBreak = true;\n        prop.break = br;\n        break;\n      }\n\n      if (prevBreak && methods.isBetweenBreaks(pos, br, prevBreak, start, end)) {\n        prop = {\n          length: methods.getLength(prevBreak, lastBreak),\n          breaksSize: methods.getBreaksSize(prevBreak, lastBreak),\n          inBreak: false\n        };\n        break;\n      }\n    }\n\n    return prop;\n  },\n  isInverted: function isInverted() {\n    return !(this._options.isHorizontal ^ this._businessRange.invert);\n  },\n  _getDiscreteInterval: function _getDiscreteInterval(categoriesLength, canvasOptions) {\n    var correctedCategoriesCount = categoriesLength - (this._options.stick ? 1 : 0);\n    return correctedCategoriesCount > 0 ? canvasOptions.canvasLength / correctedCategoriesCount : canvasOptions.canvasLength;\n  },\n  _prepareCanvasOptions: function _prepareCanvasOptions() {\n    var that = this;\n    var businessRange = that._businessRange;\n    var canvasOptions = that._canvasOptions = getCanvasBounds(businessRange);\n    var canvas = that._canvas;\n    var breaks = that._breaks;\n    var length;\n    canvasOptions.startPadding = canvas.startPadding || 0;\n    canvasOptions.endPadding = canvas.endPadding || 0;\n\n    if (that._options.isHorizontal) {\n      canvasOptions.startPoint = canvas.left + canvasOptions.startPadding;\n      length = canvas.width;\n      canvasOptions.endPoint = canvas.width - canvas.right - canvasOptions.endPadding;\n      canvasOptions.invert = businessRange.invert;\n    } else {\n      canvasOptions.startPoint = canvas.top + canvasOptions.startPadding;\n      length = canvas.height;\n      canvasOptions.endPoint = canvas.height - canvas.bottom - canvasOptions.endPadding;\n      canvasOptions.invert = !businessRange.invert;\n    }\n\n    that.canvasLength = canvasOptions.canvasLength = canvasOptions.endPoint - canvasOptions.startPoint;\n    canvasOptions.rangeDoubleError = Math.pow(10, getPower(canvasOptions.rangeMax - canvasOptions.rangeMin) - getPower(length) - 2);\n    canvasOptions.ratioOfCanvasRange = canvasOptions.canvasLength / (canvasOptions.rangeMaxVisible - canvasOptions.rangeMinVisible);\n\n    if (void 0 !== breaks) {\n      canvasOptions.ratioOfCanvasRange = (canvasOptions.canvasLength - breaks[breaks.length - 1].cumulativeWidth) / (canvasOptions.rangeMaxVisible - canvasOptions.rangeMinVisible - breaks[breaks.length - 1].length);\n    }\n\n    return canvasOptions;\n  },\n  updateCanvas: function updateCanvas(canvas) {\n    this._canvas = validateCanvas(canvas);\n    this.reinit();\n  },\n  updateBusinessRange: function updateBusinessRange(businessRange) {\n    var that = this;\n    var breaks = businessRange.breaks || [];\n    that._businessRange = validateBusinessRange(businessRange);\n    that._breaks = breaks.length ? prepareBreaks(breaks, that._businessRange) : void 0;\n    that.reinit();\n  },\n  update: function update(businessRange, canvas, options) {\n    var that = this;\n    that._options = extend(that._options || {}, options);\n    that._canvas = validateCanvas(canvas);\n    that.updateBusinessRange(businessRange);\n  },\n  getBusinessRange: function getBusinessRange() {\n    return this._businessRange;\n  },\n  getEventScale: function getEventScale(zoomEvent) {\n    return zoomEvent.deltaScale || 1;\n  },\n  getCanvasVisibleArea: function getCanvasVisibleArea() {\n    return {\n      min: this._canvasOptions.startPoint,\n      max: this._canvasOptions.endPoint\n    };\n  },\n  _calculateSpecialValues: function _calculateSpecialValues() {\n    var that = this;\n    var canvasOptions = that._canvasOptions;\n    var startPoint = canvasOptions.startPoint - canvasOptions.startPadding;\n    var endPoint = canvasOptions.endPoint + canvasOptions.endPadding;\n    var range = that._businessRange;\n    var minVisible = range.minVisible;\n    var maxVisible = range.maxVisible;\n    var canvas_position_center_middle = startPoint + canvasOptions.canvasLength / 2;\n    var canvas_position_default;\n\n    if (minVisible < 0 && maxVisible > 0 && minVisible !== maxVisible) {\n      canvas_position_default = that.translate(0, 1);\n    }\n\n    if (!isDefined(canvas_position_default)) {\n      var invert = range.invert ^ (minVisible < 0 && maxVisible <= 0);\n\n      if (that._options.isHorizontal) {\n        canvas_position_default = invert ? endPoint : startPoint;\n      } else {\n        canvas_position_default = invert ? startPoint : endPoint;\n      }\n    }\n\n    that.sc = {\n      canvas_position_default: canvas_position_default,\n      canvas_position_left: startPoint,\n      canvas_position_top: startPoint,\n      canvas_position_center: canvas_position_center_middle,\n      canvas_position_middle: canvas_position_center_middle,\n      canvas_position_right: endPoint,\n      canvas_position_bottom: endPoint,\n      canvas_position_start: canvasOptions.invert ? endPoint : startPoint,\n      canvas_position_end: canvasOptions.invert ? startPoint : endPoint\n    };\n  },\n  translateSpecialCase: function translateSpecialCase(value) {\n    return this.sc[value];\n  },\n  _calculateProjection: function _calculateProjection(distance) {\n    var canvasOptions = this._canvasOptions;\n    return canvasOptions.invert ? canvasOptions.endPoint - distance : canvasOptions.startPoint + distance;\n  },\n  _calculateUnProjection: function _calculateUnProjection(distance) {\n    var canvasOptions = this._canvasOptions;\n    return canvasOptions.invert ? canvasOptions.rangeMaxVisible.valueOf() - distance : canvasOptions.rangeMinVisible.valueOf() + distance;\n  },\n  getMinBarSize: function getMinBarSize(minBarSize) {\n    var visibleArea = this.getCanvasVisibleArea();\n    var minValue = this.from(visibleArea.min + minBarSize);\n    return _abs(this.from(visibleArea.min) - (!isDefined(minValue) ? this.from(visibleArea.max) : minValue));\n  },\n  checkMinBarSize: function checkMinBarSize(value, minShownValue, stackValue) {\n    return _abs(value) < minShownValue ? value >= 0 ? minShownValue : -minShownValue : value;\n  },\n  translate: function translate(bp, direction) {\n    var specialValue = this.translateSpecialCase(bp);\n\n    if (isDefined(specialValue)) {\n      return Math.round(specialValue);\n    }\n\n    if (isNaN(bp)) {\n      return null;\n    }\n\n    return this.to(bp, direction);\n  },\n  getInterval: function getInterval(interval) {\n    var canvasOptions = this._canvasOptions;\n    interval = isDefined(interval) ? interval : this._businessRange.interval;\n\n    if (interval) {\n      return Math.round(canvasOptions.ratioOfCanvasRange * interval);\n    }\n\n    return Math.round(canvasOptions.endPoint - canvasOptions.startPoint);\n  },\n  zoom: function zoom(translate, scale, wholeRange) {\n    var canvasOptions = this._canvasOptions;\n\n    if (canvasOptions.rangeMinVisible.valueOf() === canvasOptions.rangeMaxVisible.valueOf() && 0 !== translate) {\n      return this.zoomZeroLengthRange(translate, scale);\n    }\n\n    var startPoint = canvasOptions.startPoint;\n    var endPoint = canvasOptions.endPoint;\n    var isInverted = this.isInverted();\n    var newStart = (startPoint + translate) / scale;\n    var newEnd = (endPoint + translate) / scale;\n    wholeRange = wholeRange || {};\n    var minPoint = this.to(isInverted ? wholeRange.endValue : wholeRange.startValue);\n    var maxPoint = this.to(isInverted ? wholeRange.startValue : wholeRange.endValue);\n    var min;\n    var max;\n\n    if (minPoint > newStart) {\n      newEnd -= newStart - minPoint;\n      newStart = minPoint;\n      min = isInverted ? wholeRange.endValue : wholeRange.startValue;\n    }\n\n    if (maxPoint < newEnd) {\n      newStart -= newEnd - maxPoint;\n      newEnd = maxPoint;\n      max = isInverted ? wholeRange.startValue : wholeRange.endValue;\n    }\n\n    if (maxPoint - minPoint < newEnd - newStart) {\n      newStart = minPoint;\n      newEnd = maxPoint;\n    }\n\n    translate = (endPoint - startPoint) * newStart / (newEnd - newStart) - startPoint;\n    scale = (startPoint + translate) / newStart || 1;\n    min = isDefined(min) ? min : adjust(this.from(newStart, 1));\n    max = isDefined(max) ? max : adjust(this.from(newEnd, -1));\n\n    if (min > max) {\n      min = min > wholeRange.endValue ? wholeRange.endValue : min;\n      max = max < wholeRange.startValue ? wholeRange.startValue : max;\n    } else {\n      min = min < wholeRange.startValue ? wholeRange.startValue : min;\n      max = max > wholeRange.endValue ? wholeRange.endValue : max;\n    }\n\n    return {\n      min: min,\n      max: max,\n      translate: adjust(translate),\n      scale: adjust(scale)\n    };\n  },\n  zoomZeroLengthRange: function zoomZeroLengthRange(translate, scale) {\n    var canvasOptions = this._canvasOptions;\n    var min = canvasOptions.rangeMin;\n    var max = canvasOptions.rangeMax;\n    var correction = (max.valueOf() !== min.valueOf() ? max.valueOf() - min.valueOf() : _abs(canvasOptions.rangeMinVisible.valueOf() - min.valueOf())) / canvasOptions.canvasLength;\n    var isDateTime = typeUtils.isDate(max) || typeUtils.isDate(min);\n    var isLogarithmic = \"logarithmic\" === this._businessRange.axisType;\n    var newMin = canvasOptions.rangeMinVisible.valueOf() - correction;\n    var newMax = canvasOptions.rangeMaxVisible.valueOf() + correction;\n    newMin = isLogarithmic ? adjust(raiseToExt(newMin, canvasOptions.base)) : isDateTime ? new Date(newMin) : newMin;\n    newMax = isLogarithmic ? adjust(raiseToExt(newMax, canvasOptions.base)) : isDateTime ? new Date(newMax) : newMax;\n    return {\n      min: newMin,\n      max: newMax,\n      translate: translate,\n      scale: scale\n    };\n  },\n  getMinScale: function getMinScale(zoom) {\n    return zoom ? 1.1 : .9;\n  },\n  getScale: function getScale(val1, val2) {\n    var canvasOptions = this._canvasOptions;\n\n    if (canvasOptions.rangeMax === canvasOptions.rangeMin) {\n      return 1;\n    }\n\n    val1 = isDefined(val1) ? this._fromValue(val1) : canvasOptions.rangeMin;\n    val2 = isDefined(val2) ? this._fromValue(val2) : canvasOptions.rangeMax;\n    return (canvasOptions.rangeMax - canvasOptions.rangeMin) / Math.abs(val1 - val2);\n  },\n  isValid: function isValid(value) {\n    var co = this._canvasOptions;\n    value = this._fromValue(value);\n    return null !== value && !isNaN(value) && value.valueOf() + co.rangeDoubleError >= co.rangeMin && value.valueOf() - co.rangeDoubleError <= co.rangeMax;\n  },\n  getCorrectValue: function getCorrectValue(value, direction) {\n    var that = this;\n    var breaks = that._breaks;\n    var prop;\n    value = that._fromValue(value);\n\n    if (that._breaks) {\n      prop = that._checkValueAboutBreaks(breaks, value, \"trFrom\", \"trTo\", that._checkingMethodsAboutBreaks[0]);\n\n      if (true === prop.inBreak) {\n        return that._toValue(direction > 0 ? prop.break.trTo : prop.break.trFrom);\n      }\n    }\n\n    return that._toValue(value);\n  },\n  to: function to(bp, direction) {\n    var range = this.getBusinessRange();\n\n    if (isDefined(range.maxVisible) && isDefined(range.minVisible) && range.maxVisible.valueOf() === range.minVisible.valueOf()) {\n      if (!isDefined(bp) || range.maxVisible.valueOf() !== bp.valueOf()) {\n        return null;\n      }\n\n      return this.translateSpecialCase(0 === bp && this._options.shiftZeroValue ? \"canvas_position_default\" : \"canvas_position_middle\");\n    }\n\n    bp = this._fromValue(bp);\n    var that = this;\n    var canvasOptions = that._canvasOptions;\n    var breaks = that._breaks;\n    var prop = {\n      length: 0\n    };\n    var commonBreakSize = 0;\n\n    if (void 0 !== breaks) {\n      prop = that._checkValueAboutBreaks(breaks, bp, \"trFrom\", \"trTo\", that._checkingMethodsAboutBreaks[0]);\n      commonBreakSize = isDefined(prop.breaksSize) ? prop.breaksSize : 0;\n    }\n\n    if (true === prop.inBreak) {\n      if (direction > 0) {\n        return prop.break.start;\n      } else {\n        if (direction < 0) {\n          return prop.break.end;\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return that._conversionValue(that._calculateProjection((bp - canvasOptions.rangeMinVisible - prop.length) * canvasOptions.ratioOfCanvasRange + commonBreakSize));\n  },\n  from: function from(pos, direction) {\n    var that = this;\n    var breaks = that._breaks;\n    var prop = {\n      length: 0\n    };\n    var canvasOptions = that._canvasOptions;\n    var startPoint = canvasOptions.startPoint;\n    var commonBreakSize = 0;\n\n    if (void 0 !== breaks) {\n      prop = that._checkValueAboutBreaks(breaks, pos, \"start\", \"end\", that._checkingMethodsAboutBreaks[1]);\n      commonBreakSize = isDefined(prop.breaksSize) ? prop.breaksSize : 0;\n    }\n\n    if (true === prop.inBreak) {\n      if (direction > 0) {\n        return that._toValue(prop.break.trTo);\n      } else {\n        if (direction < 0) {\n          return that._toValue(prop.break.trFrom);\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return that._toValue(that._calculateUnProjection((pos - startPoint - commonBreakSize) / canvasOptions.ratioOfCanvasRange + prop.length));\n  },\n  isValueProlonged: false,\n  getRange: function getRange() {\n    return [this._toValue(this._canvasOptions.rangeMin), this._toValue(this._canvasOptions.rangeMax)];\n  },\n  getScreenRange: function getScreenRange() {\n    return [this._canvasOptions.startPoint, this._canvasOptions.endPoint];\n  },\n  add: function add(value, diff, dir) {\n    return this._add(value, diff, (this._businessRange.invert ? -1 : 1) * dir);\n  },\n  _add: function _add(value, diff, coeff) {\n    return this._toValue(this._fromValue(value) + diff * coeff);\n  },\n  _fromValue: function _fromValue(value) {\n    return null !== value ? Number(value) : null;\n  },\n  _toValue: function _toValue(value) {\n    return null !== value ? Number(value) : null;\n  },\n  ratioOfCanvasRange: function ratioOfCanvasRange() {\n    return this._canvasOptions.ratioOfCanvasRange;\n  }\n};","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/viz/translators/translator2d.js"],"names":["extend","require","each","Range","categoryTranslator","intervalTranslator","datetimeTranslator","logarithmicTranslator","vizUtils","typeUtils","getLog","getLogExt","getPower","raiseToExt","isDefined","adjust","_abs","Math","abs","CANVAS_PROP","_Translator2d","addInterval","dummyTranslator","to","value","coord","_canvasOptions","startPoint","_options","conversionValue","round","endPoint","from","validateCanvas","canvas","_","prop","parseInt","makeCategoriesToPoints","categories","categoriesToPoints","forEach","item","i","valueOf","validateBusinessRange","businessRange","validate","valueSelector","baseValueSelector","prepareBreaks","breaks","range","transform","axisType","base","array","br","transformFrom","transformTo","length","sum","push","trFrom","trTo","cumulativeWidth","getCanvasBounds","min","max","minVisible","maxVisible","isLogarithmic","allowNegatives","linearThreshold","rangeMin","rangeMax","rangeMinVisible","rangeMaxVisible","getCheckingMethodsAboutBreaks","inverted","isStartSide","pos","start","end","isEndSide","isInBreak","isBetweenBreaks","prevBreak","getLength","lastBreak","getBreaksSize","exports","Translator2D","options","update","prototype","constructor","reinit","that","_businessRange","script","canvasOptions","_prepareCanvasOptions","visibleCategories","getCategoriesInfo","categoriesLength","isEmpty","ratioOfCanvasRange","canvasLength","interval","_categories","_getDiscreteInterval","addSpiderCategory","_categoriesToPoints","invert","startPointIndex","dataType","_oldMethods","methodName","Object","keys","_conversionValue","sc","_checkingMethodsAboutBreaks","isInverted","_translateBreaks","_calculateSpecialValues","_breaks","size","breaksSize","b","translate","gapSize","_checkValueAboutBreaks","methods","inBreak","break","isHorizontal","correctedCategoriesCount","stick","_canvas","startPadding","endPadding","left","width","right","top","height","bottom","rangeDoubleError","pow","updateCanvas","updateBusinessRange","getBusinessRange","getEventScale","zoomEvent","deltaScale","getCanvasVisibleArea","canvas_position_center_middle","canvas_position_default","canvas_position_left","canvas_position_top","canvas_position_center","canvas_position_middle","canvas_position_right","canvas_position_bottom","canvas_position_start","canvas_position_end","translateSpecialCase","_calculateProjection","distance","_calculateUnProjection","getMinBarSize","minBarSize","visibleArea","minValue","checkMinBarSize","minShownValue","stackValue","bp","direction","specialValue","isNaN","getInterval","zoom","scale","wholeRange","zoomZeroLengthRange","newStart","newEnd","minPoint","endValue","startValue","maxPoint","correction","isDateTime","isDate","newMin","newMax","Date","getMinScale","getScale","val1","val2","_fromValue","isValid","co","getCorrectValue","_toValue","shiftZeroValue","commonBreakSize","isValueProlonged","getRange","getScreenRange","add","diff","dir","_add","coeff","Number"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/translators/translator2d.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar extend = require(\"../../core/utils/extend\").extend;\r\nvar each = require(\"../../core/utils/iterator\").each;\r\nvar Range = require(\"./range\").Range;\r\nvar categoryTranslator = require(\"./category_translator\");\r\nvar intervalTranslator = require(\"./interval_translator\");\r\nvar datetimeTranslator = require(\"./datetime_translator\");\r\nvar logarithmicTranslator = require(\"./logarithmic_translator\");\r\nvar vizUtils = require(\"../core/utils\");\r\nvar typeUtils = require(\"../../core/utils/type\");\r\nvar getLog = vizUtils.getLogExt;\r\nvar getPower = vizUtils.getPower;\r\nvar raiseToExt = vizUtils.raiseToExt;\r\nvar isDefined = typeUtils.isDefined;\r\nvar adjust = require(\"../../core/utils/math\").adjust;\r\nvar _abs = Math.abs;\r\nvar CANVAS_PROP = [\"width\", \"height\", \"left\", \"top\", \"bottom\", \"right\"];\r\nvar _Translator2d;\r\nvar addInterval = require(\"../../core/utils/date\").addInterval;\r\nvar dummyTranslator = {\r\n    to: function(value) {\r\n        var coord = this._canvasOptions.startPoint + (this._options.conversionValue ? value : Math.round(value));\r\n        return coord > this._canvasOptions.endPoint ? this._canvasOptions.endPoint : coord\r\n    },\r\n    from: function(value) {\r\n        return value - this._canvasOptions.startPoint\r\n    }\r\n};\r\nvar validateCanvas = function(canvas) {\r\n    each(CANVAS_PROP, function(_, prop) {\r\n        canvas[prop] = parseInt(canvas[prop]) || 0\r\n    });\r\n    return canvas\r\n};\r\nvar makeCategoriesToPoints = function(categories) {\r\n    var categoriesToPoints = {};\r\n    categories.forEach(function(item, i) {\r\n        categoriesToPoints[item.valueOf()] = i\r\n    });\r\n    return categoriesToPoints\r\n};\r\nvar validateBusinessRange = function(businessRange) {\r\n    if (!(businessRange instanceof Range)) {\r\n        businessRange = new Range(businessRange)\r\n    }\r\n\r\n    function validate(valueSelector, baseValueSelector) {\r\n        if (!isDefined(businessRange[valueSelector]) && isDefined(businessRange[baseValueSelector])) {\r\n            businessRange[valueSelector] = businessRange[baseValueSelector]\r\n        }\r\n    }\r\n    validate(\"minVisible\", \"min\");\r\n    validate(\"maxVisible\", \"max\");\r\n    return businessRange\r\n};\r\n\r\nfunction prepareBreaks(breaks, range) {\r\n    var transform = \"logarithmic\" === range.axisType ? function(value) {\r\n        return getLog(value, range.base)\r\n    } : function(value) {\r\n        return value\r\n    };\r\n    var array = [];\r\n    var br;\r\n    var transformFrom;\r\n    var transformTo;\r\n    var i;\r\n    var length = breaks.length;\r\n    var sum = 0;\r\n    for (i = 0; i < length; i++) {\r\n        br = breaks[i];\r\n        transformFrom = transform(br.from);\r\n        transformTo = transform(br.to);\r\n        sum += transformTo - transformFrom;\r\n        array.push({\r\n            trFrom: transformFrom,\r\n            trTo: transformTo,\r\n            from: br.from,\r\n            to: br.to,\r\n            length: sum,\r\n            cumulativeWidth: br.cumulativeWidth\r\n        })\r\n    }\r\n    return array\r\n}\r\n\r\nfunction getCanvasBounds(range) {\r\n    var min = range.min;\r\n    var max = range.max;\r\n    var minVisible = range.minVisible;\r\n    var maxVisible = range.maxVisible;\r\n    var isLogarithmic = \"logarithmic\" === range.axisType;\r\n    if (isLogarithmic) {\r\n        maxVisible = getLog(maxVisible, range.base, range.allowNegatives, range.linearThreshold);\r\n        minVisible = getLog(minVisible, range.base, range.allowNegatives, range.linearThreshold);\r\n        min = getLog(min, range.base, range.allowNegatives, range.linearThreshold);\r\n        max = getLog(max, range.base, range.allowNegatives, range.linearThreshold)\r\n    }\r\n    return {\r\n        base: range.base,\r\n        rangeMin: min,\r\n        rangeMax: max,\r\n        rangeMinVisible: minVisible,\r\n        rangeMaxVisible: maxVisible\r\n    }\r\n}\r\n\r\nfunction getCheckingMethodsAboutBreaks(inverted) {\r\n    return {\r\n        isStartSide: !inverted ? function(pos, breaks, start, end) {\r\n            return pos < breaks[0][start]\r\n        } : function(pos, breaks, start, end) {\r\n            return pos <= breaks[breaks.length - 1][end]\r\n        },\r\n        isEndSide: !inverted ? function(pos, breaks, start, end) {\r\n            return pos >= breaks[breaks.length - 1][end]\r\n        } : function(pos, breaks, start, end) {\r\n            return pos > breaks[0][start]\r\n        },\r\n        isInBreak: !inverted ? function(pos, br, start, end) {\r\n            return pos >= br[start] && pos < br[end]\r\n        } : function(pos, br, start, end) {\r\n            return pos > br[end] && pos <= br[start]\r\n        },\r\n        isBetweenBreaks: !inverted ? function(pos, br, prevBreak, start, end) {\r\n            return pos < br[start] && pos >= prevBreak[end]\r\n        } : function(pos, br, prevBreak, start, end) {\r\n            return pos >= br[end] && pos < prevBreak[start]\r\n        },\r\n        getLength: !inverted ? function(br) {\r\n            return br.length\r\n        } : function(br, lastBreak) {\r\n            return lastBreak.length - br.length\r\n        },\r\n        getBreaksSize: !inverted ? function(br) {\r\n            return br.cumulativeWidth\r\n        } : function(br, lastBreak) {\r\n            return lastBreak.cumulativeWidth - br.cumulativeWidth\r\n        }\r\n    }\r\n}\r\nexports.Translator2D = _Translator2d = function(businessRange, canvas, options) {\r\n    this.update(businessRange, canvas, options)\r\n};\r\n_Translator2d.prototype = {\r\n    constructor: _Translator2d,\r\n    reinit: function() {\r\n        var that = this;\r\n        var options = that._options;\r\n        var range = that._businessRange;\r\n        var categories = range.categories || [];\r\n        var script = {};\r\n        var canvasOptions = that._prepareCanvasOptions();\r\n        var visibleCategories = vizUtils.getCategoriesInfo(categories, range.minVisible, range.maxVisible).categories;\r\n        var categoriesLength = visibleCategories.length;\r\n        if (range.isEmpty()) {\r\n            script = dummyTranslator\r\n        } else {\r\n            switch (range.axisType) {\r\n                case \"logarithmic\":\r\n                    script = logarithmicTranslator;\r\n                    break;\r\n                case \"semidiscrete\":\r\n                    script = intervalTranslator;\r\n                    canvasOptions.ratioOfCanvasRange = canvasOptions.canvasLength / (addInterval(canvasOptions.rangeMaxVisible, options.interval) - canvasOptions.rangeMinVisible);\r\n                    break;\r\n                case \"discrete\":\r\n                    script = categoryTranslator;\r\n                    that._categories = categories;\r\n                    canvasOptions.interval = that._getDiscreteInterval(options.addSpiderCategory ? categoriesLength + 1 : categoriesLength, canvasOptions);\r\n                    that._categoriesToPoints = makeCategoriesToPoints(categories, canvasOptions.invert);\r\n                    if (categoriesLength) {\r\n                        canvasOptions.startPointIndex = that._categoriesToPoints[visibleCategories[0].valueOf()];\r\n                        that.visibleCategories = visibleCategories\r\n                    }\r\n                    break;\r\n                default:\r\n                    if (\"datetime\" === range.dataType) {\r\n                        script = datetimeTranslator\r\n                    }\r\n            }\r\n        }(that._oldMethods || []).forEach(function(methodName) {\r\n            delete that[methodName]\r\n        });\r\n        that._oldMethods = Object.keys(script);\r\n        extend(that, script);\r\n        that._conversionValue = options.conversionValue ? function(value) {\r\n            return value\r\n        } : function(value) {\r\n            return Math.round(value)\r\n        };\r\n        that.sc = {};\r\n        that._checkingMethodsAboutBreaks = [getCheckingMethodsAboutBreaks(false), getCheckingMethodsAboutBreaks(that.isInverted())];\r\n        that._translateBreaks();\r\n        that._calculateSpecialValues()\r\n    },\r\n    _translateBreaks: function() {\r\n        var breaks = this._breaks;\r\n        var size = this._options.breaksSize;\r\n        var i;\r\n        var b;\r\n        var end;\r\n        var length;\r\n        if (void 0 === breaks) {\r\n            return\r\n        }\r\n        for (i = 0, length = breaks.length; i < length; i++) {\r\n            b = breaks[i];\r\n            end = this.translate(b.to);\r\n            b.end = end;\r\n            b.start = !b.gapSize ? !this.isInverted() ? end - size : end + size : end\r\n        }\r\n    },\r\n    _checkValueAboutBreaks: function(breaks, pos, start, end, methods) {\r\n        var i;\r\n        var length;\r\n        var prop = {\r\n            length: 0,\r\n            breaksSize: void 0,\r\n            inBreak: false\r\n        };\r\n        var br;\r\n        var prevBreak;\r\n        var lastBreak = breaks[breaks.length - 1];\r\n        if (methods.isStartSide(pos, breaks, start, end)) {\r\n            return prop\r\n        } else {\r\n            if (methods.isEndSide(pos, breaks, start, end)) {\r\n                return {\r\n                    length: lastBreak.length,\r\n                    breaksSize: lastBreak.cumulativeWidth,\r\n                    inBreak: false\r\n                }\r\n            }\r\n        }\r\n        for (i = 0, length = breaks.length; i < length; i++) {\r\n            br = breaks[i];\r\n            prevBreak = breaks[i - 1];\r\n            if (methods.isInBreak(pos, br, start, end)) {\r\n                prop.inBreak = true;\r\n                prop.break = br;\r\n                break\r\n            }\r\n            if (prevBreak && methods.isBetweenBreaks(pos, br, prevBreak, start, end)) {\r\n                prop = {\r\n                    length: methods.getLength(prevBreak, lastBreak),\r\n                    breaksSize: methods.getBreaksSize(prevBreak, lastBreak),\r\n                    inBreak: false\r\n                };\r\n                break\r\n            }\r\n        }\r\n        return prop\r\n    },\r\n    isInverted: function() {\r\n        return !(this._options.isHorizontal ^ this._businessRange.invert)\r\n    },\r\n    _getDiscreteInterval: function(categoriesLength, canvasOptions) {\r\n        var correctedCategoriesCount = categoriesLength - (this._options.stick ? 1 : 0);\r\n        return correctedCategoriesCount > 0 ? canvasOptions.canvasLength / correctedCategoriesCount : canvasOptions.canvasLength\r\n    },\r\n    _prepareCanvasOptions: function() {\r\n        var that = this;\r\n        var businessRange = that._businessRange;\r\n        var canvasOptions = that._canvasOptions = getCanvasBounds(businessRange);\r\n        var canvas = that._canvas;\r\n        var breaks = that._breaks;\r\n        var length;\r\n        canvasOptions.startPadding = canvas.startPadding || 0;\r\n        canvasOptions.endPadding = canvas.endPadding || 0;\r\n        if (that._options.isHorizontal) {\r\n            canvasOptions.startPoint = canvas.left + canvasOptions.startPadding;\r\n            length = canvas.width;\r\n            canvasOptions.endPoint = canvas.width - canvas.right - canvasOptions.endPadding;\r\n            canvasOptions.invert = businessRange.invert\r\n        } else {\r\n            canvasOptions.startPoint = canvas.top + canvasOptions.startPadding;\r\n            length = canvas.height;\r\n            canvasOptions.endPoint = canvas.height - canvas.bottom - canvasOptions.endPadding;\r\n            canvasOptions.invert = !businessRange.invert\r\n        }\r\n        that.canvasLength = canvasOptions.canvasLength = canvasOptions.endPoint - canvasOptions.startPoint;\r\n        canvasOptions.rangeDoubleError = Math.pow(10, getPower(canvasOptions.rangeMax - canvasOptions.rangeMin) - getPower(length) - 2);\r\n        canvasOptions.ratioOfCanvasRange = canvasOptions.canvasLength / (canvasOptions.rangeMaxVisible - canvasOptions.rangeMinVisible);\r\n        if (void 0 !== breaks) {\r\n            canvasOptions.ratioOfCanvasRange = (canvasOptions.canvasLength - breaks[breaks.length - 1].cumulativeWidth) / (canvasOptions.rangeMaxVisible - canvasOptions.rangeMinVisible - breaks[breaks.length - 1].length)\r\n        }\r\n        return canvasOptions\r\n    },\r\n    updateCanvas: function(canvas) {\r\n        this._canvas = validateCanvas(canvas);\r\n        this.reinit()\r\n    },\r\n    updateBusinessRange: function(businessRange) {\r\n        var that = this;\r\n        var breaks = businessRange.breaks || [];\r\n        that._businessRange = validateBusinessRange(businessRange);\r\n        that._breaks = breaks.length ? prepareBreaks(breaks, that._businessRange) : void 0;\r\n        that.reinit()\r\n    },\r\n    update: function(businessRange, canvas, options) {\r\n        var that = this;\r\n        that._options = extend(that._options || {}, options);\r\n        that._canvas = validateCanvas(canvas);\r\n        that.updateBusinessRange(businessRange)\r\n    },\r\n    getBusinessRange: function() {\r\n        return this._businessRange\r\n    },\r\n    getEventScale: function(zoomEvent) {\r\n        return zoomEvent.deltaScale || 1\r\n    },\r\n    getCanvasVisibleArea: function() {\r\n        return {\r\n            min: this._canvasOptions.startPoint,\r\n            max: this._canvasOptions.endPoint\r\n        }\r\n    },\r\n    _calculateSpecialValues: function() {\r\n        var that = this;\r\n        var canvasOptions = that._canvasOptions;\r\n        var startPoint = canvasOptions.startPoint - canvasOptions.startPadding;\r\n        var endPoint = canvasOptions.endPoint + canvasOptions.endPadding;\r\n        var range = that._businessRange;\r\n        var minVisible = range.minVisible;\r\n        var maxVisible = range.maxVisible;\r\n        var canvas_position_center_middle = startPoint + canvasOptions.canvasLength / 2;\r\n        var canvas_position_default;\r\n        if (minVisible < 0 && maxVisible > 0 && minVisible !== maxVisible) {\r\n            canvas_position_default = that.translate(0, 1)\r\n        }\r\n        if (!isDefined(canvas_position_default)) {\r\n            var invert = range.invert ^ (minVisible < 0 && maxVisible <= 0);\r\n            if (that._options.isHorizontal) {\r\n                canvas_position_default = invert ? endPoint : startPoint\r\n            } else {\r\n                canvas_position_default = invert ? startPoint : endPoint\r\n            }\r\n        }\r\n        that.sc = {\r\n            canvas_position_default: canvas_position_default,\r\n            canvas_position_left: startPoint,\r\n            canvas_position_top: startPoint,\r\n            canvas_position_center: canvas_position_center_middle,\r\n            canvas_position_middle: canvas_position_center_middle,\r\n            canvas_position_right: endPoint,\r\n            canvas_position_bottom: endPoint,\r\n            canvas_position_start: canvasOptions.invert ? endPoint : startPoint,\r\n            canvas_position_end: canvasOptions.invert ? startPoint : endPoint\r\n        }\r\n    },\r\n    translateSpecialCase: function(value) {\r\n        return this.sc[value]\r\n    },\r\n    _calculateProjection: function(distance) {\r\n        var canvasOptions = this._canvasOptions;\r\n        return canvasOptions.invert ? canvasOptions.endPoint - distance : canvasOptions.startPoint + distance\r\n    },\r\n    _calculateUnProjection: function(distance) {\r\n        var canvasOptions = this._canvasOptions;\r\n        return canvasOptions.invert ? canvasOptions.rangeMaxVisible.valueOf() - distance : canvasOptions.rangeMinVisible.valueOf() + distance\r\n    },\r\n    getMinBarSize: function(minBarSize) {\r\n        var visibleArea = this.getCanvasVisibleArea();\r\n        var minValue = this.from(visibleArea.min + minBarSize);\r\n        return _abs(this.from(visibleArea.min) - (!isDefined(minValue) ? this.from(visibleArea.max) : minValue))\r\n    },\r\n    checkMinBarSize: function(value, minShownValue, stackValue) {\r\n        return _abs(value) < minShownValue ? value >= 0 ? minShownValue : -minShownValue : value\r\n    },\r\n    translate: function(bp, direction) {\r\n        var specialValue = this.translateSpecialCase(bp);\r\n        if (isDefined(specialValue)) {\r\n            return Math.round(specialValue)\r\n        }\r\n        if (isNaN(bp)) {\r\n            return null\r\n        }\r\n        return this.to(bp, direction)\r\n    },\r\n    getInterval: function(interval) {\r\n        var canvasOptions = this._canvasOptions;\r\n        interval = isDefined(interval) ? interval : this._businessRange.interval;\r\n        if (interval) {\r\n            return Math.round(canvasOptions.ratioOfCanvasRange * interval)\r\n        }\r\n        return Math.round(canvasOptions.endPoint - canvasOptions.startPoint)\r\n    },\r\n    zoom: function(translate, scale, wholeRange) {\r\n        var canvasOptions = this._canvasOptions;\r\n        if (canvasOptions.rangeMinVisible.valueOf() === canvasOptions.rangeMaxVisible.valueOf() && 0 !== translate) {\r\n            return this.zoomZeroLengthRange(translate, scale)\r\n        }\r\n        var startPoint = canvasOptions.startPoint;\r\n        var endPoint = canvasOptions.endPoint;\r\n        var isInverted = this.isInverted();\r\n        var newStart = (startPoint + translate) / scale;\r\n        var newEnd = (endPoint + translate) / scale;\r\n        wholeRange = wholeRange || {};\r\n        var minPoint = this.to(isInverted ? wholeRange.endValue : wholeRange.startValue);\r\n        var maxPoint = this.to(isInverted ? wholeRange.startValue : wholeRange.endValue);\r\n        var min;\r\n        var max;\r\n        if (minPoint > newStart) {\r\n            newEnd -= newStart - minPoint;\r\n            newStart = minPoint;\r\n            min = isInverted ? wholeRange.endValue : wholeRange.startValue\r\n        }\r\n        if (maxPoint < newEnd) {\r\n            newStart -= newEnd - maxPoint;\r\n            newEnd = maxPoint;\r\n            max = isInverted ? wholeRange.startValue : wholeRange.endValue\r\n        }\r\n        if (maxPoint - minPoint < newEnd - newStart) {\r\n            newStart = minPoint;\r\n            newEnd = maxPoint\r\n        }\r\n        translate = (endPoint - startPoint) * newStart / (newEnd - newStart) - startPoint;\r\n        scale = (startPoint + translate) / newStart || 1;\r\n        min = isDefined(min) ? min : adjust(this.from(newStart, 1));\r\n        max = isDefined(max) ? max : adjust(this.from(newEnd, -1));\r\n        if (min > max) {\r\n            min = min > wholeRange.endValue ? wholeRange.endValue : min;\r\n            max = max < wholeRange.startValue ? wholeRange.startValue : max\r\n        } else {\r\n            min = min < wholeRange.startValue ? wholeRange.startValue : min;\r\n            max = max > wholeRange.endValue ? wholeRange.endValue : max\r\n        }\r\n        return {\r\n            min: min,\r\n            max: max,\r\n            translate: adjust(translate),\r\n            scale: adjust(scale)\r\n        }\r\n    },\r\n    zoomZeroLengthRange: function(translate, scale) {\r\n        var canvasOptions = this._canvasOptions;\r\n        var min = canvasOptions.rangeMin;\r\n        var max = canvasOptions.rangeMax;\r\n        var correction = (max.valueOf() !== min.valueOf() ? max.valueOf() - min.valueOf() : _abs(canvasOptions.rangeMinVisible.valueOf() - min.valueOf())) / canvasOptions.canvasLength;\r\n        var isDateTime = typeUtils.isDate(max) || typeUtils.isDate(min);\r\n        var isLogarithmic = \"logarithmic\" === this._businessRange.axisType;\r\n        var newMin = canvasOptions.rangeMinVisible.valueOf() - correction;\r\n        var newMax = canvasOptions.rangeMaxVisible.valueOf() + correction;\r\n        newMin = isLogarithmic ? adjust(raiseToExt(newMin, canvasOptions.base)) : isDateTime ? new Date(newMin) : newMin;\r\n        newMax = isLogarithmic ? adjust(raiseToExt(newMax, canvasOptions.base)) : isDateTime ? new Date(newMax) : newMax;\r\n        return {\r\n            min: newMin,\r\n            max: newMax,\r\n            translate: translate,\r\n            scale: scale\r\n        }\r\n    },\r\n    getMinScale: function(zoom) {\r\n        return zoom ? 1.1 : .9\r\n    },\r\n    getScale: function(val1, val2) {\r\n        var canvasOptions = this._canvasOptions;\r\n        if (canvasOptions.rangeMax === canvasOptions.rangeMin) {\r\n            return 1\r\n        }\r\n        val1 = isDefined(val1) ? this._fromValue(val1) : canvasOptions.rangeMin;\r\n        val2 = isDefined(val2) ? this._fromValue(val2) : canvasOptions.rangeMax;\r\n        return (canvasOptions.rangeMax - canvasOptions.rangeMin) / Math.abs(val1 - val2)\r\n    },\r\n    isValid: function(value) {\r\n        var co = this._canvasOptions;\r\n        value = this._fromValue(value);\r\n        return null !== value && !isNaN(value) && value.valueOf() + co.rangeDoubleError >= co.rangeMin && value.valueOf() - co.rangeDoubleError <= co.rangeMax\r\n    },\r\n    getCorrectValue: function(value, direction) {\r\n        var that = this;\r\n        var breaks = that._breaks;\r\n        var prop;\r\n        value = that._fromValue(value);\r\n        if (that._breaks) {\r\n            prop = that._checkValueAboutBreaks(breaks, value, \"trFrom\", \"trTo\", that._checkingMethodsAboutBreaks[0]);\r\n            if (true === prop.inBreak) {\r\n                return that._toValue(direction > 0 ? prop.break.trTo : prop.break.trFrom)\r\n            }\r\n        }\r\n        return that._toValue(value)\r\n    },\r\n    to: function(bp, direction) {\r\n        var range = this.getBusinessRange();\r\n        if (isDefined(range.maxVisible) && isDefined(range.minVisible) && range.maxVisible.valueOf() === range.minVisible.valueOf()) {\r\n            if (!isDefined(bp) || range.maxVisible.valueOf() !== bp.valueOf()) {\r\n                return null\r\n            }\r\n            return this.translateSpecialCase(0 === bp && this._options.shiftZeroValue ? \"canvas_position_default\" : \"canvas_position_middle\")\r\n        }\r\n        bp = this._fromValue(bp);\r\n        var that = this;\r\n        var canvasOptions = that._canvasOptions;\r\n        var breaks = that._breaks;\r\n        var prop = {\r\n            length: 0\r\n        };\r\n        var commonBreakSize = 0;\r\n        if (void 0 !== breaks) {\r\n            prop = that._checkValueAboutBreaks(breaks, bp, \"trFrom\", \"trTo\", that._checkingMethodsAboutBreaks[0]);\r\n            commonBreakSize = isDefined(prop.breaksSize) ? prop.breaksSize : 0\r\n        }\r\n        if (true === prop.inBreak) {\r\n            if (direction > 0) {\r\n                return prop.break.start\r\n            } else {\r\n                if (direction < 0) {\r\n                    return prop.break.end\r\n                } else {\r\n                    return null\r\n                }\r\n            }\r\n        }\r\n        return that._conversionValue(that._calculateProjection((bp - canvasOptions.rangeMinVisible - prop.length) * canvasOptions.ratioOfCanvasRange + commonBreakSize))\r\n    },\r\n    from: function(pos, direction) {\r\n        var that = this;\r\n        var breaks = that._breaks;\r\n        var prop = {\r\n            length: 0\r\n        };\r\n        var canvasOptions = that._canvasOptions;\r\n        var startPoint = canvasOptions.startPoint;\r\n        var commonBreakSize = 0;\r\n        if (void 0 !== breaks) {\r\n            prop = that._checkValueAboutBreaks(breaks, pos, \"start\", \"end\", that._checkingMethodsAboutBreaks[1]);\r\n            commonBreakSize = isDefined(prop.breaksSize) ? prop.breaksSize : 0\r\n        }\r\n        if (true === prop.inBreak) {\r\n            if (direction > 0) {\r\n                return that._toValue(prop.break.trTo)\r\n            } else {\r\n                if (direction < 0) {\r\n                    return that._toValue(prop.break.trFrom)\r\n                } else {\r\n                    return null\r\n                }\r\n            }\r\n        }\r\n        return that._toValue(that._calculateUnProjection((pos - startPoint - commonBreakSize) / canvasOptions.ratioOfCanvasRange + prop.length))\r\n    },\r\n    isValueProlonged: false,\r\n    getRange: function() {\r\n        return [this._toValue(this._canvasOptions.rangeMin), this._toValue(this._canvasOptions.rangeMax)]\r\n    },\r\n    getScreenRange: function() {\r\n        return [this._canvasOptions.startPoint, this._canvasOptions.endPoint]\r\n    },\r\n    add: function(value, diff, dir) {\r\n        return this._add(value, diff, (this._businessRange.invert ? -1 : 1) * dir)\r\n    },\r\n    _add: function(value, diff, coeff) {\r\n        return this._toValue(this._fromValue(value) + diff * coeff)\r\n    },\r\n    _fromValue: function(value) {\r\n        return null !== value ? Number(value) : null\r\n    },\r\n    _toValue: function(value) {\r\n        return null !== value ? Number(value) : null\r\n    },\r\n    ratioOfCanvasRange: function() {\r\n        return this._canvasOptions.ratioOfCanvasRange\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}
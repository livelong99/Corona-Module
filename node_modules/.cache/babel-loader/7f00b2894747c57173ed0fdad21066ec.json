{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/extend.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar isPlainObject = require(\"./type\").isPlainObject;\n\nvar extendFromObject = function extendFromObject(target, source, overrideExistingValues) {\n  target = target || {};\n\n  for (var prop in source) {\n    if (Object.prototype.hasOwnProperty.call(source, prop)) {\n      var value = source[prop];\n\n      if (!(prop in target) || overrideExistingValues) {\n        target[prop] = value;\n      }\n    }\n  }\n\n  return target;\n};\n\nvar extend = function extend(target) {\n  target = target || {};\n  var i = 1;\n  var deep = false;\n\n  if (\"boolean\" === typeof target) {\n    deep = target;\n    target = arguments[1] || {};\n    i++;\n  }\n\n  for (; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    if (null == source) {\n      continue;\n    }\n\n    for (var key in source) {\n      var targetValue = target[key];\n      var sourceValue = source[key];\n      var sourceValueIsArray = false;\n      var clone;\n\n      if (\"__proto__\" === key || target === sourceValue) {\n        continue;\n      }\n\n      if (deep && sourceValue && (isPlainObject(sourceValue) || (sourceValueIsArray = Array.isArray(sourceValue)))) {\n        if (sourceValueIsArray) {\n          clone = targetValue && Array.isArray(targetValue) ? targetValue : [];\n        } else {\n          clone = targetValue && isPlainObject(targetValue) ? targetValue : {};\n        }\n\n        target[key] = extend(deep, clone, sourceValue);\n      } else {\n        if (void 0 !== sourceValue) {\n          target[key] = sourceValue;\n        }\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.extend = extend;\nexports.extendFromObject = extendFromObject;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/core/utils/extend.js"],"names":["isPlainObject","require","extendFromObject","target","source","overrideExistingValues","prop","Object","prototype","hasOwnProperty","call","value","extend","i","deep","arguments","length","key","targetValue","sourceValue","sourceValueIsArray","clone","Array","isArray","exports"],"mappings":"AAAA;;;;;;;;AAQA;;AACA,IAAIA,aAAa,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,aAAtC;;AACA,IAAIE,gBAAgB,GAAG,SAAnBA,gBAAmB,CAASC,MAAT,EAAiBC,MAAjB,EAAyBC,sBAAzB,EAAiD;AACpEF,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;;AACA,OAAK,IAAIG,IAAT,IAAiBF,MAAjB,EAAyB;AACrB,QAAIG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,MAArC,EAA6CE,IAA7C,CAAJ,EAAwD;AACpD,UAAIK,KAAK,GAAGP,MAAM,CAACE,IAAD,CAAlB;;AACA,UAAI,EAAEA,IAAI,IAAIH,MAAV,KAAqBE,sBAAzB,EAAiD;AAC7CF,QAAAA,MAAM,CAACG,IAAD,CAAN,GAAeK,KAAf;AACH;AACJ;AACJ;;AACD,SAAOR,MAAP;AACH,CAXD;;AAYA,IAAIS,MAAM,GAAG,SAASA,MAAT,CAAgBT,MAAhB,EAAwB;AACjCA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACA,MAAIU,CAAC,GAAG,CAAR;AACA,MAAIC,IAAI,GAAG,KAAX;;AACA,MAAI,cAAc,OAAOX,MAAzB,EAAiC;AAC7BW,IAAAA,IAAI,GAAGX,MAAP;AACAA,IAAAA,MAAM,GAAGY,SAAS,CAAC,CAAD,CAAT,IAAgB,EAAzB;AACAF,IAAAA,CAAC;AACJ;;AACD,SAAOA,CAAC,GAAGE,SAAS,CAACC,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9B,QAAIT,MAAM,GAAGW,SAAS,CAACF,CAAD,CAAtB;;AACA,QAAI,QAAQT,MAAZ,EAAoB;AAChB;AACH;;AACD,SAAK,IAAIa,GAAT,IAAgBb,MAAhB,EAAwB;AACpB,UAAIc,WAAW,GAAGf,MAAM,CAACc,GAAD,CAAxB;AACA,UAAIE,WAAW,GAAGf,MAAM,CAACa,GAAD,CAAxB;AACA,UAAIG,kBAAkB,GAAG,KAAzB;AACA,UAAIC,KAAJ;;AACA,UAAI,gBAAgBJ,GAAhB,IAAuBd,MAAM,KAAKgB,WAAtC,EAAmD;AAC/C;AACH;;AACD,UAAIL,IAAI,IAAIK,WAAR,KAAwBnB,aAAa,CAACmB,WAAD,CAAb,KAA+BC,kBAAkB,GAAGE,KAAK,CAACC,OAAN,CAAcJ,WAAd,CAApD,CAAxB,CAAJ,EAA8G;AAC1G,YAAIC,kBAAJ,EAAwB;AACpBC,UAAAA,KAAK,GAAGH,WAAW,IAAII,KAAK,CAACC,OAAN,CAAcL,WAAd,CAAf,GAA4CA,WAA5C,GAA0D,EAAlE;AACH,SAFD,MAEO;AACHG,UAAAA,KAAK,GAAGH,WAAW,IAAIlB,aAAa,CAACkB,WAAD,CAA5B,GAA4CA,WAA5C,GAA0D,EAAlE;AACH;;AACDf,QAAAA,MAAM,CAACc,GAAD,CAAN,GAAcL,MAAM,CAACE,IAAD,EAAOO,KAAP,EAAcF,WAAd,CAApB;AACH,OAPD,MAOO;AACH,YAAI,KAAK,CAAL,KAAWA,WAAf,EAA4B;AACxBhB,UAAAA,MAAM,CAACc,GAAD,CAAN,GAAcE,WAAd;AACH;AACJ;AACJ;AACJ;;AACD,SAAOhB,MAAP;AACH,CArCD;;AAsCAqB,OAAO,CAACZ,MAAR,GAAiBA,MAAjB;AACAY,OAAO,CAACtB,gBAAR,GAA2BA,gBAA3B","sourcesContent":["/**\r\n * DevExtreme (core/utils/extend.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar isPlainObject = require(\"./type\").isPlainObject;\r\nvar extendFromObject = function(target, source, overrideExistingValues) {\r\n    target = target || {};\r\n    for (var prop in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, prop)) {\r\n            var value = source[prop];\r\n            if (!(prop in target) || overrideExistingValues) {\r\n                target[prop] = value\r\n            }\r\n        }\r\n    }\r\n    return target\r\n};\r\nvar extend = function extend(target) {\r\n    target = target || {};\r\n    var i = 1;\r\n    var deep = false;\r\n    if (\"boolean\" === typeof target) {\r\n        deep = target;\r\n        target = arguments[1] || {};\r\n        i++\r\n    }\r\n    for (; i < arguments.length; i++) {\r\n        var source = arguments[i];\r\n        if (null == source) {\r\n            continue\r\n        }\r\n        for (var key in source) {\r\n            var targetValue = target[key];\r\n            var sourceValue = source[key];\r\n            var sourceValueIsArray = false;\r\n            var clone;\r\n            if (\"__proto__\" === key || target === sourceValue) {\r\n                continue\r\n            }\r\n            if (deep && sourceValue && (isPlainObject(sourceValue) || (sourceValueIsArray = Array.isArray(sourceValue)))) {\r\n                if (sourceValueIsArray) {\r\n                    clone = targetValue && Array.isArray(targetValue) ? targetValue : []\r\n                } else {\r\n                    clone = targetValue && isPlainObject(targetValue) ? targetValue : {}\r\n                }\r\n                target[key] = extend(deep, clone, sourceValue)\r\n            } else {\r\n                if (void 0 !== sourceValue) {\r\n                    target[key] = sourceValue\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target\r\n};\r\nexports.extend = extend;\r\nexports.extendFromObject = extendFromObject;\r\n"]},"metadata":{},"sourceType":"script"}
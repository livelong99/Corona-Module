{"ast":null,"code":"/**\r\n * DevExtreme (ui/date_box/ui.date_box.strategy.date_view.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar window = require(\"../../core/utils/window\").getWindow();\n\nvar DateView = require(\"./ui.date_view\");\n\nvar DateBoxStrategy = require(\"./ui.date_box.strategy\");\n\nvar support = require(\"../../core/utils/support\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar dateUtils = require(\"./ui.date_utils\");\n\nvar messageLocalization = require(\"../../localization/message\");\n\nvar DateViewStrategy = DateBoxStrategy.inherit({\n  NAME: \"DateView\",\n  getDefaultOptions: function getDefaultOptions() {\n    return extend(this.callBase(), {\n      openOnFieldClick: true,\n      applyButtonText: messageLocalization.format(\"OK\")\n    });\n  },\n  getDisplayFormat: function getDisplayFormat(displayFormat) {\n    return displayFormat || dateUtils.FORMATS_MAP[this.dateBox.option(\"type\")];\n  },\n  popupConfig: function popupConfig(config) {\n    return {\n      showTitle: true,\n      toolbarItems: this.dateBox._popupToolbarItemsConfig(),\n      onInitialized: config.onInitialized,\n      defaultOptionsRules: [{\n        device: {\n          platform: \"android\"\n        },\n        options: {\n          width: 333,\n          height: 331\n        }\n      }, {\n        device: function device(_device) {\n          var platform = _device.platform;\n          return \"generic\" === platform || \"ios\" === platform;\n        },\n        options: {\n          width: \"auto\",\n          height: \"auto\"\n        }\n      }, {\n        device: function device(_device2) {\n          var platform = _device2.platform;\n          var phone = _device2.phone;\n          return \"generic\" === platform && phone;\n        },\n        options: {\n          width: 333,\n          maxWidth: \"100%\",\n          maxHeight: \"100%\",\n          height: \"auto\",\n          position: {\n            collision: \"flipfit flip\"\n          }\n        }\n      }, {\n        device: {\n          platform: \"ios\",\n          phone: true\n        },\n        options: {\n          width: \"100%\",\n          position: {\n            my: \"bottom\",\n            at: \"bottom\",\n            of: window\n          }\n        }\n      }]\n    };\n  },\n  _renderWidget: function _renderWidget() {\n    if (support.inputType(this.dateBox.option(\"mode\")) && this.dateBox._isNativeType() || this.dateBox.option(\"readOnly\")) {\n      if (this._widget) {\n        this._widget.$element().remove();\n\n        this._widget = null;\n      }\n\n      return;\n    }\n\n    var popup = this._getPopup();\n\n    if (this._widget) {\n      this._widget.option(this._getWidgetOptions());\n    } else {\n      var element = $(\"<div>\").appendTo(popup.$content());\n      this._widget = this._createWidget(element);\n    }\n\n    this._widget.$element().appendTo(this._getWidgetContainer());\n  },\n  _getWidgetName: function _getWidgetName() {\n    return DateView;\n  },\n  renderOpenedState: function renderOpenedState() {\n    this.callBase();\n\n    if (this._widget) {\n      this._widget.option(\"value\", this._widget._getCurrentDate());\n    }\n  },\n  _getWidgetOptions: function _getWidgetOptions() {\n    return {\n      value: this.dateBoxValue() || new Date(),\n      type: this.dateBox.option(\"type\"),\n      minDate: this.dateBox.dateOption(\"min\") || new Date(1900, 0, 1),\n      maxDate: this.dateBox.dateOption(\"max\") || new Date(Date.now() + 50 * dateUtils.ONE_YEAR),\n      onDisposing: function () {\n        this._widget = null;\n      }.bind(this)\n    };\n  }\n});\nmodule.exports = DateViewStrategy;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/ui/date_box/ui.date_box.strategy.date_view.js"],"names":["$","require","window","getWindow","DateView","DateBoxStrategy","support","extend","dateUtils","messageLocalization","DateViewStrategy","inherit","NAME","getDefaultOptions","callBase","openOnFieldClick","applyButtonText","format","getDisplayFormat","displayFormat","FORMATS_MAP","dateBox","option","popupConfig","config","showTitle","toolbarItems","_popupToolbarItemsConfig","onInitialized","defaultOptionsRules","device","platform","options","width","height","_device","_device2","phone","maxWidth","maxHeight","position","collision","my","at","of","_renderWidget","inputType","_isNativeType","_widget","$element","remove","popup","_getPopup","_getWidgetOptions","element","appendTo","$content","_createWidget","_getWidgetContainer","_getWidgetName","renderOpenedState","_getCurrentDate","value","dateBoxValue","Date","type","minDate","dateOption","maxDate","now","ONE_YEAR","onDisposing","bind","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/date_box/ui.date_box.strategy.date_view.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\");\r\nvar window = require(\"../../core/utils/window\").getWindow();\r\nvar DateView = require(\"./ui.date_view\");\r\nvar DateBoxStrategy = require(\"./ui.date_box.strategy\");\r\nvar support = require(\"../../core/utils/support\");\r\nvar extend = require(\"../../core/utils/extend\").extend;\r\nvar dateUtils = require(\"./ui.date_utils\");\r\nvar messageLocalization = require(\"../../localization/message\");\r\nvar DateViewStrategy = DateBoxStrategy.inherit({\r\n    NAME: \"DateView\",\r\n    getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            openOnFieldClick: true,\r\n            applyButtonText: messageLocalization.format(\"OK\")\r\n        })\r\n    },\r\n    getDisplayFormat: function(displayFormat) {\r\n        return displayFormat || dateUtils.FORMATS_MAP[this.dateBox.option(\"type\")]\r\n    },\r\n    popupConfig: function(config) {\r\n        return {\r\n            showTitle: true,\r\n            toolbarItems: this.dateBox._popupToolbarItemsConfig(),\r\n            onInitialized: config.onInitialized,\r\n            defaultOptionsRules: [{\r\n                device: {\r\n                    platform: \"android\"\r\n                },\r\n                options: {\r\n                    width: 333,\r\n                    height: 331\r\n                }\r\n            }, {\r\n                device: function(_device) {\r\n                    var platform = _device.platform;\r\n                    return \"generic\" === platform || \"ios\" === platform\r\n                },\r\n                options: {\r\n                    width: \"auto\",\r\n                    height: \"auto\"\r\n                }\r\n            }, {\r\n                device: function(_device2) {\r\n                    var platform = _device2.platform;\r\n                    var phone = _device2.phone;\r\n                    return \"generic\" === platform && phone\r\n                },\r\n                options: {\r\n                    width: 333,\r\n                    maxWidth: \"100%\",\r\n                    maxHeight: \"100%\",\r\n                    height: \"auto\",\r\n                    position: {\r\n                        collision: \"flipfit flip\"\r\n                    }\r\n                }\r\n            }, {\r\n                device: {\r\n                    platform: \"ios\",\r\n                    phone: true\r\n                },\r\n                options: {\r\n                    width: \"100%\",\r\n                    position: {\r\n                        my: \"bottom\",\r\n                        at: \"bottom\",\r\n                        of: window\r\n                    }\r\n                }\r\n            }]\r\n        }\r\n    },\r\n    _renderWidget: function() {\r\n        if (support.inputType(this.dateBox.option(\"mode\")) && this.dateBox._isNativeType() || this.dateBox.option(\"readOnly\")) {\r\n            if (this._widget) {\r\n                this._widget.$element().remove();\r\n                this._widget = null\r\n            }\r\n            return\r\n        }\r\n        var popup = this._getPopup();\r\n        if (this._widget) {\r\n            this._widget.option(this._getWidgetOptions())\r\n        } else {\r\n            var element = $(\"<div>\").appendTo(popup.$content());\r\n            this._widget = this._createWidget(element)\r\n        }\r\n        this._widget.$element().appendTo(this._getWidgetContainer())\r\n    },\r\n    _getWidgetName: function() {\r\n        return DateView\r\n    },\r\n    renderOpenedState: function() {\r\n        this.callBase();\r\n        if (this._widget) {\r\n            this._widget.option(\"value\", this._widget._getCurrentDate())\r\n        }\r\n    },\r\n    _getWidgetOptions: function() {\r\n        return {\r\n            value: this.dateBoxValue() || new Date,\r\n            type: this.dateBox.option(\"type\"),\r\n            minDate: this.dateBox.dateOption(\"min\") || new Date(1900, 0, 1),\r\n            maxDate: this.dateBox.dateOption(\"max\") || new Date(Date.now() + 50 * dateUtils.ONE_YEAR),\r\n            onDisposing: function() {\r\n                this._widget = null\r\n            }.bind(this)\r\n        }\r\n    }\r\n});\r\nmodule.exports = DateViewStrategy;\r\n"]},"metadata":{},"sourceType":"script"}
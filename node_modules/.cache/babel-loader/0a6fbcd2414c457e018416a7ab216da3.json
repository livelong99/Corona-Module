{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/date_serialization.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar config = require(\"../config\");\n\nvar getLDMLFormatter = require(\"../../localization/ldml/date.formatter\").getFormatter;\n\nvar defaultDateNames = require(\"../../localization/default_date_names\");\n\nvar typeUtils = require(\"./type\");\n\nvar isString = typeUtils.isString;\nvar isDate = typeUtils.isDate;\nvar isNumber = typeUtils.isNumeric;\nvar NUMBER_SERIALIZATION_FORMAT = \"number\";\nvar DATE_SERIALIZATION_FORMAT = \"yyyy/MM/dd\";\nvar DATETIME_SERIALIZATION_FORMAT = \"yyyy/MM/dd HH:mm:ss\";\nvar ISO8601_PATTERN = /^(\\d{4,})(-)?(\\d{2})(-)?(\\d{2})(?:T(\\d{2})(:)?(\\d{2})?(:)?(\\d{2}(?:\\.(\\d{1,3})\\d*)?)?)?(Z|([+-])(\\d{2})(:)?(\\d{2})?)?$/;\nvar ISO8601_TIME_PATTERN = /^(\\d{2}):(\\d{2})(:(\\d{2}))?$/;\nvar ISO8601_PATTERN_PARTS = [\"\", \"yyyy\", \"\", \"MM\", \"\", \"dd\", \"THH\", \"\", \"mm\", \"\", \"ss\", \".SSS\"];\nvar MILLISECOND_LENGHT = 3;\n\nvar dateParser = function dateParser(text, skipISO8601Parsing) {\n  var result;\n  var parsedValue;\n\n  if (isString(text) && !skipISO8601Parsing) {\n    result = parseISO8601String(text);\n  }\n\n  if (!result) {\n    parsedValue = !isDate(text) && Date.parse(text);\n    result = isNumber(parsedValue) ? new Date(parsedValue) : text;\n  }\n\n  return result;\n};\n\nvar parseISO8601String = function parseISO8601String(text) {\n  var parts = text.match(ISO8601_PATTERN);\n\n  var timePart = function timePart(part) {\n    return +part || 0;\n  };\n\n  if (!parts) {\n    parts = text.match(ISO8601_TIME_PATTERN);\n\n    if (parts) {\n      return new Date(0, 0, 0, timePart(parts[1]), timePart(parts[2]), timePart(parts[4]));\n    }\n\n    return;\n  }\n\n  var year = parts[1];\n  var month = --parts[3];\n  var day = parts[5];\n  var timeZoneHour = 0;\n  var timeZoneMinute = 0;\n  timeZoneHour = timePart(parts[14]);\n  timeZoneMinute = timePart(parts[16]);\n\n  if (\"-\" === parts[13]) {\n    timeZoneHour = -timeZoneHour;\n    timeZoneMinute = -timeZoneMinute;\n  }\n\n  var hour = timePart(parts[6]) - timeZoneHour;\n  var minute = timePart(parts[8]) - timeZoneMinute;\n  var second = timePart(parts[10]);\n\n  var parseMilliseconds = function parseMilliseconds(part) {\n    part = part || \"\";\n    return timePart(part) * Math.pow(10, MILLISECOND_LENGHT - part.length);\n  };\n\n  var millisecond = parseMilliseconds(parts[11]);\n\n  if (parts[12]) {\n    return new Date(Date.UTC(year, month, day, hour, minute, second, millisecond));\n  }\n\n  return new Date(year, month, day, hour, minute, second, millisecond);\n};\n\nvar getIso8601Format = function getIso8601Format(text, useUtc) {\n  var parts = text.match(ISO8601_PATTERN);\n  var result = \"\";\n\n  if (!parts) {\n    parts = text.match(ISO8601_TIME_PATTERN);\n\n    if (parts) {\n      return parts[3] ? \"HH:mm:ss\" : \"HH:mm\";\n    }\n\n    return;\n  }\n\n  for (var i = 1; i < ISO8601_PATTERN_PARTS.length; i++) {\n    if (parts[i]) {\n      result += ISO8601_PATTERN_PARTS[i] || parts[i];\n    }\n  }\n\n  if (\"Z\" === parts[12]) {\n    result += \"'Z'\";\n  }\n\n  if (parts[14]) {\n    if (parts[15]) {\n      result += \"xxx\";\n    } else {\n      if (parts[16]) {\n        result += \"xx\";\n      } else {\n        result += \"x\";\n      }\n    }\n  }\n\n  return result;\n};\n\nvar deserializeDate = function deserializeDate(value) {\n  if (\"number\" === typeof value) {\n    return new Date(value);\n  }\n\n  return dateParser(value, !config().forceIsoDateParsing);\n};\n\nvar serializeDate = function serializeDate(value, serializationFormat) {\n  if (!serializationFormat) {\n    return value;\n  }\n\n  if (!isDate(value)) {\n    return null;\n  }\n\n  if (serializationFormat === NUMBER_SERIALIZATION_FORMAT) {\n    return value && value.valueOf ? value.valueOf() : null;\n  }\n\n  return getLDMLFormatter(serializationFormat, defaultDateNames)(value);\n};\n\nvar getDateSerializationFormat = function getDateSerializationFormat(value) {\n  if (\"number\" === typeof value) {\n    return NUMBER_SERIALIZATION_FORMAT;\n  } else {\n    if (isString(value)) {\n      var format;\n\n      if (config().forceIsoDateParsing) {\n        format = getIso8601Format(value);\n      }\n\n      if (format) {\n        return format;\n      } else {\n        if (value.indexOf(\":\") >= 0) {\n          return DATETIME_SERIALIZATION_FORMAT;\n        } else {\n          return DATE_SERIALIZATION_FORMAT;\n        }\n      }\n    } else {\n      if (value) {\n        return null;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  dateParser: dateParser,\n  deserializeDate: deserializeDate,\n  serializeDate: serializeDate,\n  getDateSerializationFormat: getDateSerializationFormat\n};","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/core/utils/date_serialization.js"],"names":["config","require","getLDMLFormatter","getFormatter","defaultDateNames","typeUtils","isString","isDate","isNumber","isNumeric","NUMBER_SERIALIZATION_FORMAT","DATE_SERIALIZATION_FORMAT","DATETIME_SERIALIZATION_FORMAT","ISO8601_PATTERN","ISO8601_TIME_PATTERN","ISO8601_PATTERN_PARTS","MILLISECOND_LENGHT","dateParser","text","skipISO8601Parsing","result","parsedValue","parseISO8601String","Date","parse","parts","match","timePart","part","year","month","day","timeZoneHour","timeZoneMinute","hour","minute","second","parseMilliseconds","Math","pow","length","millisecond","UTC","getIso8601Format","useUtc","i","deserializeDate","value","forceIsoDateParsing","serializeDate","serializationFormat","valueOf","getDateSerializationFormat","format","indexOf","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (core/utils/date_serialization.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar config = require(\"../config\");\r\nvar getLDMLFormatter = require(\"../../localization/ldml/date.formatter\").getFormatter;\r\nvar defaultDateNames = require(\"../../localization/default_date_names\");\r\nvar typeUtils = require(\"./type\");\r\nvar isString = typeUtils.isString;\r\nvar isDate = typeUtils.isDate;\r\nvar isNumber = typeUtils.isNumeric;\r\nvar NUMBER_SERIALIZATION_FORMAT = \"number\";\r\nvar DATE_SERIALIZATION_FORMAT = \"yyyy/MM/dd\";\r\nvar DATETIME_SERIALIZATION_FORMAT = \"yyyy/MM/dd HH:mm:ss\";\r\nvar ISO8601_PATTERN = /^(\\d{4,})(-)?(\\d{2})(-)?(\\d{2})(?:T(\\d{2})(:)?(\\d{2})?(:)?(\\d{2}(?:\\.(\\d{1,3})\\d*)?)?)?(Z|([+-])(\\d{2})(:)?(\\d{2})?)?$/;\r\nvar ISO8601_TIME_PATTERN = /^(\\d{2}):(\\d{2})(:(\\d{2}))?$/;\r\nvar ISO8601_PATTERN_PARTS = [\"\", \"yyyy\", \"\", \"MM\", \"\", \"dd\", \"THH\", \"\", \"mm\", \"\", \"ss\", \".SSS\"];\r\nvar MILLISECOND_LENGHT = 3;\r\nvar dateParser = function(text, skipISO8601Parsing) {\r\n    var result;\r\n    var parsedValue;\r\n    if (isString(text) && !skipISO8601Parsing) {\r\n        result = parseISO8601String(text)\r\n    }\r\n    if (!result) {\r\n        parsedValue = !isDate(text) && Date.parse(text);\r\n        result = isNumber(parsedValue) ? new Date(parsedValue) : text\r\n    }\r\n    return result\r\n};\r\nvar parseISO8601String = function(text) {\r\n    var parts = text.match(ISO8601_PATTERN);\r\n    var timePart = function(part) {\r\n        return +part || 0\r\n    };\r\n    if (!parts) {\r\n        parts = text.match(ISO8601_TIME_PATTERN);\r\n        if (parts) {\r\n            return new Date(0, 0, 0, timePart(parts[1]), timePart(parts[2]), timePart(parts[4]))\r\n        }\r\n        return\r\n    }\r\n    var year = parts[1];\r\n    var month = --parts[3];\r\n    var day = parts[5];\r\n    var timeZoneHour = 0;\r\n    var timeZoneMinute = 0;\r\n    timeZoneHour = timePart(parts[14]);\r\n    timeZoneMinute = timePart(parts[16]);\r\n    if (\"-\" === parts[13]) {\r\n        timeZoneHour = -timeZoneHour;\r\n        timeZoneMinute = -timeZoneMinute\r\n    }\r\n    var hour = timePart(parts[6]) - timeZoneHour;\r\n    var minute = timePart(parts[8]) - timeZoneMinute;\r\n    var second = timePart(parts[10]);\r\n    var parseMilliseconds = function(part) {\r\n        part = part || \"\";\r\n        return timePart(part) * Math.pow(10, MILLISECOND_LENGHT - part.length)\r\n    };\r\n    var millisecond = parseMilliseconds(parts[11]);\r\n    if (parts[12]) {\r\n        return new Date(Date.UTC(year, month, day, hour, minute, second, millisecond))\r\n    }\r\n    return new Date(year, month, day, hour, minute, second, millisecond)\r\n};\r\nvar getIso8601Format = function(text, useUtc) {\r\n    var parts = text.match(ISO8601_PATTERN);\r\n    var result = \"\";\r\n    if (!parts) {\r\n        parts = text.match(ISO8601_TIME_PATTERN);\r\n        if (parts) {\r\n            return parts[3] ? \"HH:mm:ss\" : \"HH:mm\"\r\n        }\r\n        return\r\n    }\r\n    for (var i = 1; i < ISO8601_PATTERN_PARTS.length; i++) {\r\n        if (parts[i]) {\r\n            result += ISO8601_PATTERN_PARTS[i] || parts[i]\r\n        }\r\n    }\r\n    if (\"Z\" === parts[12]) {\r\n        result += \"'Z'\"\r\n    }\r\n    if (parts[14]) {\r\n        if (parts[15]) {\r\n            result += \"xxx\"\r\n        } else {\r\n            if (parts[16]) {\r\n                result += \"xx\"\r\n            } else {\r\n                result += \"x\"\r\n            }\r\n        }\r\n    }\r\n    return result\r\n};\r\nvar deserializeDate = function(value) {\r\n    if (\"number\" === typeof value) {\r\n        return new Date(value)\r\n    }\r\n    return dateParser(value, !config().forceIsoDateParsing)\r\n};\r\nvar serializeDate = function(value, serializationFormat) {\r\n    if (!serializationFormat) {\r\n        return value\r\n    }\r\n    if (!isDate(value)) {\r\n        return null\r\n    }\r\n    if (serializationFormat === NUMBER_SERIALIZATION_FORMAT) {\r\n        return value && value.valueOf ? value.valueOf() : null\r\n    }\r\n    return getLDMLFormatter(serializationFormat, defaultDateNames)(value)\r\n};\r\nvar getDateSerializationFormat = function(value) {\r\n    if (\"number\" === typeof value) {\r\n        return NUMBER_SERIALIZATION_FORMAT\r\n    } else {\r\n        if (isString(value)) {\r\n            var format;\r\n            if (config().forceIsoDateParsing) {\r\n                format = getIso8601Format(value)\r\n            }\r\n            if (format) {\r\n                return format\r\n            } else {\r\n                if (value.indexOf(\":\") >= 0) {\r\n                    return DATETIME_SERIALIZATION_FORMAT\r\n                } else {\r\n                    return DATE_SERIALIZATION_FORMAT\r\n                }\r\n            }\r\n        } else {\r\n            if (value) {\r\n                return null\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = {\r\n    dateParser: dateParser,\r\n    deserializeDate: deserializeDate,\r\n    serializeDate: serializeDate,\r\n    getDateSerializationFormat: getDateSerializationFormat\r\n};\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\r\n * DevExtreme (ui/color_box/color_view.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar eventsEngine = require(\"../../events/core/events_engine\");\n\nvar translator = require(\"../../animation/translator\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar Color = require(\"../../color\");\n\nvar messageLocalization = require(\"../../localization/message\");\n\nvar devices = require(\"../../core/devices\");\n\nvar registerComponent = require(\"../../core/component_registrator\");\n\nvar Editor = require(\"../editor/editor\");\n\nvar NumberBox = require(\"../number_box\");\n\nvar TextBox = require(\"../text_box\");\n\nvar Draggable = require(\"../draggable\");\n\nvar clickEvent = require(\"../../events/click\");\n\nvar COLOR_VIEW_CLASS = \"dx-colorview\";\nvar COLOR_VIEW_CONTAINER_CLASS = \"dx-colorview-container\";\nvar COLOR_VIEW_ROW_CLASS = \"dx-colorview-container-row\";\nvar COLOR_VIEW_CELL_CLASS = \"dx-colorview-container-cell\";\nvar COLOR_VIEW_PALETTE_CLASS = \"dx-colorview-palette\";\nvar COLOR_VIEW_PALETTE_CELL_CLASS = \"dx-colorview-palette-cell\";\nvar COLOR_VIEW_PALETTE_HANDLE_CLASS = \"dx-colorview-palette-handle\";\nvar COLOR_VIEW_PALETTE_GRADIENT_CLASS = \"dx-colorview-palette-gradient\";\nvar COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS = \"dx-colorview-palette-gradient-white\";\nvar COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS = \"dx-colorview-palette-gradient-black\";\nvar COLOR_VIEW_HUE_SCALE_CLASS = \"dx-colorview-hue-scale\";\nvar COLOR_VIEW_HUE_SCALE_CELL_CLASS = \"dx-colorview-hue-scale-cell\";\nvar COLOR_VIEW_HUE_SCALE_HANDLE_CLASS = \"dx-colorview-hue-scale-handle\";\nvar COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS = \"dx-colorview-hue-scale-wrapper\";\nvar COLOR_VIEW_CONTROLS_CONTAINER_CLASS = \"dx-colorview-controls-container\";\nvar COLOR_VIEW_RED_LABEL_CLASS = \"dx-colorview-label-red\";\nvar COLOR_VIEW_GREEN_LABEL_CLASS = \"dx-colorview-label-green\";\nvar COLOR_VIEW_BLUE_LABEL_CLASS = \"dx-colorview-label-blue\";\nvar COLOR_VIEW_HEX_LABEL_CLASS = \"dx-colorview-label-hex\";\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS = \"dx-colorview-alpha-channel-scale\";\nvar COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS = \"dx-colorview-alpha-channel-row\";\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS = \"dx-colorview-alpha-channel-wrapper\";\nvar COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS = \"dx-colorview-alpha-channel-label\";\nvar COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS = \"dx-colorview-alpha-channel-handle\";\nvar COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS = \"dx-colorview-alpha-channel-cell\";\nvar COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS = \"dx-colorview-alpha-channel-border\";\nvar COLOR_VIEW_COLOR_PREVIEW = \"dx-colorview-color-preview\";\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS = \"dx-colorview-color-preview-container\";\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS = \"dx-colorview-color-preview-container-inner\";\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT = \"dx-colorview-color-preview-color-current\";\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW = \"dx-colorview-color-preview-color-new\";\nvar ColorView = Editor.inherit({\n  _supportedKeys: function _supportedKeys() {\n    var isRTL = this.option(\"rtlEnabled\");\n    var that = this;\n\n    var getHorizontalPaletteStep = function getHorizontalPaletteStep(e) {\n      var step = 100 / that._paletteWidth;\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > 1 ? step : 1;\n      return Math.round(step);\n    };\n\n    var updateHorizontalPaletteValue = function updateHorizontalPaletteValue(step) {\n      var value = that._currentColor.hsv.s + step;\n\n      if (value > 100) {\n        value = 100;\n      } else {\n        if (value < 0) {\n          value = 0;\n        }\n      }\n\n      that._currentColor.hsv.s = value;\n      updatePaletteValue();\n    };\n\n    var getVerticalPaletteStep = function getVerticalPaletteStep(e) {\n      var step = 100 / that._paletteHeight;\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > 1 ? step : 1;\n      return Math.round(step);\n    };\n\n    var updateVerticalPaletteValue = function updateVerticalPaletteValue(step) {\n      var value = that._currentColor.hsv.v + step;\n\n      if (value > 100) {\n        value = 100;\n      } else {\n        if (value < 0) {\n          value = 0;\n        }\n      }\n\n      that._currentColor.hsv.v = value;\n      updatePaletteValue();\n    };\n\n    var updatePaletteValue = function updatePaletteValue() {\n      that._placePaletteHandle();\n\n      that._updateColorFromHsv(that._currentColor.hsv.h, that._currentColor.hsv.s, that._currentColor.hsv.v);\n    };\n\n    var getHueScaleStep = function getHueScaleStep(e) {\n      var step = 360 / (that._hueScaleWrapperHeight - that._hueScaleHandleHeight);\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > 1 ? step : 1;\n      return step;\n    };\n\n    var updateHueScaleValue = function updateHueScaleValue(step) {\n      that._currentColor.hsv.h += step;\n\n      that._placeHueScaleHandle();\n\n      var handleLocation = translator.locate(that._$hueScaleHandle);\n\n      that._updateColorHue(handleLocation.top + that._hueScaleHandleHeight / 2);\n    };\n\n    var getAlphaScaleStep = function getAlphaScaleStep(e) {\n      var step = 1 / that._alphaChannelScaleWorkWidth;\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > .01 ? step : .01;\n      step = isRTL ? -step : step;\n      return step;\n    };\n\n    var updateAlphaScaleValue = function updateAlphaScaleValue(step) {\n      that._currentColor.a += step;\n\n      that._placeAlphaChannelHandle();\n\n      var handleLocation = translator.locate(that._$alphaChannelHandle);\n\n      that._calculateColorTransparencyByScaleWidth(handleLocation.left + that._alphaChannelHandleWidth / 2);\n    };\n\n    return extend(this.callBase(), {\n      upArrow: function upArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.ctrlKey) {\n          if (this._currentColor.hsv.h <= 360 && !this._isTopColorHue) {\n            updateHueScaleValue(getHueScaleStep(e));\n          }\n        } else {\n          if (this._currentColor.hsv.v < 100) {\n            updateVerticalPaletteValue(getVerticalPaletteStep(e));\n          }\n        }\n      },\n      downArrow: function downArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.ctrlKey) {\n          if (this._currentColor.hsv.h >= 0) {\n            if (this._isTopColorHue) {\n              this._currentColor.hsv.h = 360;\n            }\n\n            updateHueScaleValue(-getHueScaleStep(e));\n          }\n        } else {\n          if (this._currentColor.hsv.v > 0) {\n            updateVerticalPaletteValue(-getVerticalPaletteStep(e));\n          }\n        }\n      },\n      rightArrow: function rightArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.ctrlKey) {\n          if (isRTL ? this._currentColor.a < 1 : this._currentColor.a > 0 && this.option(\"editAlphaChannel\")) {\n            updateAlphaScaleValue(-getAlphaScaleStep(e));\n          }\n        } else {\n          if (this._currentColor.hsv.s < 100) {\n            updateHorizontalPaletteValue(getHorizontalPaletteStep(e));\n          }\n        }\n      },\n      leftArrow: function leftArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (e.ctrlKey) {\n          if (isRTL ? this._currentColor.a > 0 : this._currentColor.a < 1 && this.option(\"editAlphaChannel\")) {\n            updateAlphaScaleValue(getAlphaScaleStep(e));\n          }\n        } else {\n          if (this._currentColor.hsv.s > 0) {\n            updateHorizontalPaletteValue(-getHorizontalPaletteStep(e));\n          }\n        }\n      },\n      enter: function enter(e) {\n        this._fireEnterKeyPressed(e);\n      }\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      value: null,\n      matchValue: null,\n      onEnterKeyPressed: void 0,\n      editAlphaChannel: false,\n      keyStep: 1,\n      stylingMode: void 0\n    });\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._initColorAndOpacity();\n\n    this._initEnterKeyPressedAction();\n  },\n  _initEnterKeyPressedAction: function _initEnterKeyPressedAction() {\n    this._onEnterKeyPressedAction = this._createActionByOption(\"onEnterKeyPressed\");\n  },\n  _fireEnterKeyPressed: function _fireEnterKeyPressed(e) {\n    if (!this._onEnterKeyPressedAction) {\n      return;\n    }\n\n    this._onEnterKeyPressedAction({\n      event: e\n    });\n  },\n  _initColorAndOpacity: function _initColorAndOpacity() {\n    this._setCurrentColor(this.option(\"value\"));\n  },\n  _setCurrentColor: function _setCurrentColor(value) {\n    value = value || \"#000000\";\n    var newColor = new Color(value);\n\n    if (!newColor.colorIsInvalid) {\n      if (!this._currentColor || this._makeRgba(this._currentColor) !== this._makeRgba(newColor)) {\n        this._currentColor = newColor;\n\n        if (this._$currentColor) {\n          this._makeTransparentBackground(this._$currentColor, newColor);\n        }\n      }\n    } else {\n      this.option(\"value\", this._currentColor.baseColor);\n    }\n  },\n  _setBaseColor: function _setBaseColor(value) {\n    var color = value || \"#000000\";\n    var newColor = new Color(color);\n\n    if (!newColor.colorIsInvalid) {\n      var isBaseColorChanged = this._makeRgba(this.option(\"matchValue\") !== this._makeRgba(newColor));\n\n      if (isBaseColorChanged) {\n        if (this._$baseColor) {\n          this._makeTransparentBackground(this._$baseColor, newColor);\n        }\n      }\n    }\n  },\n  _initMarkup: function _initMarkup() {\n    this.callBase();\n    this.$element().addClass(COLOR_VIEW_CLASS);\n\n    this._renderColorPickerContainer();\n  },\n  _render: function _render() {\n    this.callBase();\n\n    this._renderPalette();\n\n    this._renderHueScale();\n\n    this._renderControlsContainer();\n\n    this._renderControls();\n\n    this._renderAlphaChannelElements();\n  },\n  _makeTransparentBackground: function _makeTransparentBackground($el, color) {\n    if (!(color instanceof Color)) {\n      color = new Color(color);\n    }\n\n    $el.css(\"backgroundColor\", this._makeRgba(color));\n  },\n  _makeRgba: function _makeRgba(color) {\n    if (!(color instanceof Color)) {\n      color = new Color(color);\n    }\n\n    return \"rgba(\" + [color.r, color.g, color.b, color.a].join(\", \") + \")\";\n  },\n  _renderValue: function _renderValue() {\n    this.callBase(this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this.option(\"value\"));\n  },\n  _renderColorPickerContainer: function _renderColorPickerContainer() {\n    var $parent = this.$element();\n    this._$colorPickerContainer = $(\"<div>\").addClass(COLOR_VIEW_CONTAINER_CLASS).appendTo($parent);\n\n    this._renderHtmlRows();\n  },\n  _renderHtmlRows: function _renderHtmlRows(updatedOption) {\n    var $renderedRows = this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS);\n\n    var renderedRowsCount = $renderedRows.length;\n    var rowCount = this.option(\"editAlphaChannel\") ? 2 : 1;\n    var delta = renderedRowsCount - rowCount;\n\n    if (delta > 0) {\n      $renderedRows.eq(-1).remove();\n    }\n\n    if (delta < 0) {\n      delta = Math.abs(delta);\n      var rows = [];\n      var i;\n\n      for (i = 0; i < delta; i++) {\n        rows.push($(\"<div>\").addClass(COLOR_VIEW_ROW_CLASS));\n      }\n\n      if (renderedRowsCount) {\n        for (i = 0; i < rows.length; i++) {\n          $renderedRows.eq(0).after(rows[i]);\n        }\n      } else {\n        this._$colorPickerContainer.append(rows);\n      }\n    }\n  },\n  _renderHtmlCellInsideRow: function _renderHtmlCellInsideRow(index, $rowParent, additionalClass) {\n    return $(\"<div>\").addClass(COLOR_VIEW_CELL_CLASS).addClass(additionalClass).appendTo($rowParent.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(index));\n  },\n  _renderPalette: function _renderPalette() {\n    var $paletteCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_PALETTE_CELL_CLASS);\n\n    var $paletteGradientWhite = $(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS].join(\" \"));\n    var $paletteGradientBlack = $(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS].join(\" \"));\n    this._$palette = $(\"<div>\").addClass(COLOR_VIEW_PALETTE_CLASS).css(\"backgroundColor\", this._currentColor.getPureColor().toHex()).appendTo($paletteCell);\n    this._paletteHeight = this._$palette.height();\n    this._paletteWidth = this._$palette.width();\n\n    this._renderPaletteHandle();\n\n    this._$palette.append([$paletteGradientWhite, $paletteGradientBlack]);\n  },\n  _renderPaletteHandle: function _renderPaletteHandle() {\n    this._$paletteHandle = $(\"<div>\").addClass(COLOR_VIEW_PALETTE_HANDLE_CLASS).appendTo(this._$palette);\n\n    this._createComponent(this._$paletteHandle, Draggable, {\n      contentTemplate: null,\n      boundary: this._$palette,\n      allowMoveByClick: true,\n      boundOffset: function () {\n        return -this._paletteHandleHeight / 2;\n      }.bind(this),\n      onDragMove: function () {\n        var paletteHandlePosition = translator.locate(this._$paletteHandle);\n        this._updateByDrag = true;\n\n        this._updateColorFromHsv(this._currentColor.hsv.h, this._calculateColorSaturation(paletteHandlePosition), this._calculateColorValue(paletteHandlePosition));\n      }.bind(this)\n    });\n\n    this._paletteHandleWidth = this._$paletteHandle.width();\n    this._paletteHandleHeight = this._$paletteHandle.height();\n\n    this._placePaletteHandle();\n  },\n  _placePaletteHandle: function _placePaletteHandle() {\n    translator.move(this._$paletteHandle, {\n      left: Math.round(this._paletteWidth * this._currentColor.hsv.s / 100 - this._paletteHandleWidth / 2),\n      top: Math.round(this._paletteHeight - this._paletteHeight * this._currentColor.hsv.v / 100 - this._paletteHandleHeight / 2)\n    });\n  },\n  _calculateColorValue: function _calculateColorValue(paletteHandlePosition) {\n    var value = Math.floor(paletteHandlePosition.top + this._paletteHandleHeight / 2);\n    return 100 - Math.round(100 * value / this._paletteHeight);\n  },\n  _calculateColorSaturation: function _calculateColorSaturation(paletteHandlePosition) {\n    var saturation = Math.floor(paletteHandlePosition.left + this._paletteHandleWidth / 2);\n    return Math.round(100 * saturation / this._paletteWidth);\n  },\n  _updateColorFromHsv: function _updateColorFromHsv(hue, saturation, value) {\n    var a = this._currentColor.a;\n    this._currentColor = new Color(\"hsv(\" + [hue, saturation, value].join(\",\") + \")\");\n    this._currentColor.a = a;\n\n    this._updateColorParamsAndColorPreview();\n\n    this.applyColor();\n  },\n  _renderHueScale: function _renderHueScale() {\n    var $hueScaleCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_HUE_SCALE_CELL_CLASS);\n\n    this._$hueScaleWrapper = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS).appendTo($hueScaleCell);\n    this._$hueScale = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_CLASS).appendTo(this._$hueScaleWrapper);\n    this._hueScaleHeight = this._$hueScale.height();\n    this._hueScaleWrapperHeight = this._$hueScaleWrapper.outerHeight();\n\n    this._renderHueScaleHandle();\n  },\n  _renderHueScaleHandle: function _renderHueScaleHandle() {\n    this._$hueScaleHandle = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_HANDLE_CLASS).appendTo(this._$hueScaleWrapper);\n\n    this._createComponent(this._$hueScaleHandle, Draggable, {\n      contentTemplate: null,\n      boundary: this._$hueScaleWrapper,\n      allowMoveByClick: true,\n      dragDirection: \"vertical\",\n      onDragMove: function () {\n        this._updateByDrag = true;\n\n        this._updateColorHue(translator.locate(this._$hueScaleHandle).top + this._hueScaleHandleHeight / 2);\n      }.bind(this)\n    });\n\n    this._hueScaleHandleHeight = this._$hueScaleHandle.height();\n\n    this._placeHueScaleHandle();\n  },\n  _placeHueScaleHandle: function _placeHueScaleHandle() {\n    var hueScaleHeight = this._hueScaleWrapperHeight;\n    var handleHeight = this._hueScaleHandleHeight;\n    var top = (hueScaleHeight - handleHeight) * (360 - this._currentColor.hsv.h) / 360;\n\n    if (hueScaleHeight < top + handleHeight) {\n      top = hueScaleHeight - handleHeight;\n    }\n\n    if (top < 0) {\n      top = 0;\n    }\n\n    translator.move(this._$hueScaleHandle, {\n      top: Math.round(top)\n    });\n  },\n  _updateColorHue: function _updateColorHue(handlePosition) {\n    var hue = 360 - Math.round(360 * (handlePosition - this._hueScaleHandleHeight / 2) / (this._hueScaleWrapperHeight - this._hueScaleHandleHeight));\n    var saturation = this._currentColor.hsv.s;\n    var value = this._currentColor.hsv.v;\n    this._isTopColorHue = false;\n    hue = hue < 0 ? 0 : hue;\n\n    if (hue >= 360) {\n      this._isTopColorHue = true;\n      hue = 0;\n    }\n\n    this._updateColorFromHsv(hue, saturation, value);\n\n    this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex());\n  },\n  _renderControlsContainer: function _renderControlsContainer() {\n    var $controlsContainerCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer);\n\n    this._$controlsContainer = $(\"<div>\").addClass(COLOR_VIEW_CONTROLS_CONTAINER_CLASS).appendTo($controlsContainerCell);\n  },\n  _renderControls: function _renderControls() {\n    this._renderColorsPreview();\n\n    this._renderRgbInputs();\n\n    this._renderHexInput();\n  },\n  _renderColorsPreview: function _renderColorsPreview() {\n    var $colorsPreviewContainer = $(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS).appendTo(this._$controlsContainer);\n    var $colorsPreviewContainerInner = $(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS).appendTo($colorsPreviewContainer);\n    this._$currentColor = $(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW].join(\" \"));\n    this._$baseColor = $(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT].join(\" \"));\n\n    this._makeTransparentBackground(this._$baseColor, this.option(\"matchValue\"));\n\n    this._makeTransparentBackground(this._$currentColor, this._currentColor);\n\n    $colorsPreviewContainerInner.append([this._$baseColor, this._$currentColor]);\n  },\n  _renderAlphaChannelElements: function _renderAlphaChannelElements() {\n    if (this.option(\"editAlphaChannel\")) {\n      this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(1).addClass(COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS);\n\n      this._renderAlphaChannelScale();\n\n      this._renderAlphaChannelInput();\n    }\n  },\n  _renderRgbInputs: function _renderRgbInputs() {\n    this._rgbInputsWithLabels = [this._renderEditorWithLabel({\n      editorType: NumberBox,\n      value: this._currentColor.r,\n      onValueChanged: this._updateColor.bind(this, false),\n      labelText: \"R\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaRed\"),\n      labelClass: COLOR_VIEW_RED_LABEL_CLASS\n    }), this._renderEditorWithLabel({\n      editorType: NumberBox,\n      value: this._currentColor.g,\n      onValueChanged: this._updateColor.bind(this, false),\n      labelText: \"G\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaGreen\"),\n      labelClass: COLOR_VIEW_GREEN_LABEL_CLASS\n    }), this._renderEditorWithLabel({\n      editorType: NumberBox,\n      value: this._currentColor.b,\n      onValueChanged: this._updateColor.bind(this, false),\n      labelText: \"B\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaBlue\"),\n      labelClass: COLOR_VIEW_BLUE_LABEL_CLASS\n    })];\n\n    this._$controlsContainer.append(this._rgbInputsWithLabels);\n\n    this._rgbInputs = [this._rgbInputsWithLabels[0].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[1].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[2].find(\".dx-numberbox\").dxNumberBox(\"instance\")];\n  },\n  _renderEditorWithLabel: function _renderEditorWithLabel(options) {\n    var $editor = $(\"<div>\");\n    var $label = $(\"<label>\").addClass(options.labelClass).text(options.labelText + \":\").append($editor);\n    eventsEngine.off($label, clickEvent.name);\n    eventsEngine.on($label, clickEvent.name, function (e) {\n      e.preventDefault();\n    });\n    var editorType = options.editorType;\n    var editorOptions = extend({\n      value: options.value,\n      onValueChanged: options.onValueChanged\n    }, {\n      stylingMode: this.option(\"stylingMode\")\n    });\n\n    if (editorType === NumberBox) {\n      editorOptions.min = options.min || 0;\n      editorOptions.max = options.max || 255;\n      editorOptions.step = options.step || 1;\n    }\n\n    var editor = new editorType($editor, editorOptions);\n\n    this._attachKeyboardProcessorToEditor(editor);\n\n    editor.registerKeyHandler(\"enter\", function (e) {\n      this._fireEnterKeyPressed(e);\n    }.bind(this));\n    this.setAria(\"label\", options.labelAriaText, $editor);\n    return $label;\n  },\n  _attachKeyboardProcessorToEditor: function _attachKeyboardProcessorToEditor(editor) {\n    var keyboardProcessor = editor._keyboardProcessor;\n\n    if (keyboardProcessor) {\n      keyboardProcessor.attachChildProcessor().reinitialize(this._keyboardHandler, this);\n    }\n  },\n  hexInputOptions: function hexInputOptions() {\n    return {\n      editorType: TextBox,\n      value: this._currentColor.toHex().replace(\"#\", \"\"),\n      onValueChanged: this._updateColor.bind(this, true),\n      labelClass: COLOR_VIEW_HEX_LABEL_CLASS,\n      labelText: \"#\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaHex\")\n    };\n  },\n  _renderHexInput: function _renderHexInput() {\n    this._hexInput = TextBox.getInstance(this._renderEditorWithLabel(this.hexInputOptions()).appendTo(this._$controlsContainer).find(\".dx-textbox\"));\n  },\n  _renderAlphaChannelScale: function _renderAlphaChannelScale() {\n    var $alphaChannelScaleCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer, COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS);\n\n    var $alphaChannelBorder = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS).appendTo($alphaChannelScaleCell);\n    var $alphaChannelScaleWrapper = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS).appendTo($alphaChannelBorder);\n    this._$alphaChannelScale = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS).appendTo($alphaChannelScaleWrapper);\n\n    this._makeCSSLinearGradient(this._$alphaChannelScale);\n\n    this._renderAlphaChannelHandle($alphaChannelScaleCell);\n  },\n  _makeCSSLinearGradient: function _makeCSSLinearGradient($el) {\n    var color = this._currentColor;\n    var colorAsRgb = [color.r, color.g, color.b].join(\",\");\n    var colorAsHex = color.toHex().replace(\"#\", \"\");\n\n    var combineGradientString = function combineGradientString(colorAsRgb, colorAsHex) {\n      var rtlEnabled = this.option(\"rtlEnabled\");\n      var startColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"1\" : \"0\") + \")\";\n      var finishColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"0\" : \"1\") + \")\";\n      var startColorIE = \"'#\" + (rtlEnabled ? \"00\" : \"\") + colorAsHex + \"'\";\n      var finishColorIE = \"'#\" + (rtlEnabled ? \"\" : \"00\") + colorAsHex + \"'\";\n      return [\"background-image: -webkit-linear-gradient(180deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -moz-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -o-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1,startColorstr=\" + startColorIE + \", endColorstr=\" + finishColorIE + \")\"].join(\";\");\n    };\n\n    $el.attr(\"style\", combineGradientString.call(this, colorAsRgb, colorAsHex));\n  },\n  _renderAlphaChannelInput: function _renderAlphaChannelInput() {\n    var that = this;\n\n    var $alphaChannelInputCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer);\n\n    that._alphaChannelInput = this._renderEditorWithLabel({\n      editorType: NumberBox,\n      value: this._currentColor.a,\n      max: 1,\n      step: .1,\n      onValueChanged: function onValueChanged(e) {\n        var value = e.value;\n        value = that._currentColor.isValidAlpha(value) ? value : that._currentColor.a;\n\n        that._updateColorTransparency(value);\n\n        that._placeAlphaChannelHandle();\n      },\n      labelClass: COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS,\n      labelText: \"Alpha\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaAlpha\")\n    }).appendTo($alphaChannelInputCell).find(\".dx-numberbox\").dxNumberBox(\"instance\");\n  },\n  _updateColorTransparency: function _updateColorTransparency(transparency) {\n    this._currentColor.a = transparency;\n    this.applyColor();\n  },\n  _renderAlphaChannelHandle: function _renderAlphaChannelHandle($parent) {\n    this._$alphaChannelHandle = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS).appendTo($parent);\n\n    this._createComponent(this._$alphaChannelHandle, Draggable, {\n      contentTemplate: null,\n      boundary: $parent,\n      allowMoveByClick: true,\n      dragDirection: \"horizontal\",\n      onDragMove: function () {\n        this._updateByDrag = true;\n        var $alphaChannelHandle = this._$alphaChannelHandle;\n        var alphaChannelHandlePosition = translator.locate($alphaChannelHandle).left + this._alphaChannelHandleWidth / 2;\n\n        this._calculateColorTransparencyByScaleWidth(alphaChannelHandlePosition);\n      }.bind(this)\n    });\n\n    this._alphaChannelHandleWidth = this._$alphaChannelHandle.width();\n    this._alphaChannelScaleWorkWidth = $parent.width() - this._alphaChannelHandleWidth;\n\n    this._placeAlphaChannelHandle();\n  },\n  _calculateColorTransparencyByScaleWidth: function _calculateColorTransparencyByScaleWidth(handlePosition) {\n    var transparency = (handlePosition - this._alphaChannelHandleWidth / 2) / this._alphaChannelScaleWorkWidth;\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    transparency = rtlEnabled ? transparency : 1 - transparency;\n\n    if (handlePosition >= this._alphaChannelScaleWorkWidth + this._alphaChannelHandleWidth / 2) {\n      transparency = rtlEnabled ? 1 : 0;\n    } else {\n      if (transparency < 1) {\n        transparency = transparency.toFixed(2);\n      }\n    }\n\n    transparency = Math.max(transparency, 0);\n    transparency = Math.min(transparency, 1);\n\n    this._alphaChannelInput.option(\"value\", transparency);\n  },\n  _placeAlphaChannelHandle: function _placeAlphaChannelHandle() {\n    var left = this._alphaChannelScaleWorkWidth * (1 - this._currentColor.a);\n\n    if (left < 0) {\n      left = 0;\n    }\n\n    if (this._alphaChannelScaleWorkWidth < left) {\n      left = this._alphaChannelScaleWorkWidth;\n    }\n\n    translator.move(this._$alphaChannelHandle, {\n      left: this.option(\"rtlEnabled\") ? this._alphaChannelScaleWorkWidth - left : left\n    });\n  },\n  applyColor: function applyColor() {\n    var colorValue = this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this._currentColor.toHex();\n\n    this._makeTransparentBackground(this._$currentColor, this._currentColor);\n\n    this.option(\"value\", colorValue);\n  },\n  cancelColor: function cancelColor() {\n    this._initColorAndOpacity();\n\n    this._refreshMarkup();\n  },\n  _updateColor: function _updateColor(isHex, e) {\n    var rgba;\n    var newColor;\n\n    if (isHex) {\n      newColor = this._validateHex(\"#\" + this._hexInput.option(\"value\"));\n    } else {\n      rgba = this._validateRgb();\n\n      if (this._alphaChannelInput) {\n        rgba.push(this._alphaChannelInput.option(\"value\"));\n        newColor = \"rgba(\" + rgba.join(\", \") + \")\";\n      } else {\n        newColor = \"rgb(\" + rgba.join(\", \") + \")\";\n      }\n    }\n\n    if (!this._suppressEditorsValueUpdating) {\n      this._currentColor = new Color(newColor);\n      this.applyColor();\n\n      this._refreshMarkup();\n    }\n  },\n  _validateHex: function _validateHex(hex) {\n    return this._currentColor.isValidHex(hex) ? hex : this._currentColor.toHex();\n  },\n  _validateRgb: function _validateRgb() {\n    var r = this._rgbInputs[0].option(\"value\");\n\n    var g = this._rgbInputs[1].option(\"value\");\n\n    var b = this._rgbInputs[2].option(\"value\");\n\n    if (!this._currentColor.isValidRGB(r, g, b)) {\n      r = this._currentColor.r;\n      g = this._currentColor.g;\n      b = this._currentColor.b;\n    }\n\n    return [r, g, b];\n  },\n  _refreshMarkup: function _refreshMarkup() {\n    this._placeHueScaleHandle();\n\n    this._placePaletteHandle();\n\n    this._updateColorParamsAndColorPreview();\n\n    this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex());\n\n    if (this._$alphaChannelHandle) {\n      this._updateColorTransparency(this._currentColor.a);\n\n      this._placeAlphaChannelHandle();\n    }\n  },\n  _updateColorParamsAndColorPreview: function _updateColorParamsAndColorPreview() {\n    this._suppressEditorsValueUpdating = true;\n\n    this._hexInput.option(\"value\", this._currentColor.toHex().replace(\"#\", \"\"));\n\n    this._rgbInputs[0].option(\"value\", this._currentColor.r);\n\n    this._rgbInputs[1].option(\"value\", this._currentColor.g);\n\n    this._rgbInputs[2].option(\"value\", this._currentColor.b);\n\n    this._suppressEditorsValueUpdating = false;\n\n    if (this.option(\"editAlphaChannel\")) {\n      this._makeCSSLinearGradient.call(this, this._$alphaChannelScale);\n\n      this._alphaChannelInput.option(\"value\", this._currentColor.a);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    var value = args.value;\n\n    switch (args.name) {\n      case \"value\":\n        this._setCurrentColor(value);\n\n        if (!this._updateByDrag) {\n          this._refreshMarkup();\n        }\n\n        this._updateByDrag = false;\n        this.callBase(args);\n        break;\n\n      case \"matchValue\":\n        this._setBaseColor(value);\n\n        break;\n\n      case \"onEnterKeyPressed\":\n        this._initEnterKeyPressedAction();\n\n        break;\n\n      case \"editAlphaChannel\":\n        if (this._$colorPickerContainer) {\n          this._renderHtmlRows(\"editAlphaChannel\");\n\n          this._renderAlphaChannelElements();\n        }\n\n        break;\n\n      case \"keyStep\":\n        break;\n\n      case \"stylingMode\":\n        this._renderControls();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxColorView\", ColorView);\nmodule.exports = ColorView;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/ui/color_box/color_view.js"],"names":["$","require","eventsEngine","translator","extend","Color","messageLocalization","devices","registerComponent","Editor","NumberBox","TextBox","Draggable","clickEvent","COLOR_VIEW_CLASS","COLOR_VIEW_CONTAINER_CLASS","COLOR_VIEW_ROW_CLASS","COLOR_VIEW_CELL_CLASS","COLOR_VIEW_PALETTE_CLASS","COLOR_VIEW_PALETTE_CELL_CLASS","COLOR_VIEW_PALETTE_HANDLE_CLASS","COLOR_VIEW_PALETTE_GRADIENT_CLASS","COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS","COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS","COLOR_VIEW_HUE_SCALE_CLASS","COLOR_VIEW_HUE_SCALE_CELL_CLASS","COLOR_VIEW_HUE_SCALE_HANDLE_CLASS","COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS","COLOR_VIEW_CONTROLS_CONTAINER_CLASS","COLOR_VIEW_RED_LABEL_CLASS","COLOR_VIEW_GREEN_LABEL_CLASS","COLOR_VIEW_BLUE_LABEL_CLASS","COLOR_VIEW_HEX_LABEL_CLASS","COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS","COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS","COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS","COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS","COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS","COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS","COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS","COLOR_VIEW_COLOR_PREVIEW","COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS","COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS","COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT","COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW","ColorView","inherit","_supportedKeys","isRTL","option","that","getHorizontalPaletteStep","e","step","_paletteWidth","shiftKey","Math","round","updateHorizontalPaletteValue","value","_currentColor","hsv","s","updatePaletteValue","getVerticalPaletteStep","_paletteHeight","updateVerticalPaletteValue","v","_placePaletteHandle","_updateColorFromHsv","h","getHueScaleStep","_hueScaleWrapperHeight","_hueScaleHandleHeight","updateHueScaleValue","_placeHueScaleHandle","handleLocation","locate","_$hueScaleHandle","_updateColorHue","top","getAlphaScaleStep","_alphaChannelScaleWorkWidth","updateAlphaScaleValue","a","_placeAlphaChannelHandle","_$alphaChannelHandle","_calculateColorTransparencyByScaleWidth","left","_alphaChannelHandleWidth","callBase","upArrow","preventDefault","stopPropagation","ctrlKey","_isTopColorHue","downArrow","rightArrow","leftArrow","enter","_fireEnterKeyPressed","_getDefaultOptions","matchValue","onEnterKeyPressed","editAlphaChannel","keyStep","stylingMode","_defaultOptionsRules","concat","device","real","deviceType","isSimulator","options","focusStateEnabled","_init","_initColorAndOpacity","_initEnterKeyPressedAction","_onEnterKeyPressedAction","_createActionByOption","event","_setCurrentColor","newColor","colorIsInvalid","_makeRgba","_$currentColor","_makeTransparentBackground","baseColor","_setBaseColor","color","isBaseColorChanged","_$baseColor","_initMarkup","$element","addClass","_renderColorPickerContainer","_render","_renderPalette","_renderHueScale","_renderControlsContainer","_renderControls","_renderAlphaChannelElements","$el","css","r","g","b","join","_renderValue","$parent","_$colorPickerContainer","appendTo","_renderHtmlRows","updatedOption","$renderedRows","find","renderedRowsCount","length","rowCount","delta","eq","remove","abs","rows","i","push","after","append","_renderHtmlCellInsideRow","index","$rowParent","additionalClass","$paletteCell","$paletteGradientWhite","$paletteGradientBlack","_$palette","getPureColor","toHex","height","width","_renderPaletteHandle","_$paletteHandle","_createComponent","contentTemplate","boundary","allowMoveByClick","boundOffset","_paletteHandleHeight","bind","onDragMove","paletteHandlePosition","_updateByDrag","_calculateColorSaturation","_calculateColorValue","_paletteHandleWidth","move","floor","saturation","hue","_updateColorParamsAndColorPreview","applyColor","$hueScaleCell","_$hueScaleWrapper","_$hueScale","_hueScaleHeight","outerHeight","_renderHueScaleHandle","dragDirection","hueScaleHeight","handleHeight","handlePosition","$controlsContainerCell","_$controlsContainer","_renderColorsPreview","_renderRgbInputs","_renderHexInput","$colorsPreviewContainer","$colorsPreviewContainerInner","_renderAlphaChannelScale","_renderAlphaChannelInput","_rgbInputsWithLabels","_renderEditorWithLabel","editorType","onValueChanged","_updateColor","labelText","labelAriaText","format","labelClass","_rgbInputs","dxNumberBox","$editor","$label","text","off","name","on","editorOptions","min","max","editor","_attachKeyboardProcessorToEditor","registerKeyHandler","setAria","keyboardProcessor","_keyboardProcessor","attachChildProcessor","reinitialize","_keyboardHandler","hexInputOptions","replace","_hexInput","getInstance","$alphaChannelScaleCell","$alphaChannelBorder","$alphaChannelScaleWrapper","_$alphaChannelScale","_makeCSSLinearGradient","_renderAlphaChannelHandle","colorAsRgb","colorAsHex","combineGradientString","rtlEnabled","startColor","finishColor","startColorIE","finishColorIE","attr","call","$alphaChannelInputCell","_alphaChannelInput","isValidAlpha","_updateColorTransparency","transparency","$alphaChannelHandle","alphaChannelHandlePosition","toFixed","colorValue","cancelColor","_refreshMarkup","isHex","rgba","_validateHex","_validateRgb","_suppressEditorsValueUpdating","hex","isValidHex","isValidRGB","_optionChanged","args","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/color_box/color_view.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\");\r\nvar eventsEngine = require(\"../../events/core/events_engine\");\r\nvar translator = require(\"../../animation/translator\");\r\nvar extend = require(\"../../core/utils/extend\").extend;\r\nvar Color = require(\"../../color\");\r\nvar messageLocalization = require(\"../../localization/message\");\r\nvar devices = require(\"../../core/devices\");\r\nvar registerComponent = require(\"../../core/component_registrator\");\r\nvar Editor = require(\"../editor/editor\");\r\nvar NumberBox = require(\"../number_box\");\r\nvar TextBox = require(\"../text_box\");\r\nvar Draggable = require(\"../draggable\");\r\nvar clickEvent = require(\"../../events/click\");\r\nvar COLOR_VIEW_CLASS = \"dx-colorview\";\r\nvar COLOR_VIEW_CONTAINER_CLASS = \"dx-colorview-container\";\r\nvar COLOR_VIEW_ROW_CLASS = \"dx-colorview-container-row\";\r\nvar COLOR_VIEW_CELL_CLASS = \"dx-colorview-container-cell\";\r\nvar COLOR_VIEW_PALETTE_CLASS = \"dx-colorview-palette\";\r\nvar COLOR_VIEW_PALETTE_CELL_CLASS = \"dx-colorview-palette-cell\";\r\nvar COLOR_VIEW_PALETTE_HANDLE_CLASS = \"dx-colorview-palette-handle\";\r\nvar COLOR_VIEW_PALETTE_GRADIENT_CLASS = \"dx-colorview-palette-gradient\";\r\nvar COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS = \"dx-colorview-palette-gradient-white\";\r\nvar COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS = \"dx-colorview-palette-gradient-black\";\r\nvar COLOR_VIEW_HUE_SCALE_CLASS = \"dx-colorview-hue-scale\";\r\nvar COLOR_VIEW_HUE_SCALE_CELL_CLASS = \"dx-colorview-hue-scale-cell\";\r\nvar COLOR_VIEW_HUE_SCALE_HANDLE_CLASS = \"dx-colorview-hue-scale-handle\";\r\nvar COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS = \"dx-colorview-hue-scale-wrapper\";\r\nvar COLOR_VIEW_CONTROLS_CONTAINER_CLASS = \"dx-colorview-controls-container\";\r\nvar COLOR_VIEW_RED_LABEL_CLASS = \"dx-colorview-label-red\";\r\nvar COLOR_VIEW_GREEN_LABEL_CLASS = \"dx-colorview-label-green\";\r\nvar COLOR_VIEW_BLUE_LABEL_CLASS = \"dx-colorview-label-blue\";\r\nvar COLOR_VIEW_HEX_LABEL_CLASS = \"dx-colorview-label-hex\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS = \"dx-colorview-alpha-channel-scale\";\r\nvar COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS = \"dx-colorview-alpha-channel-row\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS = \"dx-colorview-alpha-channel-wrapper\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS = \"dx-colorview-alpha-channel-label\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS = \"dx-colorview-alpha-channel-handle\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS = \"dx-colorview-alpha-channel-cell\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS = \"dx-colorview-alpha-channel-border\";\r\nvar COLOR_VIEW_COLOR_PREVIEW = \"dx-colorview-color-preview\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS = \"dx-colorview-color-preview-container\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS = \"dx-colorview-color-preview-container-inner\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT = \"dx-colorview-color-preview-color-current\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW = \"dx-colorview-color-preview-color-new\";\r\nvar ColorView = Editor.inherit({\r\n    _supportedKeys: function() {\r\n        var isRTL = this.option(\"rtlEnabled\");\r\n        var that = this;\r\n        var getHorizontalPaletteStep = function(e) {\r\n            var step = 100 / that._paletteWidth;\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > 1 ? step : 1;\r\n            return Math.round(step)\r\n        };\r\n        var updateHorizontalPaletteValue = function(step) {\r\n            var value = that._currentColor.hsv.s + step;\r\n            if (value > 100) {\r\n                value = 100\r\n            } else {\r\n                if (value < 0) {\r\n                    value = 0\r\n                }\r\n            }\r\n            that._currentColor.hsv.s = value;\r\n            updatePaletteValue()\r\n        };\r\n        var getVerticalPaletteStep = function(e) {\r\n            var step = 100 / that._paletteHeight;\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > 1 ? step : 1;\r\n            return Math.round(step)\r\n        };\r\n        var updateVerticalPaletteValue = function(step) {\r\n            var value = that._currentColor.hsv.v + step;\r\n            if (value > 100) {\r\n                value = 100\r\n            } else {\r\n                if (value < 0) {\r\n                    value = 0\r\n                }\r\n            }\r\n            that._currentColor.hsv.v = value;\r\n            updatePaletteValue()\r\n        };\r\n        var updatePaletteValue = function() {\r\n            that._placePaletteHandle();\r\n            that._updateColorFromHsv(that._currentColor.hsv.h, that._currentColor.hsv.s, that._currentColor.hsv.v)\r\n        };\r\n        var getHueScaleStep = function(e) {\r\n            var step = 360 / (that._hueScaleWrapperHeight - that._hueScaleHandleHeight);\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > 1 ? step : 1;\r\n            return step\r\n        };\r\n        var updateHueScaleValue = function(step) {\r\n            that._currentColor.hsv.h += step;\r\n            that._placeHueScaleHandle();\r\n            var handleLocation = translator.locate(that._$hueScaleHandle);\r\n            that._updateColorHue(handleLocation.top + that._hueScaleHandleHeight / 2)\r\n        };\r\n        var getAlphaScaleStep = function(e) {\r\n            var step = 1 / that._alphaChannelScaleWorkWidth;\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > .01 ? step : .01;\r\n            step = isRTL ? -step : step;\r\n            return step\r\n        };\r\n        var updateAlphaScaleValue = function(step) {\r\n            that._currentColor.a += step;\r\n            that._placeAlphaChannelHandle();\r\n            var handleLocation = translator.locate(that._$alphaChannelHandle);\r\n            that._calculateColorTransparencyByScaleWidth(handleLocation.left + that._alphaChannelHandleWidth / 2)\r\n        };\r\n        return extend(this.callBase(), {\r\n            upArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (e.ctrlKey) {\r\n                    if (this._currentColor.hsv.h <= 360 && !this._isTopColorHue) {\r\n                        updateHueScaleValue(getHueScaleStep(e))\r\n                    }\r\n                } else {\r\n                    if (this._currentColor.hsv.v < 100) {\r\n                        updateVerticalPaletteValue(getVerticalPaletteStep(e))\r\n                    }\r\n                }\r\n            },\r\n            downArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (e.ctrlKey) {\r\n                    if (this._currentColor.hsv.h >= 0) {\r\n                        if (this._isTopColorHue) {\r\n                            this._currentColor.hsv.h = 360\r\n                        }\r\n                        updateHueScaleValue(-getHueScaleStep(e))\r\n                    }\r\n                } else {\r\n                    if (this._currentColor.hsv.v > 0) {\r\n                        updateVerticalPaletteValue(-getVerticalPaletteStep(e))\r\n                    }\r\n                }\r\n            },\r\n            rightArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (e.ctrlKey) {\r\n                    if (isRTL ? this._currentColor.a < 1 : this._currentColor.a > 0 && this.option(\"editAlphaChannel\")) {\r\n                        updateAlphaScaleValue(-getAlphaScaleStep(e))\r\n                    }\r\n                } else {\r\n                    if (this._currentColor.hsv.s < 100) {\r\n                        updateHorizontalPaletteValue(getHorizontalPaletteStep(e))\r\n                    }\r\n                }\r\n            },\r\n            leftArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (e.ctrlKey) {\r\n                    if (isRTL ? this._currentColor.a > 0 : this._currentColor.a < 1 && this.option(\"editAlphaChannel\")) {\r\n                        updateAlphaScaleValue(getAlphaScaleStep(e))\r\n                    }\r\n                } else {\r\n                    if (this._currentColor.hsv.s > 0) {\r\n                        updateHorizontalPaletteValue(-getHorizontalPaletteStep(e))\r\n                    }\r\n                }\r\n            },\r\n            enter: function(e) {\r\n                this._fireEnterKeyPressed(e)\r\n            }\r\n        })\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            value: null,\r\n            matchValue: null,\r\n            onEnterKeyPressed: void 0,\r\n            editAlphaChannel: false,\r\n            keyStep: 1,\r\n            stylingMode: void 0\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return \"desktop\" === devices.real().deviceType && !devices.isSimulator()\r\n            },\r\n            options: {\r\n                focusStateEnabled: true\r\n            }\r\n        }])\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        this._initColorAndOpacity();\r\n        this._initEnterKeyPressedAction()\r\n    },\r\n    _initEnterKeyPressedAction: function() {\r\n        this._onEnterKeyPressedAction = this._createActionByOption(\"onEnterKeyPressed\")\r\n    },\r\n    _fireEnterKeyPressed: function(e) {\r\n        if (!this._onEnterKeyPressedAction) {\r\n            return\r\n        }\r\n        this._onEnterKeyPressedAction({\r\n            event: e\r\n        })\r\n    },\r\n    _initColorAndOpacity: function() {\r\n        this._setCurrentColor(this.option(\"value\"))\r\n    },\r\n    _setCurrentColor: function(value) {\r\n        value = value || \"#000000\";\r\n        var newColor = new Color(value);\r\n        if (!newColor.colorIsInvalid) {\r\n            if (!this._currentColor || this._makeRgba(this._currentColor) !== this._makeRgba(newColor)) {\r\n                this._currentColor = newColor;\r\n                if (this._$currentColor) {\r\n                    this._makeTransparentBackground(this._$currentColor, newColor)\r\n                }\r\n            }\r\n        } else {\r\n            this.option(\"value\", this._currentColor.baseColor)\r\n        }\r\n    },\r\n    _setBaseColor: function(value) {\r\n        var color = value || \"#000000\";\r\n        var newColor = new Color(color);\r\n        if (!newColor.colorIsInvalid) {\r\n            var isBaseColorChanged = this._makeRgba(this.option(\"matchValue\") !== this._makeRgba(newColor));\r\n            if (isBaseColorChanged) {\r\n                if (this._$baseColor) {\r\n                    this._makeTransparentBackground(this._$baseColor, newColor)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _initMarkup: function() {\r\n        this.callBase();\r\n        this.$element().addClass(COLOR_VIEW_CLASS);\r\n        this._renderColorPickerContainer()\r\n    },\r\n    _render: function() {\r\n        this.callBase();\r\n        this._renderPalette();\r\n        this._renderHueScale();\r\n        this._renderControlsContainer();\r\n        this._renderControls();\r\n        this._renderAlphaChannelElements()\r\n    },\r\n    _makeTransparentBackground: function($el, color) {\r\n        if (!(color instanceof Color)) {\r\n            color = new Color(color)\r\n        }\r\n        $el.css(\"backgroundColor\", this._makeRgba(color))\r\n    },\r\n    _makeRgba: function(color) {\r\n        if (!(color instanceof Color)) {\r\n            color = new Color(color)\r\n        }\r\n        return \"rgba(\" + [color.r, color.g, color.b, color.a].join(\", \") + \")\"\r\n    },\r\n    _renderValue: function() {\r\n        this.callBase(this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this.option(\"value\"))\r\n    },\r\n    _renderColorPickerContainer: function() {\r\n        var $parent = this.$element();\r\n        this._$colorPickerContainer = $(\"<div>\").addClass(COLOR_VIEW_CONTAINER_CLASS).appendTo($parent);\r\n        this._renderHtmlRows()\r\n    },\r\n    _renderHtmlRows: function(updatedOption) {\r\n        var $renderedRows = this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS);\r\n        var renderedRowsCount = $renderedRows.length;\r\n        var rowCount = this.option(\"editAlphaChannel\") ? 2 : 1;\r\n        var delta = renderedRowsCount - rowCount;\r\n        if (delta > 0) {\r\n            $renderedRows.eq(-1).remove()\r\n        }\r\n        if (delta < 0) {\r\n            delta = Math.abs(delta);\r\n            var rows = [];\r\n            var i;\r\n            for (i = 0; i < delta; i++) {\r\n                rows.push($(\"<div>\").addClass(COLOR_VIEW_ROW_CLASS))\r\n            }\r\n            if (renderedRowsCount) {\r\n                for (i = 0; i < rows.length; i++) {\r\n                    $renderedRows.eq(0).after(rows[i])\r\n                }\r\n            } else {\r\n                this._$colorPickerContainer.append(rows)\r\n            }\r\n        }\r\n    },\r\n    _renderHtmlCellInsideRow: function(index, $rowParent, additionalClass) {\r\n        return $(\"<div>\").addClass(COLOR_VIEW_CELL_CLASS).addClass(additionalClass).appendTo($rowParent.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(index))\r\n    },\r\n    _renderPalette: function() {\r\n        var $paletteCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_PALETTE_CELL_CLASS);\r\n        var $paletteGradientWhite = $(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS].join(\" \"));\r\n        var $paletteGradientBlack = $(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS].join(\" \"));\r\n        this._$palette = $(\"<div>\").addClass(COLOR_VIEW_PALETTE_CLASS).css(\"backgroundColor\", this._currentColor.getPureColor().toHex()).appendTo($paletteCell);\r\n        this._paletteHeight = this._$palette.height();\r\n        this._paletteWidth = this._$palette.width();\r\n        this._renderPaletteHandle();\r\n        this._$palette.append([$paletteGradientWhite, $paletteGradientBlack])\r\n    },\r\n    _renderPaletteHandle: function() {\r\n        this._$paletteHandle = $(\"<div>\").addClass(COLOR_VIEW_PALETTE_HANDLE_CLASS).appendTo(this._$palette);\r\n        this._createComponent(this._$paletteHandle, Draggable, {\r\n            contentTemplate: null,\r\n            boundary: this._$palette,\r\n            allowMoveByClick: true,\r\n            boundOffset: function() {\r\n                return -this._paletteHandleHeight / 2\r\n            }.bind(this),\r\n            onDragMove: function() {\r\n                var paletteHandlePosition = translator.locate(this._$paletteHandle);\r\n                this._updateByDrag = true;\r\n                this._updateColorFromHsv(this._currentColor.hsv.h, this._calculateColorSaturation(paletteHandlePosition), this._calculateColorValue(paletteHandlePosition))\r\n            }.bind(this)\r\n        });\r\n        this._paletteHandleWidth = this._$paletteHandle.width();\r\n        this._paletteHandleHeight = this._$paletteHandle.height();\r\n        this._placePaletteHandle()\r\n    },\r\n    _placePaletteHandle: function() {\r\n        translator.move(this._$paletteHandle, {\r\n            left: Math.round(this._paletteWidth * this._currentColor.hsv.s / 100 - this._paletteHandleWidth / 2),\r\n            top: Math.round(this._paletteHeight - this._paletteHeight * this._currentColor.hsv.v / 100 - this._paletteHandleHeight / 2)\r\n        })\r\n    },\r\n    _calculateColorValue: function(paletteHandlePosition) {\r\n        var value = Math.floor(paletteHandlePosition.top + this._paletteHandleHeight / 2);\r\n        return 100 - Math.round(100 * value / this._paletteHeight)\r\n    },\r\n    _calculateColorSaturation: function(paletteHandlePosition) {\r\n        var saturation = Math.floor(paletteHandlePosition.left + this._paletteHandleWidth / 2);\r\n        return Math.round(100 * saturation / this._paletteWidth)\r\n    },\r\n    _updateColorFromHsv: function(hue, saturation, value) {\r\n        var a = this._currentColor.a;\r\n        this._currentColor = new Color(\"hsv(\" + [hue, saturation, value].join(\",\") + \")\");\r\n        this._currentColor.a = a;\r\n        this._updateColorParamsAndColorPreview();\r\n        this.applyColor()\r\n    },\r\n    _renderHueScale: function() {\r\n        var $hueScaleCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_HUE_SCALE_CELL_CLASS);\r\n        this._$hueScaleWrapper = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS).appendTo($hueScaleCell);\r\n        this._$hueScale = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_CLASS).appendTo(this._$hueScaleWrapper);\r\n        this._hueScaleHeight = this._$hueScale.height();\r\n        this._hueScaleWrapperHeight = this._$hueScaleWrapper.outerHeight();\r\n        this._renderHueScaleHandle()\r\n    },\r\n    _renderHueScaleHandle: function() {\r\n        this._$hueScaleHandle = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_HANDLE_CLASS).appendTo(this._$hueScaleWrapper);\r\n        this._createComponent(this._$hueScaleHandle, Draggable, {\r\n            contentTemplate: null,\r\n            boundary: this._$hueScaleWrapper,\r\n            allowMoveByClick: true,\r\n            dragDirection: \"vertical\",\r\n            onDragMove: function() {\r\n                this._updateByDrag = true;\r\n                this._updateColorHue(translator.locate(this._$hueScaleHandle).top + this._hueScaleHandleHeight / 2)\r\n            }.bind(this)\r\n        });\r\n        this._hueScaleHandleHeight = this._$hueScaleHandle.height();\r\n        this._placeHueScaleHandle()\r\n    },\r\n    _placeHueScaleHandle: function() {\r\n        var hueScaleHeight = this._hueScaleWrapperHeight;\r\n        var handleHeight = this._hueScaleHandleHeight;\r\n        var top = (hueScaleHeight - handleHeight) * (360 - this._currentColor.hsv.h) / 360;\r\n        if (hueScaleHeight < top + handleHeight) {\r\n            top = hueScaleHeight - handleHeight\r\n        }\r\n        if (top < 0) {\r\n            top = 0\r\n        }\r\n        translator.move(this._$hueScaleHandle, {\r\n            top: Math.round(top)\r\n        })\r\n    },\r\n    _updateColorHue: function(handlePosition) {\r\n        var hue = 360 - Math.round(360 * (handlePosition - this._hueScaleHandleHeight / 2) / (this._hueScaleWrapperHeight - this._hueScaleHandleHeight));\r\n        var saturation = this._currentColor.hsv.s;\r\n        var value = this._currentColor.hsv.v;\r\n        this._isTopColorHue = false;\r\n        hue = hue < 0 ? 0 : hue;\r\n        if (hue >= 360) {\r\n            this._isTopColorHue = true;\r\n            hue = 0\r\n        }\r\n        this._updateColorFromHsv(hue, saturation, value);\r\n        this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex())\r\n    },\r\n    _renderControlsContainer: function() {\r\n        var $controlsContainerCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer);\r\n        this._$controlsContainer = $(\"<div>\").addClass(COLOR_VIEW_CONTROLS_CONTAINER_CLASS).appendTo($controlsContainerCell)\r\n    },\r\n    _renderControls: function() {\r\n        this._renderColorsPreview();\r\n        this._renderRgbInputs();\r\n        this._renderHexInput()\r\n    },\r\n    _renderColorsPreview: function() {\r\n        var $colorsPreviewContainer = $(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS).appendTo(this._$controlsContainer);\r\n        var $colorsPreviewContainerInner = $(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS).appendTo($colorsPreviewContainer);\r\n        this._$currentColor = $(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW].join(\" \"));\r\n        this._$baseColor = $(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT].join(\" \"));\r\n        this._makeTransparentBackground(this._$baseColor, this.option(\"matchValue\"));\r\n        this._makeTransparentBackground(this._$currentColor, this._currentColor);\r\n        $colorsPreviewContainerInner.append([this._$baseColor, this._$currentColor])\r\n    },\r\n    _renderAlphaChannelElements: function() {\r\n        if (this.option(\"editAlphaChannel\")) {\r\n            this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(1).addClass(COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS);\r\n            this._renderAlphaChannelScale();\r\n            this._renderAlphaChannelInput()\r\n        }\r\n    },\r\n    _renderRgbInputs: function() {\r\n        this._rgbInputsWithLabels = [this._renderEditorWithLabel({\r\n            editorType: NumberBox,\r\n            value: this._currentColor.r,\r\n            onValueChanged: this._updateColor.bind(this, false),\r\n            labelText: \"R\",\r\n            labelAriaText: messageLocalization.format(\"dxColorView-ariaRed\"),\r\n            labelClass: COLOR_VIEW_RED_LABEL_CLASS\r\n        }), this._renderEditorWithLabel({\r\n            editorType: NumberBox,\r\n            value: this._currentColor.g,\r\n            onValueChanged: this._updateColor.bind(this, false),\r\n            labelText: \"G\",\r\n            labelAriaText: messageLocalization.format(\"dxColorView-ariaGreen\"),\r\n            labelClass: COLOR_VIEW_GREEN_LABEL_CLASS\r\n        }), this._renderEditorWithLabel({\r\n            editorType: NumberBox,\r\n            value: this._currentColor.b,\r\n            onValueChanged: this._updateColor.bind(this, false),\r\n            labelText: \"B\",\r\n            labelAriaText: messageLocalization.format(\"dxColorView-ariaBlue\"),\r\n            labelClass: COLOR_VIEW_BLUE_LABEL_CLASS\r\n        })];\r\n        this._$controlsContainer.append(this._rgbInputsWithLabels);\r\n        this._rgbInputs = [this._rgbInputsWithLabels[0].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[1].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[2].find(\".dx-numberbox\").dxNumberBox(\"instance\")]\r\n    },\r\n    _renderEditorWithLabel: function(options) {\r\n        var $editor = $(\"<div>\");\r\n        var $label = $(\"<label>\").addClass(options.labelClass).text(options.labelText + \":\").append($editor);\r\n        eventsEngine.off($label, clickEvent.name);\r\n        eventsEngine.on($label, clickEvent.name, function(e) {\r\n            e.preventDefault()\r\n        });\r\n        var editorType = options.editorType;\r\n        var editorOptions = extend({\r\n            value: options.value,\r\n            onValueChanged: options.onValueChanged\r\n        }, {\r\n            stylingMode: this.option(\"stylingMode\")\r\n        });\r\n        if (editorType === NumberBox) {\r\n            editorOptions.min = options.min || 0;\r\n            editorOptions.max = options.max || 255;\r\n            editorOptions.step = options.step || 1\r\n        }\r\n        var editor = new editorType($editor, editorOptions);\r\n        this._attachKeyboardProcessorToEditor(editor);\r\n        editor.registerKeyHandler(\"enter\", function(e) {\r\n            this._fireEnterKeyPressed(e)\r\n        }.bind(this));\r\n        this.setAria(\"label\", options.labelAriaText, $editor);\r\n        return $label\r\n    },\r\n    _attachKeyboardProcessorToEditor: function(editor) {\r\n        var keyboardProcessor = editor._keyboardProcessor;\r\n        if (keyboardProcessor) {\r\n            keyboardProcessor.attachChildProcessor().reinitialize(this._keyboardHandler, this)\r\n        }\r\n    },\r\n    hexInputOptions: function() {\r\n        return {\r\n            editorType: TextBox,\r\n            value: this._currentColor.toHex().replace(\"#\", \"\"),\r\n            onValueChanged: this._updateColor.bind(this, true),\r\n            labelClass: COLOR_VIEW_HEX_LABEL_CLASS,\r\n            labelText: \"#\",\r\n            labelAriaText: messageLocalization.format(\"dxColorView-ariaHex\")\r\n        }\r\n    },\r\n    _renderHexInput: function() {\r\n        this._hexInput = TextBox.getInstance(this._renderEditorWithLabel(this.hexInputOptions()).appendTo(this._$controlsContainer).find(\".dx-textbox\"))\r\n    },\r\n    _renderAlphaChannelScale: function() {\r\n        var $alphaChannelScaleCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer, COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS);\r\n        var $alphaChannelBorder = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS).appendTo($alphaChannelScaleCell);\r\n        var $alphaChannelScaleWrapper = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS).appendTo($alphaChannelBorder);\r\n        this._$alphaChannelScale = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS).appendTo($alphaChannelScaleWrapper);\r\n        this._makeCSSLinearGradient(this._$alphaChannelScale);\r\n        this._renderAlphaChannelHandle($alphaChannelScaleCell)\r\n    },\r\n    _makeCSSLinearGradient: function($el) {\r\n        var color = this._currentColor;\r\n        var colorAsRgb = [color.r, color.g, color.b].join(\",\");\r\n        var colorAsHex = color.toHex().replace(\"#\", \"\");\r\n        var combineGradientString = function(colorAsRgb, colorAsHex) {\r\n            var rtlEnabled = this.option(\"rtlEnabled\");\r\n            var startColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"1\" : \"0\") + \")\";\r\n            var finishColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"0\" : \"1\") + \")\";\r\n            var startColorIE = \"'#\" + (rtlEnabled ? \"00\" : \"\") + colorAsHex + \"'\";\r\n            var finishColorIE = \"'#\" + (rtlEnabled ? \"\" : \"00\") + colorAsHex + \"'\";\r\n            return [\"background-image: -webkit-linear-gradient(180deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -moz-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -o-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1,startColorstr=\" + startColorIE + \", endColorstr=\" + finishColorIE + \")\"].join(\";\")\r\n        };\r\n        $el.attr(\"style\", combineGradientString.call(this, colorAsRgb, colorAsHex))\r\n    },\r\n    _renderAlphaChannelInput: function() {\r\n        var that = this;\r\n        var $alphaChannelInputCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer);\r\n        that._alphaChannelInput = this._renderEditorWithLabel({\r\n            editorType: NumberBox,\r\n            value: this._currentColor.a,\r\n            max: 1,\r\n            step: .1,\r\n            onValueChanged: function(e) {\r\n                var value = e.value;\r\n                value = that._currentColor.isValidAlpha(value) ? value : that._currentColor.a;\r\n                that._updateColorTransparency(value);\r\n                that._placeAlphaChannelHandle()\r\n            },\r\n            labelClass: COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS,\r\n            labelText: \"Alpha\",\r\n            labelAriaText: messageLocalization.format(\"dxColorView-ariaAlpha\")\r\n        }).appendTo($alphaChannelInputCell).find(\".dx-numberbox\").dxNumberBox(\"instance\")\r\n    },\r\n    _updateColorTransparency: function(transparency) {\r\n        this._currentColor.a = transparency;\r\n        this.applyColor()\r\n    },\r\n    _renderAlphaChannelHandle: function($parent) {\r\n        this._$alphaChannelHandle = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS).appendTo($parent);\r\n        this._createComponent(this._$alphaChannelHandle, Draggable, {\r\n            contentTemplate: null,\r\n            boundary: $parent,\r\n            allowMoveByClick: true,\r\n            dragDirection: \"horizontal\",\r\n            onDragMove: function() {\r\n                this._updateByDrag = true;\r\n                var $alphaChannelHandle = this._$alphaChannelHandle;\r\n                var alphaChannelHandlePosition = translator.locate($alphaChannelHandle).left + this._alphaChannelHandleWidth / 2;\r\n                this._calculateColorTransparencyByScaleWidth(alphaChannelHandlePosition)\r\n            }.bind(this)\r\n        });\r\n        this._alphaChannelHandleWidth = this._$alphaChannelHandle.width();\r\n        this._alphaChannelScaleWorkWidth = $parent.width() - this._alphaChannelHandleWidth;\r\n        this._placeAlphaChannelHandle()\r\n    },\r\n    _calculateColorTransparencyByScaleWidth: function(handlePosition) {\r\n        var transparency = (handlePosition - this._alphaChannelHandleWidth / 2) / this._alphaChannelScaleWorkWidth;\r\n        var rtlEnabled = this.option(\"rtlEnabled\");\r\n        transparency = rtlEnabled ? transparency : 1 - transparency;\r\n        if (handlePosition >= this._alphaChannelScaleWorkWidth + this._alphaChannelHandleWidth / 2) {\r\n            transparency = rtlEnabled ? 1 : 0\r\n        } else {\r\n            if (transparency < 1) {\r\n                transparency = transparency.toFixed(2)\r\n            }\r\n        }\r\n        transparency = Math.max(transparency, 0);\r\n        transparency = Math.min(transparency, 1);\r\n        this._alphaChannelInput.option(\"value\", transparency)\r\n    },\r\n    _placeAlphaChannelHandle: function() {\r\n        var left = this._alphaChannelScaleWorkWidth * (1 - this._currentColor.a);\r\n        if (left < 0) {\r\n            left = 0\r\n        }\r\n        if (this._alphaChannelScaleWorkWidth < left) {\r\n            left = this._alphaChannelScaleWorkWidth\r\n        }\r\n        translator.move(this._$alphaChannelHandle, {\r\n            left: this.option(\"rtlEnabled\") ? this._alphaChannelScaleWorkWidth - left : left\r\n        })\r\n    },\r\n    applyColor: function() {\r\n        var colorValue = this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this._currentColor.toHex();\r\n        this._makeTransparentBackground(this._$currentColor, this._currentColor);\r\n        this.option(\"value\", colorValue)\r\n    },\r\n    cancelColor: function() {\r\n        this._initColorAndOpacity();\r\n        this._refreshMarkup()\r\n    },\r\n    _updateColor: function(isHex, e) {\r\n        var rgba;\r\n        var newColor;\r\n        if (isHex) {\r\n            newColor = this._validateHex(\"#\" + this._hexInput.option(\"value\"))\r\n        } else {\r\n            rgba = this._validateRgb();\r\n            if (this._alphaChannelInput) {\r\n                rgba.push(this._alphaChannelInput.option(\"value\"));\r\n                newColor = \"rgba(\" + rgba.join(\", \") + \")\"\r\n            } else {\r\n                newColor = \"rgb(\" + rgba.join(\", \") + \")\"\r\n            }\r\n        }\r\n        if (!this._suppressEditorsValueUpdating) {\r\n            this._currentColor = new Color(newColor);\r\n            this.applyColor();\r\n            this._refreshMarkup()\r\n        }\r\n    },\r\n    _validateHex: function(hex) {\r\n        return this._currentColor.isValidHex(hex) ? hex : this._currentColor.toHex()\r\n    },\r\n    _validateRgb: function() {\r\n        var r = this._rgbInputs[0].option(\"value\");\r\n        var g = this._rgbInputs[1].option(\"value\");\r\n        var b = this._rgbInputs[2].option(\"value\");\r\n        if (!this._currentColor.isValidRGB(r, g, b)) {\r\n            r = this._currentColor.r;\r\n            g = this._currentColor.g;\r\n            b = this._currentColor.b\r\n        }\r\n        return [r, g, b]\r\n    },\r\n    _refreshMarkup: function() {\r\n        this._placeHueScaleHandle();\r\n        this._placePaletteHandle();\r\n        this._updateColorParamsAndColorPreview();\r\n        this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex());\r\n        if (this._$alphaChannelHandle) {\r\n            this._updateColorTransparency(this._currentColor.a);\r\n            this._placeAlphaChannelHandle()\r\n        }\r\n    },\r\n    _updateColorParamsAndColorPreview: function() {\r\n        this._suppressEditorsValueUpdating = true;\r\n        this._hexInput.option(\"value\", this._currentColor.toHex().replace(\"#\", \"\"));\r\n        this._rgbInputs[0].option(\"value\", this._currentColor.r);\r\n        this._rgbInputs[1].option(\"value\", this._currentColor.g);\r\n        this._rgbInputs[2].option(\"value\", this._currentColor.b);\r\n        this._suppressEditorsValueUpdating = false;\r\n        if (this.option(\"editAlphaChannel\")) {\r\n            this._makeCSSLinearGradient.call(this, this._$alphaChannelScale);\r\n            this._alphaChannelInput.option(\"value\", this._currentColor.a)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        var value = args.value;\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._setCurrentColor(value);\r\n                if (!this._updateByDrag) {\r\n                    this._refreshMarkup()\r\n                }\r\n                this._updateByDrag = false;\r\n                this.callBase(args);\r\n                break;\r\n            case \"matchValue\":\r\n                this._setBaseColor(value);\r\n                break;\r\n            case \"onEnterKeyPressed\":\r\n                this._initEnterKeyPressedAction();\r\n                break;\r\n            case \"editAlphaChannel\":\r\n                if (this._$colorPickerContainer) {\r\n                    this._renderHtmlRows(\"editAlphaChannel\");\r\n                    this._renderAlphaChannelElements()\r\n                }\r\n                break;\r\n            case \"keyStep\":\r\n                break;\r\n            case \"stylingMode\":\r\n                this._renderControls();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nregisterComponent(\"dxColorView\", ColorView);\r\nmodule.exports = ColorView;\r\n"]},"metadata":{},"sourceType":"script"}
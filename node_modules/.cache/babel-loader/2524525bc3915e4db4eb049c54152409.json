{"ast":null,"code":"/**\r\n * DevExtreme (ui/number_box/number_box.mask.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar eventsEngine = require(\"../../events/core/events_engine\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar isNumeric = require(\"../../core/utils/type\").isNumeric;\n\nvar browser = require(\"../../core/utils/browser\");\n\nvar devices = require(\"../../core/devices\");\n\nvar fitIntoRange = require(\"../../core/utils/math\").fitIntoRange;\n\nvar inRange = require(\"../../core/utils/math\").inRange;\n\nvar escapeRegExp = require(\"../../core/utils/common\").escapeRegExp;\n\nvar number = require(\"../../localization/number\");\n\nvar maskCaret = require(\"./number_box.caret\");\n\nvar getLDMLFormat = require(\"../../localization/ldml/number\").getFormat;\n\nvar NumberBoxBase = require(\"./number_box.base\");\n\nvar eventUtils = require(\"../../events/utils\");\n\nvar typeUtils = require(\"../../core/utils/type\");\n\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\";\nvar MOVE_FORWARD = 1;\nvar MOVE_BACKWARD = -1;\nvar MINUS = \"-\";\nvar MINUS_KEY = \"minus\";\nvar NUMPUD_MINUS_KEY_IE = \"Subtract\";\nvar INPUT_EVENT = \"input\";\nvar CARET_TIMEOUT_DURATION = browser.msie ? 300 : 0;\n\nvar ensureDefined = function ensureDefined(value, defaultValue) {\n  return void 0 === value ? defaultValue : value;\n};\n\nvar NumberBoxMask = NumberBoxBase.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      useMaskBehavior: true,\n      format: null\n    });\n  },\n  _isDeleteKey: function _isDeleteKey(key) {\n    return \"del\" === key;\n  },\n  _supportedKeys: function _supportedKeys() {\n    if (!this._useMaskBehavior()) {\n      return this.callBase();\n    }\n\n    var that = this;\n    return extend(this.callBase(), {\n      minus: that._revertSign.bind(that),\n      del: that._removeHandler.bind(that),\n      backspace: that._removeHandler.bind(that),\n      leftArrow: that._arrowHandler.bind(that, MOVE_BACKWARD),\n      rightArrow: that._arrowHandler.bind(that, MOVE_FORWARD),\n      home: that._moveCaretToBoundaryEventHandler.bind(that, MOVE_FORWARD),\n      enter: that._updateFormattedValue.bind(that),\n      end: that._moveCaretToBoundaryEventHandler.bind(that, MOVE_BACKWARD)\n    });\n  },\n  _focusInHandler: function _focusInHandler(e) {\n    if (!this._preventNestedFocusEvent(e)) {\n      this.clearCaretTimeout();\n      this._caretTimeout = setTimeout(function () {\n        this._caretTimeout = null;\n\n        var caret = this._caret();\n\n        if (caret.start === caret.end && this._useMaskBehavior()) {\n          var text = this._getInputVal();\n\n          var decimalSeparator = number.getDecimalSeparator();\n          var decimalSeparatorIndex = text.indexOf(decimalSeparator);\n\n          if (decimalSeparatorIndex >= 0) {\n            this._caret({\n              start: decimalSeparatorIndex,\n              end: decimalSeparatorIndex\n            });\n          } else {\n            this._moveCaretToBoundaryEventHandler(MOVE_BACKWARD, e);\n          }\n        }\n      }.bind(this), CARET_TIMEOUT_DURATION);\n    }\n\n    this.callBase(e);\n  },\n  _focusOutHandler: function _focusOutHandler(e) {\n    var shouldHandleEvent = !this._preventNestedFocusEvent(e);\n\n    if (shouldHandleEvent) {\n      this._focusOutOccurs = true;\n\n      if (this._useMaskBehavior()) {\n        this._updateFormattedValue();\n      }\n    }\n\n    this.callBase(e);\n\n    if (shouldHandleEvent) {\n      this._focusOutOccurs = false;\n    }\n  },\n  _hasValueBeenChanged: function _hasValueBeenChanged(inputValue) {\n    var format = this._getFormatPattern();\n\n    var value = this.option(\"value\");\n    var formatted = this._format(value, format) || \"\";\n    return formatted !== inputValue;\n  },\n  _updateFormattedValue: function _updateFormattedValue() {\n    var inputValue = this._getInputVal();\n\n    if (this._hasValueBeenChanged(inputValue)) {\n      this._parsedValue = this._tryParse(inputValue, this._caret());\n\n      this._adjustParsedValue();\n\n      this._setTextByParsedValue();\n\n      if (this._parsedValue !== this.option(\"value\")) {\n        eventsEngine.trigger(this._input(), \"change\");\n      }\n    }\n  },\n  _arrowHandler: function _arrowHandler(step, e) {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var text = this._getInputVal();\n\n    var format = this._getFormatPattern();\n\n    var nextCaret = maskCaret.getCaretWithOffset(this._caret(), step);\n\n    if (!maskCaret.isCaretInBoundaries(nextCaret, text, format)) {\n      nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\n      e.preventDefault();\n\n      this._caret(maskCaret.getCaretInBoundaries(nextCaret, text, format));\n    }\n  },\n  _moveCaretToBoundary: function _moveCaretToBoundary(direction) {\n    var boundaries = maskCaret.getCaretBoundaries(this._getInputVal(), this._getFormatPattern());\n    var newCaret = maskCaret.getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\n\n    this._caret(newCaret);\n  },\n  _moveCaretToBoundaryEventHandler: function _moveCaretToBoundaryEventHandler(direction, e) {\n    if (!this._useMaskBehavior() || e && e.shiftKey) {\n      return;\n    }\n\n    this._moveCaretToBoundary(direction);\n\n    e && e.preventDefault();\n  },\n  _shouldMoveCaret: function _shouldMoveCaret(text, caret) {\n    var decimalSeparator = number.getDecimalSeparator();\n    var isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator;\n    var isZeroNext = \"0\" === text.charAt(caret.end);\n    var moveToFloat = (this._lastKey === decimalSeparator || \".\" === this._lastKey) && isDecimalSeparatorNext;\n    var zeroToZeroReplace = \"0\" === this._lastKey && isZeroNext;\n    return moveToFloat || zeroToZeroReplace;\n  },\n  _getInputVal: function _getInputVal() {\n    return number.convertDigits(this._input().val(), true);\n  },\n  _keyboardHandler: function _keyboardHandler(e) {\n    this.clearCaretTimeout();\n    this._lastKey = number.convertDigits(eventUtils.getChar(e), true);\n    this._lastKeyName = eventUtils.normalizeKeyName(e);\n\n    if (!this._shouldHandleKey(e.originalEvent)) {\n      return this.callBase(e);\n    }\n\n    var normalizedText = this._getInputVal();\n\n    var caret = this._caret();\n\n    var enteredChar = this._lastKeyName === MINUS_KEY ? \"\" : this._lastKey;\n\n    var newValue = this._tryParse(normalizedText, caret, enteredChar);\n\n    if (this._shouldMoveCaret(normalizedText, caret)) {\n      this._moveCaret(1);\n\n      e.originalEvent.preventDefault();\n    }\n\n    if (void 0 === newValue) {\n      if (this._lastKeyName !== MINUS_KEY) {\n        e.originalEvent.preventDefault();\n      }\n    } else {\n      this._parsedValue = newValue;\n    }\n\n    return this.callBase(e);\n  },\n  _keyPressHandler: function _keyPressHandler(e) {\n    if (!this._useMaskBehavior()) {\n      this.callBase(e);\n    }\n  },\n  _removeHandler: function _removeHandler(e) {\n    var caret = this._caret();\n\n    var text = this._getInputVal();\n\n    var start = caret.start;\n    var end = caret.end;\n    this._lastKey = eventUtils.getChar(e);\n    this._lastKeyName = eventUtils.normalizeKeyName(e);\n\n    var isDeleteKey = this._isDeleteKey(this._lastKeyName);\n\n    var isBackspaceKey = !isDeleteKey;\n\n    if (start === end) {\n      var caretPosition = start;\n      var canDelete = isBackspaceKey && caretPosition > 0 || isDeleteKey && caretPosition < text.length;\n\n      if (canDelete) {\n        isDeleteKey && end++;\n        isBackspaceKey && start--;\n      } else {\n        e.preventDefault();\n        return;\n      }\n    }\n\n    var char = text.slice(start, end);\n\n    if (this._isStub(char)) {\n      this._moveCaret(isDeleteKey ? 1 : -1);\n\n      if (this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0)) {\n        this._revertSign(e);\n\n        this._setTextByParsedValue();\n      }\n\n      e.preventDefault();\n      return;\n    }\n\n    var decimalSeparator = number.getDecimalSeparator();\n\n    if (char === decimalSeparator) {\n      var decimalSeparatorIndex = text.indexOf(decimalSeparator);\n\n      if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\n        this._moveCaret(isDeleteKey ? 1 : -1);\n\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    if (end - start < text.length) {\n      var editedText = this._replaceSelectedText(text, {\n        start: start,\n        end: end\n      }, \"\");\n\n      var noDigits = editedText.search(/[0-9]/) < 0;\n\n      if (noDigits && this._isValueInRange(0)) {\n        this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0) ? -0 : 0;\n        return;\n      }\n    }\n\n    var valueAfterRemoving = this._tryParse(text, {\n      start: start,\n      end: end\n    }, \"\");\n\n    if (void 0 === valueAfterRemoving) {\n      e.preventDefault();\n    } else {\n      this._parsedValue = valueAfterRemoving;\n    }\n  },\n  _isPercentFormat: function _isPercentFormat() {\n    var format = this._getFormatPattern();\n\n    var noEscapedFormat = format.replace(/'[^']+'/g, \"\");\n    return noEscapedFormat.indexOf(\"%\") !== -1;\n  },\n  _parse: function _parse(text, format) {\n    var formatOption = this.option(\"format\");\n    var isCustomParser = typeUtils.isFunction(formatOption.parser);\n    var parser = isCustomParser ? formatOption.parser : number.parse;\n    var formatPointIndex = format.indexOf(\".\");\n    var textPointIndex = text.indexOf(number.getDecimalSeparator());\n    var formatIntegerPartLength = formatPointIndex !== -1 ? formatPointIndex : format.length;\n    var textIntegerPartLength = textPointIndex !== -1 ? textPointIndex : text.length;\n\n    if (textIntegerPartLength > formatIntegerPartLength && format.indexOf(\"#\") === -1) {\n      text = text.substr(textIntegerPartLength - formatIntegerPartLength);\n    }\n\n    return parser(text, format);\n  },\n  _format: function _format(value, format) {\n    var formatOption = this.option(\"format\");\n    var isCustomFormatter = typeUtils.isFunction(formatOption.formatter);\n    var formatter = isCustomFormatter ? formatOption.formatter : number.format;\n    return formatter(value, format);\n  },\n  _getFormatPattern: function _getFormatPattern() {\n    var format = this.option(\"format\");\n    var isLDMLPattern = \"string\" === typeof format && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\n\n    if (isLDMLPattern) {\n      return format;\n    } else {\n      return getLDMLFormat(function (value) {\n        var text = this._format(value, format);\n\n        return number.convertDigits(text, true);\n      }.bind(this));\n    }\n  },\n  _getFormatForSign: function _getFormatForSign(text) {\n    var format = this._getFormatPattern();\n\n    var signParts = format.split(\";\");\n    var sign = number.getSign(text, format);\n    signParts[1] = signParts[1] || \"-\" + signParts[0];\n    return sign < 0 ? signParts[1] : signParts[0];\n  },\n  _removeStubs: function _removeStubs(text, excludeComma) {\n    var format = this._getFormatForSign(text);\n\n    var thousandsSeparator = number.getThousandsSeparator();\n\n    var stubs = this._getStubs(format);\n\n    var result = text;\n\n    if (stubs.length) {\n      var prefixStubs = stubs[0];\n      var postfixRegex = new RegExp(\"(\" + escapeRegExp(stubs[1] || \"\") + \")$\", \"g\");\n      var decoratorsRegex = new RegExp(\"[-\" + escapeRegExp(excludeComma ? \"\" : thousandsSeparator) + \"]\", \"g\");\n      result = result.replace(prefixStubs, \"\").replace(postfixRegex, \"\").replace(decoratorsRegex, \"\");\n    }\n\n    return result;\n  },\n  _getStubs: function _getStubs(format) {\n    var regExpResult = /[^']([#0.,]+)/g.exec(format);\n    var pattern = regExpResult && regExpResult[0].trim();\n    return format.split(pattern).map(function (stub) {\n      return stub.replace(/'/g, \"\");\n    });\n  },\n  _truncateToPrecision: function _truncateToPrecision(value, maxPrecision) {\n    if (typeUtils.isDefined(value)) {\n      var strValue = value.toString();\n      var decimalSeparatorIndex = strValue.indexOf(\".\");\n\n      if (strValue && decimalSeparatorIndex > -1) {\n        var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\n        return isNaN(parsedValue) ? value : parsedValue;\n      }\n    }\n\n    return value;\n  },\n  _tryParse: function _tryParse(text, selection, char) {\n    var editedText = this._replaceSelectedText(text, selection, char);\n\n    var format = this._getFormatPattern();\n\n    var isTextSelected = selection.start !== selection.end;\n\n    var parsedValue = this._getParsedValue(editedText, format);\n\n    var maxPrecision = this._getPrecisionLimits(format, editedText).max;\n\n    var isValueChanged = parsedValue !== this._parsedValue;\n    var decimalSeparator = number.getDecimalSeparator();\n    var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision;\n\n    var isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\n\n    if (isDecimalPointRestricted || isUselessCharRestricted) {\n      return;\n    }\n\n    if (\"\" === this._removeStubs(editedText)) {\n      parsedValue = 0 * this._parsedValue;\n    }\n\n    if (isNaN(parsedValue)) {\n      return;\n    }\n\n    var value = null === parsedValue ? this._parsedValue : parsedValue;\n    parsedValue = this._truncateToPrecision(value, maxPrecision);\n    return this._isPercentFormat() ? parsedValue && parsedValue / 100 : parsedValue;\n  },\n  _getParsedValue: function _getParsedValue(text, format) {\n    var sign = number.getSign(text, format);\n\n    var textWithoutStubs = this._removeStubs(text, true);\n\n    var parsedValue = this._parse(textWithoutStubs, format);\n\n    var parsedValueWithSign = parsedValue ? sign * parsedValue : parsedValue;\n    return parsedValueWithSign;\n  },\n  _isValueIncomplete: function _isValueIncomplete(text) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(text);\n    }\n\n    var caret = this._caret();\n\n    var point = number.getDecimalSeparator();\n    var pointIndex = text.indexOf(point);\n    var isCaretOnFloat = pointIndex >= 0 && pointIndex < caret.start;\n\n    var textParts = this._removeStubs(text, true).split(point);\n\n    if (!isCaretOnFloat || 2 !== textParts.length) {\n      return false;\n    }\n\n    var floatLength = textParts[1].length;\n\n    var precision = this._getPrecisionLimits(this._getFormatPattern(), text);\n\n    var isPrecisionInRange = inRange(floatLength, precision.min, precision.max);\n    var endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\n    return isPrecisionInRange && (endsWithZero || !floatLength);\n  },\n  _isValueInRange: function _isValueInRange(value) {\n    var min = ensureDefined(this.option(\"min\"), -(1 / 0));\n    var max = ensureDefined(this.option(\"max\"), 1 / 0);\n    return inRange(value, min, max);\n  },\n  _setInputText: function _setInputText(text) {\n    var normalizedText = number.convertDigits(text, true);\n    var newCaret = maskCaret.getCaretAfterFormat(this._getInputVal(), normalizedText, this._caret(), this._getFormatPattern());\n\n    this._input().val(text);\n\n    this._toggleEmptinessEventHandler();\n\n    this._formattedValue = text;\n\n    if (!this._focusOutOccurs) {\n      this._caret(newCaret);\n    }\n  },\n  _useMaskBehavior: function _useMaskBehavior() {\n    return !!this.option(\"format\") && this.option(\"useMaskBehavior\");\n  },\n  _renderInputType: function _renderInputType() {\n    var isNumberType = \"number\" === this.option(\"mode\");\n    var isDesktop = \"desktop\" === devices.real().deviceType;\n\n    if (this._useMaskBehavior() && isNumberType) {\n      this._setInputType(isDesktop || this._isSupportInputMode() ? \"text\" : \"tel\");\n    } else {\n      this.callBase();\n    }\n  },\n  _isChar: function _isChar(str) {\n    return \"string\" === typeof str && 1 === str.length;\n  },\n  _moveCaret: function _moveCaret(offset) {\n    if (!offset) {\n      return;\n    }\n\n    var newCaret = maskCaret.getCaretWithOffset(this._caret(), offset);\n    var adjustedCaret = maskCaret.getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());\n\n    this._caret(adjustedCaret);\n  },\n  _shouldHandleKey: function _shouldHandleKey(e) {\n    var keyName = eventUtils.normalizeKeyName(e);\n    var isSpecialChar = e.ctrlKey || e.shiftKey || e.altKey || !this._isChar(keyName);\n    var isMinusKey = keyName === MINUS_KEY;\n\n    var useMaskBehavior = this._useMaskBehavior();\n\n    return useMaskBehavior && !isSpecialChar && !isMinusKey;\n  },\n  _renderInput: function _renderInput() {\n    this.callBase();\n\n    this._renderFormatter();\n  },\n  _renderFormatter: function _renderFormatter() {\n    this._clearCache();\n\n    this._detachFormatterEvents();\n\n    if (this._useMaskBehavior()) {\n      this._attachFormatterEvents();\n    }\n  },\n  _detachFormatterEvents: function _detachFormatterEvents() {\n    eventsEngine.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE);\n  },\n  _isInputFromPaste: function _isInputFromPaste(e) {\n    var inputType = e.originalEvent && e.originalEvent.inputType;\n\n    if (typeUtils.isDefined(inputType)) {\n      return \"insertFromPaste\" === inputType;\n    } else {\n      return this._isValuePasted;\n    }\n  },\n  _attachFormatterEvents: function _attachFormatterEvents() {\n    var $input = this._input();\n\n    eventsEngine.on($input, eventUtils.addNamespace(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), function (e) {\n      this._formatValue(e);\n\n      this._isValuePasted = false;\n    }.bind(this));\n\n    if (browser.msie && browser.version < 12) {\n      eventsEngine.on($input, eventUtils.addNamespace(\"paste\", NUMBER_FORMATTER_NAMESPACE), function () {\n        this._isValuePasted = true;\n      }.bind(this));\n    }\n\n    eventsEngine.on($input, eventUtils.addNamespace(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function () {\n      if (!this._caretTimeout) {\n        this._caretTimeout = setTimeout(function () {\n          this._caret(maskCaret.getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()));\n        }.bind(this), CARET_TIMEOUT_DURATION);\n      }\n    }.bind(this));\n    eventsEngine.on($input, \"dxdblclick\", function () {\n      this.clearCaretTimeout();\n    }.bind(this));\n  },\n  clearCaretTimeout: function clearCaretTimeout() {\n    clearTimeout(this._caretTimeout);\n    this._caretTimeout = null;\n  },\n  _forceRefreshInputValue: function _forceRefreshInputValue() {\n    if (!this._useMaskBehavior()) {\n      return this.callBase();\n    }\n  },\n  _isNonStubAfter: function _isNonStubAfter(index, text) {\n    text = (text || this._getInputVal()).slice(index);\n    return text && !this._isStub(text, true);\n  },\n  _isStub: function _isStub(str, isString) {\n    var escapedDecimalSeparator = escapeRegExp(number.getDecimalSeparator());\n    var regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\";\n    var stubRegExp = new RegExp(regExpString, \"g\");\n    return stubRegExp.test(str) && (isString || this._isChar(str));\n  },\n  _parseValue: function _parseValue(text) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(text);\n    }\n\n    return this._parsedValue;\n  },\n  _getPrecisionLimits: function _getPrecisionLimits(text) {\n    var currentFormat = this._getFormatForSign(text);\n\n    var floatPart = (currentFormat.split(\".\")[1] || \"\").replace(/[^#0]/g, \"\");\n    var minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length;\n    var maxPrecision = floatPart.length;\n    return {\n      min: minPrecision,\n      max: maxPrecision\n    };\n  },\n  _revertSign: function _revertSign(e) {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var caret = this._caret();\n\n    if (caret.start !== caret.end) {\n      if (eventUtils.normalizeKeyName(e) === MINUS_KEY) {\n        this._applyRevertedSign(e, caret, true);\n\n        return;\n      } else {\n        this._caret(maskCaret.getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()));\n      }\n    }\n\n    this._applyRevertedSign(e, caret);\n  },\n  _applyRevertedSign: function _applyRevertedSign(e, caret, preserveSelectedText) {\n    var newValue = -1 * ensureDefined(this._parsedValue, null);\n\n    if (this._isValueInRange(newValue)) {\n      this._parsedValue = newValue;\n\n      if (preserveSelectedText) {\n        var format = this._getFormatPattern();\n\n        var previousText = this._getInputVal();\n\n        this._setTextByParsedValue();\n\n        e.preventDefault();\n\n        var currentText = this._getInputVal();\n\n        var offset = maskCaret.getCaretOffset(previousText, currentText, format);\n        caret = maskCaret.getCaretWithOffset(caret, offset);\n        var caretInBoundaries = maskCaret.getCaretInBoundaries(caret, currentText, format);\n\n        if (browser.msie) {\n          clearTimeout(this._caretTimeout);\n          this._caretTimeout = setTimeout(this._caret.bind(this, caretInBoundaries));\n        } else {\n          this._caret(caretInBoundaries);\n        }\n      }\n\n      if (e.key === NUMPUD_MINUS_KEY_IE) {\n        eventsEngine.trigger(this._input(), INPUT_EVENT);\n      }\n    }\n  },\n  _removeMinusFromText: function _removeMinusFromText(text, caret) {\n    var isMinusPressed = this._lastKeyName === MINUS_KEY && text.charAt(caret.start - 1) === MINUS;\n    return isMinusPressed ? this._replaceSelectedText(text, {\n      start: caret.start - 1,\n      end: caret.start\n    }, \"\") : text;\n  },\n  _setTextByParsedValue: function _setTextByParsedValue() {\n    var format = this._getFormatPattern();\n\n    var parsed = this._parseValue();\n\n    var formatted = this._format(parsed, format) || \"\";\n\n    this._setInputText(formatted);\n  },\n  _formatValue: function _formatValue(e) {\n    var normalizedText = this._getInputVal();\n\n    var caret = this._caret();\n\n    var textWithoutMinus = this._removeMinusFromText(normalizedText, caret);\n\n    var wasMinusRemoved = textWithoutMinus !== normalizedText;\n    normalizedText = textWithoutMinus;\n\n    if (!this._isInputFromPaste(e) && this._isValueIncomplete(textWithoutMinus)) {\n      this._formattedValue = normalizedText;\n\n      if (wasMinusRemoved) {\n        this._setTextByParsedValue();\n      }\n\n      return;\n    }\n\n    var textWasChanged = number.convertDigits(this._formattedValue, true) !== normalizedText;\n\n    if (textWasChanged) {\n      var value = this._tryParse(normalizedText, caret, \"\");\n\n      if (typeUtils.isDefined(value)) {\n        this._parsedValue = value;\n      }\n    }\n\n    this._setTextByParsedValue();\n  },\n  _renderDisplayText: function _renderDisplayText() {\n    if (this._useMaskBehavior()) {\n      this._toggleEmptinessEventHandler();\n    } else {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _renderValue: function _renderValue() {\n    if (this._useMaskBehavior()) {\n      this._parsedValue = this.option(\"value\");\n\n      this._setTextByParsedValue();\n    }\n\n    return this.callBase();\n  },\n  _adjustParsedValue: function _adjustParsedValue() {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var clearedText = this._removeStubs(this._getInputVal());\n\n    var parsedValue = clearedText ? this._parseValue() : null;\n\n    if (!isNumeric(parsedValue)) {\n      this._parsedValue = parsedValue;\n      return;\n    }\n\n    this._parsedValue = fitIntoRange(parsedValue, this.option(\"min\"), this.option(\"max\"));\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(e);\n    }\n\n    var caret = this._caret();\n\n    this._saveValueChangeEvent(e);\n\n    this._lastKey = null;\n    this._lastKeyName = null;\n\n    this._adjustParsedValue();\n\n    this.option(\"value\", this._parsedValue);\n\n    if (caret) {\n      this._caret(caret);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"format\":\n      case \"useMaskBehavior\":\n        this._renderFormatter();\n\n        this._renderValue();\n\n        break;\n\n      case \"min\":\n      case \"max\":\n        this._adjustParsedValue();\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _clearCache: function _clearCache() {\n    delete this._formattedValue;\n    delete this._lastKey;\n    delete this._lastKeyName;\n    delete this._parsedValue;\n    delete this._focusOutOccurs;\n    clearTimeout(this._caretTimeout);\n    delete this._caretTimeout;\n  },\n  _clean: function _clean() {\n    this._clearCache();\n\n    this.callBase();\n  }\n});\nmodule.exports = NumberBoxMask;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/ui/number_box/number_box.mask.js"],"names":["eventsEngine","require","extend","isNumeric","browser","devices","fitIntoRange","inRange","escapeRegExp","number","maskCaret","getLDMLFormat","getFormat","NumberBoxBase","eventUtils","typeUtils","NUMBER_FORMATTER_NAMESPACE","MOVE_FORWARD","MOVE_BACKWARD","MINUS","MINUS_KEY","NUMPUD_MINUS_KEY_IE","INPUT_EVENT","CARET_TIMEOUT_DURATION","msie","ensureDefined","value","defaultValue","NumberBoxMask","inherit","_getDefaultOptions","callBase","useMaskBehavior","format","_isDeleteKey","key","_supportedKeys","_useMaskBehavior","that","minus","_revertSign","bind","del","_removeHandler","backspace","leftArrow","_arrowHandler","rightArrow","home","_moveCaretToBoundaryEventHandler","enter","_updateFormattedValue","end","_focusInHandler","e","_preventNestedFocusEvent","clearCaretTimeout","_caretTimeout","setTimeout","caret","_caret","start","text","_getInputVal","decimalSeparator","getDecimalSeparator","decimalSeparatorIndex","indexOf","_focusOutHandler","shouldHandleEvent","_focusOutOccurs","_hasValueBeenChanged","inputValue","_getFormatPattern","option","formatted","_format","_parsedValue","_tryParse","_adjustParsedValue","_setTextByParsedValue","trigger","_input","step","nextCaret","getCaretWithOffset","isCaretInBoundaries","preventDefault","getCaretInBoundaries","_moveCaretToBoundary","direction","boundaries","getCaretBoundaries","newCaret","shiftKey","_shouldMoveCaret","isDecimalSeparatorNext","charAt","isZeroNext","moveToFloat","_lastKey","zeroToZeroReplace","convertDigits","val","_keyboardHandler","getChar","_lastKeyName","normalizeKeyName","_shouldHandleKey","originalEvent","normalizedText","enteredChar","newValue","_moveCaret","_keyPressHandler","isDeleteKey","isBackspaceKey","caretPosition","canDelete","length","char","slice","_isStub","_isNonStubAfter","editedText","_replaceSelectedText","noDigits","search","_isValueInRange","valueAfterRemoving","_isPercentFormat","noEscapedFormat","replace","_parse","formatOption","isCustomParser","isFunction","parser","parse","formatPointIndex","textPointIndex","formatIntegerPartLength","textIntegerPartLength","substr","isCustomFormatter","formatter","isLDMLPattern","_getFormatForSign","signParts","split","sign","getSign","_removeStubs","excludeComma","thousandsSeparator","getThousandsSeparator","stubs","_getStubs","result","prefixStubs","postfixRegex","RegExp","decoratorsRegex","regExpResult","exec","pattern","trim","map","stub","_truncateToPrecision","maxPrecision","isDefined","strValue","toString","parsedValue","parseFloat","isNaN","selection","isTextSelected","_getParsedValue","_getPrecisionLimits","max","isValueChanged","isDecimalPointRestricted","isUselessCharRestricted","_isValueIncomplete","textWithoutStubs","parsedValueWithSign","point","pointIndex","isCaretOnFloat","textParts","floatLength","precision","isPrecisionInRange","min","endsWithZero","_setInputText","getCaretAfterFormat","_toggleEmptinessEventHandler","_formattedValue","_renderInputType","isNumberType","isDesktop","real","deviceType","_setInputType","_isSupportInputMode","_isChar","str","offset","adjustedCaret","keyName","isSpecialChar","ctrlKey","altKey","isMinusKey","_renderInput","_renderFormatter","_clearCache","_detachFormatterEvents","_attachFormatterEvents","off","_isInputFromPaste","inputType","_isValuePasted","$input","on","addNamespace","_formatValue","version","clearTimeout","_forceRefreshInputValue","index","isString","escapedDecimalSeparator","regExpString","stubRegExp","test","_parseValue","currentFormat","floatPart","minPrecision","_applyRevertedSign","preserveSelectedText","previousText","currentText","getCaretOffset","caretInBoundaries","_removeMinusFromText","isMinusPressed","parsed","textWithoutMinus","wasMinusRemoved","textWasChanged","_renderDisplayText","apply","arguments","_renderValue","clearedText","_valueChangeEventHandler","_saveValueChangeEvent","_optionChanged","args","name","_clean","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/number_box/number_box.mask.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar eventsEngine = require(\"../../events/core/events_engine\");\r\nvar extend = require(\"../../core/utils/extend\").extend;\r\nvar isNumeric = require(\"../../core/utils/type\").isNumeric;\r\nvar browser = require(\"../../core/utils/browser\");\r\nvar devices = require(\"../../core/devices\");\r\nvar fitIntoRange = require(\"../../core/utils/math\").fitIntoRange;\r\nvar inRange = require(\"../../core/utils/math\").inRange;\r\nvar escapeRegExp = require(\"../../core/utils/common\").escapeRegExp;\r\nvar number = require(\"../../localization/number\");\r\nvar maskCaret = require(\"./number_box.caret\");\r\nvar getLDMLFormat = require(\"../../localization/ldml/number\").getFormat;\r\nvar NumberBoxBase = require(\"./number_box.base\");\r\nvar eventUtils = require(\"../../events/utils\");\r\nvar typeUtils = require(\"../../core/utils/type\");\r\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\";\r\nvar MOVE_FORWARD = 1;\r\nvar MOVE_BACKWARD = -1;\r\nvar MINUS = \"-\";\r\nvar MINUS_KEY = \"minus\";\r\nvar NUMPUD_MINUS_KEY_IE = \"Subtract\";\r\nvar INPUT_EVENT = \"input\";\r\nvar CARET_TIMEOUT_DURATION = browser.msie ? 300 : 0;\r\nvar ensureDefined = function(value, defaultValue) {\r\n    return void 0 === value ? defaultValue : value\r\n};\r\nvar NumberBoxMask = NumberBoxBase.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            useMaskBehavior: true,\r\n            format: null\r\n        })\r\n    },\r\n    _isDeleteKey: function(key) {\r\n        return \"del\" === key\r\n    },\r\n    _supportedKeys: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n        var that = this;\r\n        return extend(this.callBase(), {\r\n            minus: that._revertSign.bind(that),\r\n            del: that._removeHandler.bind(that),\r\n            backspace: that._removeHandler.bind(that),\r\n            leftArrow: that._arrowHandler.bind(that, MOVE_BACKWARD),\r\n            rightArrow: that._arrowHandler.bind(that, MOVE_FORWARD),\r\n            home: that._moveCaretToBoundaryEventHandler.bind(that, MOVE_FORWARD),\r\n            enter: that._updateFormattedValue.bind(that),\r\n            end: that._moveCaretToBoundaryEventHandler.bind(that, MOVE_BACKWARD)\r\n        })\r\n    },\r\n    _focusInHandler: function(e) {\r\n        if (!this._preventNestedFocusEvent(e)) {\r\n            this.clearCaretTimeout();\r\n            this._caretTimeout = setTimeout(function() {\r\n                this._caretTimeout = null;\r\n                var caret = this._caret();\r\n                if (caret.start === caret.end && this._useMaskBehavior()) {\r\n                    var text = this._getInputVal();\r\n                    var decimalSeparator = number.getDecimalSeparator();\r\n                    var decimalSeparatorIndex = text.indexOf(decimalSeparator);\r\n                    if (decimalSeparatorIndex >= 0) {\r\n                        this._caret({\r\n                            start: decimalSeparatorIndex,\r\n                            end: decimalSeparatorIndex\r\n                        })\r\n                    } else {\r\n                        this._moveCaretToBoundaryEventHandler(MOVE_BACKWARD, e)\r\n                    }\r\n                }\r\n            }.bind(this), CARET_TIMEOUT_DURATION)\r\n        }\r\n        this.callBase(e)\r\n    },\r\n    _focusOutHandler: function(e) {\r\n        var shouldHandleEvent = !this._preventNestedFocusEvent(e);\r\n        if (shouldHandleEvent) {\r\n            this._focusOutOccurs = true;\r\n            if (this._useMaskBehavior()) {\r\n                this._updateFormattedValue()\r\n            }\r\n        }\r\n        this.callBase(e);\r\n        if (shouldHandleEvent) {\r\n            this._focusOutOccurs = false\r\n        }\r\n    },\r\n    _hasValueBeenChanged: function(inputValue) {\r\n        var format = this._getFormatPattern();\r\n        var value = this.option(\"value\");\r\n        var formatted = this._format(value, format) || \"\";\r\n        return formatted !== inputValue\r\n    },\r\n    _updateFormattedValue: function() {\r\n        var inputValue = this._getInputVal();\r\n        if (this._hasValueBeenChanged(inputValue)) {\r\n            this._parsedValue = this._tryParse(inputValue, this._caret());\r\n            this._adjustParsedValue();\r\n            this._setTextByParsedValue();\r\n            if (this._parsedValue !== this.option(\"value\")) {\r\n                eventsEngine.trigger(this._input(), \"change\")\r\n            }\r\n        }\r\n    },\r\n    _arrowHandler: function(step, e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var text = this._getInputVal();\r\n        var format = this._getFormatPattern();\r\n        var nextCaret = maskCaret.getCaretWithOffset(this._caret(), step);\r\n        if (!maskCaret.isCaretInBoundaries(nextCaret, text, format)) {\r\n            nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\r\n            e.preventDefault();\r\n            this._caret(maskCaret.getCaretInBoundaries(nextCaret, text, format))\r\n        }\r\n    },\r\n    _moveCaretToBoundary: function(direction) {\r\n        var boundaries = maskCaret.getCaretBoundaries(this._getInputVal(), this._getFormatPattern());\r\n        var newCaret = maskCaret.getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\r\n        this._caret(newCaret)\r\n    },\r\n    _moveCaretToBoundaryEventHandler: function(direction, e) {\r\n        if (!this._useMaskBehavior() || e && e.shiftKey) {\r\n            return\r\n        }\r\n        this._moveCaretToBoundary(direction);\r\n        e && e.preventDefault()\r\n    },\r\n    _shouldMoveCaret: function(text, caret) {\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        var isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator;\r\n        var isZeroNext = \"0\" === text.charAt(caret.end);\r\n        var moveToFloat = (this._lastKey === decimalSeparator || \".\" === this._lastKey) && isDecimalSeparatorNext;\r\n        var zeroToZeroReplace = \"0\" === this._lastKey && isZeroNext;\r\n        return moveToFloat || zeroToZeroReplace\r\n    },\r\n    _getInputVal: function() {\r\n        return number.convertDigits(this._input().val(), true)\r\n    },\r\n    _keyboardHandler: function(e) {\r\n        this.clearCaretTimeout();\r\n        this._lastKey = number.convertDigits(eventUtils.getChar(e), true);\r\n        this._lastKeyName = eventUtils.normalizeKeyName(e);\r\n        if (!this._shouldHandleKey(e.originalEvent)) {\r\n            return this.callBase(e)\r\n        }\r\n        var normalizedText = this._getInputVal();\r\n        var caret = this._caret();\r\n        var enteredChar = this._lastKeyName === MINUS_KEY ? \"\" : this._lastKey;\r\n        var newValue = this._tryParse(normalizedText, caret, enteredChar);\r\n        if (this._shouldMoveCaret(normalizedText, caret)) {\r\n            this._moveCaret(1);\r\n            e.originalEvent.preventDefault()\r\n        }\r\n        if (void 0 === newValue) {\r\n            if (this._lastKeyName !== MINUS_KEY) {\r\n                e.originalEvent.preventDefault()\r\n            }\r\n        } else {\r\n            this._parsedValue = newValue\r\n        }\r\n        return this.callBase(e)\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            this.callBase(e)\r\n        }\r\n    },\r\n    _removeHandler: function(e) {\r\n        var caret = this._caret();\r\n        var text = this._getInputVal();\r\n        var start = caret.start;\r\n        var end = caret.end;\r\n        this._lastKey = eventUtils.getChar(e);\r\n        this._lastKeyName = eventUtils.normalizeKeyName(e);\r\n        var isDeleteKey = this._isDeleteKey(this._lastKeyName);\r\n        var isBackspaceKey = !isDeleteKey;\r\n        if (start === end) {\r\n            var caretPosition = start;\r\n            var canDelete = isBackspaceKey && caretPosition > 0 || isDeleteKey && caretPosition < text.length;\r\n            if (canDelete) {\r\n                isDeleteKey && end++;\r\n                isBackspaceKey && start--\r\n            } else {\r\n                e.preventDefault();\r\n                return\r\n            }\r\n        }\r\n        var char = text.slice(start, end);\r\n        if (this._isStub(char)) {\r\n            this._moveCaret(isDeleteKey ? 1 : -1);\r\n            if (this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0)) {\r\n                this._revertSign(e);\r\n                this._setTextByParsedValue()\r\n            }\r\n            e.preventDefault();\r\n            return\r\n        }\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        if (char === decimalSeparator) {\r\n            var decimalSeparatorIndex = text.indexOf(decimalSeparator);\r\n            if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\r\n                this._moveCaret(isDeleteKey ? 1 : -1);\r\n                e.preventDefault()\r\n            }\r\n            return\r\n        }\r\n        if (end - start < text.length) {\r\n            var editedText = this._replaceSelectedText(text, {\r\n                start: start,\r\n                end: end\r\n            }, \"\");\r\n            var noDigits = editedText.search(/[0-9]/) < 0;\r\n            if (noDigits && this._isValueInRange(0)) {\r\n                this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0) ? -0 : 0;\r\n                return\r\n            }\r\n        }\r\n        var valueAfterRemoving = this._tryParse(text, {\r\n            start: start,\r\n            end: end\r\n        }, \"\");\r\n        if (void 0 === valueAfterRemoving) {\r\n            e.preventDefault()\r\n        } else {\r\n            this._parsedValue = valueAfterRemoving\r\n        }\r\n    },\r\n    _isPercentFormat: function() {\r\n        var format = this._getFormatPattern();\r\n        var noEscapedFormat = format.replace(/'[^']+'/g, \"\");\r\n        return noEscapedFormat.indexOf(\"%\") !== -1\r\n    },\r\n    _parse: function(text, format) {\r\n        var formatOption = this.option(\"format\");\r\n        var isCustomParser = typeUtils.isFunction(formatOption.parser);\r\n        var parser = isCustomParser ? formatOption.parser : number.parse;\r\n        var formatPointIndex = format.indexOf(\".\");\r\n        var textPointIndex = text.indexOf(number.getDecimalSeparator());\r\n        var formatIntegerPartLength = formatPointIndex !== -1 ? formatPointIndex : format.length;\r\n        var textIntegerPartLength = textPointIndex !== -1 ? textPointIndex : text.length;\r\n        if (textIntegerPartLength > formatIntegerPartLength && format.indexOf(\"#\") === -1) {\r\n            text = text.substr(textIntegerPartLength - formatIntegerPartLength)\r\n        }\r\n        return parser(text, format)\r\n    },\r\n    _format: function(value, format) {\r\n        var formatOption = this.option(\"format\");\r\n        var isCustomFormatter = typeUtils.isFunction(formatOption.formatter);\r\n        var formatter = isCustomFormatter ? formatOption.formatter : number.format;\r\n        return formatter(value, format)\r\n    },\r\n    _getFormatPattern: function() {\r\n        var format = this.option(\"format\");\r\n        var isLDMLPattern = \"string\" === typeof format && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\r\n        if (isLDMLPattern) {\r\n            return format\r\n        } else {\r\n            return getLDMLFormat(function(value) {\r\n                var text = this._format(value, format);\r\n                return number.convertDigits(text, true)\r\n            }.bind(this))\r\n        }\r\n    },\r\n    _getFormatForSign: function(text) {\r\n        var format = this._getFormatPattern();\r\n        var signParts = format.split(\";\");\r\n        var sign = number.getSign(text, format);\r\n        signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n        return sign < 0 ? signParts[1] : signParts[0]\r\n    },\r\n    _removeStubs: function(text, excludeComma) {\r\n        var format = this._getFormatForSign(text);\r\n        var thousandsSeparator = number.getThousandsSeparator();\r\n        var stubs = this._getStubs(format);\r\n        var result = text;\r\n        if (stubs.length) {\r\n            var prefixStubs = stubs[0];\r\n            var postfixRegex = new RegExp(\"(\" + escapeRegExp(stubs[1] || \"\") + \")$\", \"g\");\r\n            var decoratorsRegex = new RegExp(\"[-\" + escapeRegExp(excludeComma ? \"\" : thousandsSeparator) + \"]\", \"g\");\r\n            result = result.replace(prefixStubs, \"\").replace(postfixRegex, \"\").replace(decoratorsRegex, \"\")\r\n        }\r\n        return result\r\n    },\r\n    _getStubs: function(format) {\r\n        var regExpResult = /[^']([#0.,]+)/g.exec(format);\r\n        var pattern = regExpResult && regExpResult[0].trim();\r\n        return format.split(pattern).map(function(stub) {\r\n            return stub.replace(/'/g, \"\")\r\n        })\r\n    },\r\n    _truncateToPrecision: function(value, maxPrecision) {\r\n        if (typeUtils.isDefined(value)) {\r\n            var strValue = value.toString();\r\n            var decimalSeparatorIndex = strValue.indexOf(\".\");\r\n            if (strValue && decimalSeparatorIndex > -1) {\r\n                var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\r\n                return isNaN(parsedValue) ? value : parsedValue\r\n            }\r\n        }\r\n        return value\r\n    },\r\n    _tryParse: function(text, selection, char) {\r\n        var editedText = this._replaceSelectedText(text, selection, char);\r\n        var format = this._getFormatPattern();\r\n        var isTextSelected = selection.start !== selection.end;\r\n        var parsedValue = this._getParsedValue(editedText, format);\r\n        var maxPrecision = this._getPrecisionLimits(format, editedText).max;\r\n        var isValueChanged = parsedValue !== this._parsedValue;\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision;\r\n        var isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\r\n        if (isDecimalPointRestricted || isUselessCharRestricted) {\r\n            return\r\n        }\r\n        if (\"\" === this._removeStubs(editedText)) {\r\n            parsedValue = 0 * this._parsedValue\r\n        }\r\n        if (isNaN(parsedValue)) {\r\n            return\r\n        }\r\n        var value = null === parsedValue ? this._parsedValue : parsedValue;\r\n        parsedValue = this._truncateToPrecision(value, maxPrecision);\r\n        return this._isPercentFormat() ? parsedValue && parsedValue / 100 : parsedValue\r\n    },\r\n    _getParsedValue: function(text, format) {\r\n        var sign = number.getSign(text, format);\r\n        var textWithoutStubs = this._removeStubs(text, true);\r\n        var parsedValue = this._parse(textWithoutStubs, format);\r\n        var parsedValueWithSign = parsedValue ? sign * parsedValue : parsedValue;\r\n        return parsedValueWithSign\r\n    },\r\n    _isValueIncomplete: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        var caret = this._caret();\r\n        var point = number.getDecimalSeparator();\r\n        var pointIndex = text.indexOf(point);\r\n        var isCaretOnFloat = pointIndex >= 0 && pointIndex < caret.start;\r\n        var textParts = this._removeStubs(text, true).split(point);\r\n        if (!isCaretOnFloat || 2 !== textParts.length) {\r\n            return false\r\n        }\r\n        var floatLength = textParts[1].length;\r\n        var precision = this._getPrecisionLimits(this._getFormatPattern(), text);\r\n        var isPrecisionInRange = inRange(floatLength, precision.min, precision.max);\r\n        var endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\r\n        return isPrecisionInRange && (endsWithZero || !floatLength)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        var min = ensureDefined(this.option(\"min\"), -(1 / 0));\r\n        var max = ensureDefined(this.option(\"max\"), 1 / 0);\r\n        return inRange(value, min, max)\r\n    },\r\n    _setInputText: function(text) {\r\n        var normalizedText = number.convertDigits(text, true);\r\n        var newCaret = maskCaret.getCaretAfterFormat(this._getInputVal(), normalizedText, this._caret(), this._getFormatPattern());\r\n        this._input().val(text);\r\n        this._toggleEmptinessEventHandler();\r\n        this._formattedValue = text;\r\n        if (!this._focusOutOccurs) {\r\n            this._caret(newCaret)\r\n        }\r\n    },\r\n    _useMaskBehavior: function() {\r\n        return !!this.option(\"format\") && this.option(\"useMaskBehavior\")\r\n    },\r\n    _renderInputType: function() {\r\n        var isNumberType = \"number\" === this.option(\"mode\");\r\n        var isDesktop = \"desktop\" === devices.real().deviceType;\r\n        if (this._useMaskBehavior() && isNumberType) {\r\n            this._setInputType(isDesktop || this._isSupportInputMode() ? \"text\" : \"tel\")\r\n        } else {\r\n            this.callBase()\r\n        }\r\n    },\r\n    _isChar: function(str) {\r\n        return \"string\" === typeof str && 1 === str.length\r\n    },\r\n    _moveCaret: function(offset) {\r\n        if (!offset) {\r\n            return\r\n        }\r\n        var newCaret = maskCaret.getCaretWithOffset(this._caret(), offset);\r\n        var adjustedCaret = maskCaret.getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());\r\n        this._caret(adjustedCaret)\r\n    },\r\n    _shouldHandleKey: function(e) {\r\n        var keyName = eventUtils.normalizeKeyName(e);\r\n        var isSpecialChar = e.ctrlKey || e.shiftKey || e.altKey || !this._isChar(keyName);\r\n        var isMinusKey = keyName === MINUS_KEY;\r\n        var useMaskBehavior = this._useMaskBehavior();\r\n        return useMaskBehavior && !isSpecialChar && !isMinusKey\r\n    },\r\n    _renderInput: function() {\r\n        this.callBase();\r\n        this._renderFormatter()\r\n    },\r\n    _renderFormatter: function() {\r\n        this._clearCache();\r\n        this._detachFormatterEvents();\r\n        if (this._useMaskBehavior()) {\r\n            this._attachFormatterEvents()\r\n        }\r\n    },\r\n    _detachFormatterEvents: function() {\r\n        eventsEngine.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE)\r\n    },\r\n    _isInputFromPaste: function(e) {\r\n        var inputType = e.originalEvent && e.originalEvent.inputType;\r\n        if (typeUtils.isDefined(inputType)) {\r\n            return \"insertFromPaste\" === inputType\r\n        } else {\r\n            return this._isValuePasted\r\n        }\r\n    },\r\n    _attachFormatterEvents: function() {\r\n        var $input = this._input();\r\n        eventsEngine.on($input, eventUtils.addNamespace(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), function(e) {\r\n            this._formatValue(e);\r\n            this._isValuePasted = false\r\n        }.bind(this));\r\n        if (browser.msie && browser.version < 12) {\r\n            eventsEngine.on($input, eventUtils.addNamespace(\"paste\", NUMBER_FORMATTER_NAMESPACE), function() {\r\n                this._isValuePasted = true\r\n            }.bind(this))\r\n        }\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function() {\r\n            if (!this._caretTimeout) {\r\n                this._caretTimeout = setTimeout(function() {\r\n                    this._caret(maskCaret.getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()))\r\n                }.bind(this), CARET_TIMEOUT_DURATION)\r\n            }\r\n        }.bind(this));\r\n        eventsEngine.on($input, \"dxdblclick\", function() {\r\n            this.clearCaretTimeout()\r\n        }.bind(this))\r\n    },\r\n    clearCaretTimeout: function() {\r\n        clearTimeout(this._caretTimeout);\r\n        this._caretTimeout = null\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n    },\r\n    _isNonStubAfter: function(index, text) {\r\n        text = (text || this._getInputVal()).slice(index);\r\n        return text && !this._isStub(text, true)\r\n    },\r\n    _isStub: function(str, isString) {\r\n        var escapedDecimalSeparator = escapeRegExp(number.getDecimalSeparator());\r\n        var regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\";\r\n        var stubRegExp = new RegExp(regExpString, \"g\");\r\n        return stubRegExp.test(str) && (isString || this._isChar(str))\r\n    },\r\n    _parseValue: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        return this._parsedValue\r\n    },\r\n    _getPrecisionLimits: function(text) {\r\n        var currentFormat = this._getFormatForSign(text);\r\n        var floatPart = (currentFormat.split(\".\")[1] || \"\").replace(/[^#0]/g, \"\");\r\n        var minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length;\r\n        var maxPrecision = floatPart.length;\r\n        return {\r\n            min: minPrecision,\r\n            max: maxPrecision\r\n        }\r\n    },\r\n    _revertSign: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var caret = this._caret();\r\n        if (caret.start !== caret.end) {\r\n            if (eventUtils.normalizeKeyName(e) === MINUS_KEY) {\r\n                this._applyRevertedSign(e, caret, true);\r\n                return\r\n            } else {\r\n                this._caret(maskCaret.getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()))\r\n            }\r\n        }\r\n        this._applyRevertedSign(e, caret)\r\n    },\r\n    _applyRevertedSign: function(e, caret, preserveSelectedText) {\r\n        var newValue = -1 * ensureDefined(this._parsedValue, null);\r\n        if (this._isValueInRange(newValue)) {\r\n            this._parsedValue = newValue;\r\n            if (preserveSelectedText) {\r\n                var format = this._getFormatPattern();\r\n                var previousText = this._getInputVal();\r\n                this._setTextByParsedValue();\r\n                e.preventDefault();\r\n                var currentText = this._getInputVal();\r\n                var offset = maskCaret.getCaretOffset(previousText, currentText, format);\r\n                caret = maskCaret.getCaretWithOffset(caret, offset);\r\n                var caretInBoundaries = maskCaret.getCaretInBoundaries(caret, currentText, format);\r\n                if (browser.msie) {\r\n                    clearTimeout(this._caretTimeout);\r\n                    this._caretTimeout = setTimeout(this._caret.bind(this, caretInBoundaries))\r\n                } else {\r\n                    this._caret(caretInBoundaries)\r\n                }\r\n            }\r\n            if (e.key === NUMPUD_MINUS_KEY_IE) {\r\n                eventsEngine.trigger(this._input(), INPUT_EVENT)\r\n            }\r\n        }\r\n    },\r\n    _removeMinusFromText: function(text, caret) {\r\n        var isMinusPressed = this._lastKeyName === MINUS_KEY && text.charAt(caret.start - 1) === MINUS;\r\n        return isMinusPressed ? this._replaceSelectedText(text, {\r\n            start: caret.start - 1,\r\n            end: caret.start\r\n        }, \"\") : text\r\n    },\r\n    _setTextByParsedValue: function() {\r\n        var format = this._getFormatPattern();\r\n        var parsed = this._parseValue();\r\n        var formatted = this._format(parsed, format) || \"\";\r\n        this._setInputText(formatted)\r\n    },\r\n    _formatValue: function(e) {\r\n        var normalizedText = this._getInputVal();\r\n        var caret = this._caret();\r\n        var textWithoutMinus = this._removeMinusFromText(normalizedText, caret);\r\n        var wasMinusRemoved = textWithoutMinus !== normalizedText;\r\n        normalizedText = textWithoutMinus;\r\n        if (!this._isInputFromPaste(e) && this._isValueIncomplete(textWithoutMinus)) {\r\n            this._formattedValue = normalizedText;\r\n            if (wasMinusRemoved) {\r\n                this._setTextByParsedValue()\r\n            }\r\n            return\r\n        }\r\n        var textWasChanged = number.convertDigits(this._formattedValue, true) !== normalizedText;\r\n        if (textWasChanged) {\r\n            var value = this._tryParse(normalizedText, caret, \"\");\r\n            if (typeUtils.isDefined(value)) {\r\n                this._parsedValue = value\r\n            }\r\n        }\r\n        this._setTextByParsedValue()\r\n    },\r\n    _renderDisplayText: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._toggleEmptinessEventHandler()\r\n        } else {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._parsedValue = this.option(\"value\");\r\n            this._setTextByParsedValue()\r\n        }\r\n        return this.callBase()\r\n    },\r\n    _adjustParsedValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var clearedText = this._removeStubs(this._getInputVal());\r\n        var parsedValue = clearedText ? this._parseValue() : null;\r\n        if (!isNumeric(parsedValue)) {\r\n            this._parsedValue = parsedValue;\r\n            return\r\n        }\r\n        this._parsedValue = fitIntoRange(parsedValue, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(e)\r\n        }\r\n        var caret = this._caret();\r\n        this._saveValueChangeEvent(e);\r\n        this._lastKey = null;\r\n        this._lastKeyName = null;\r\n        this._adjustParsedValue();\r\n        this.option(\"value\", this._parsedValue);\r\n        if (caret) {\r\n            this._caret(caret)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"format\":\r\n            case \"useMaskBehavior\":\r\n                this._renderFormatter();\r\n                this._renderValue();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._adjustParsedValue();\r\n                this.callBase(args);\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _clearCache: function() {\r\n        delete this._formattedValue;\r\n        delete this._lastKey;\r\n        delete this._lastKeyName;\r\n        delete this._parsedValue;\r\n        delete this._focusOutOccurs;\r\n        clearTimeout(this._caretTimeout);\r\n        delete this._caretTimeout\r\n    },\r\n    _clean: function() {\r\n        this._clearCache();\r\n        this.callBase()\r\n    }\r\n});\r\nmodule.exports = NumberBoxMask;\r\n"]},"metadata":{},"sourceType":"script"}
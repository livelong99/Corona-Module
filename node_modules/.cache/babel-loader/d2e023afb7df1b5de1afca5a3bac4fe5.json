{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/ui.text_editor.mask.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar caret = require(\"./utils.caret\");\n\nvar devices = require(\"../../core/devices\");\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar eventUtils = require(\"../../events/utils\");\n\nvar eventsEngine = require(\"../../events/core/events_engine\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar focused = require(\"../widget/selectors\").focused;\n\nvar isDefined = require(\"../../core/utils/type\").isDefined;\n\nvar messageLocalization = require(\"../../localization/message\");\n\nvar noop = require(\"../../core/utils/common\").noop;\n\nvar stringUtils = require(\"../../core/utils/string\");\n\nvar wheelEvent = require(\"../../events/core/wheel\");\n\nvar MaskRules = require(\"./ui.text_editor.mask.rule\");\n\nvar TextEditorBase = require(\"./ui.text_editor.base\");\n\nvar DefaultMaskStrategy = require(\"./ui.text_editor.mask.strategy.default\").default;\n\nvar AndroidMaskStrategy = require(\"./ui.text_editor.mask.strategy.android\").default;\n\nvar stubCaret = function stubCaret() {\n  return {};\n};\n\nvar EMPTY_CHAR = \" \";\nvar ESCAPED_CHAR = \"\\\\\";\nvar TEXTEDITOR_MASKED_CLASS = \"dx-texteditor-masked\";\nvar FORWARD_DIRECTION = \"forward\";\nvar BACKWARD_DIRECTION = \"backward\";\nvar buildInMaskRules = {\n  0: /[0-9]/,\n  9: /[0-9\\s]/,\n  \"#\": /[-+0-9\\s]/,\n  L: function L(char) {\n    return isLiteralChar(char);\n  },\n  l: function l(char) {\n    return isLiteralChar(char) || isSpaceChar(char);\n  },\n  C: /\\S/,\n  c: /./,\n  A: function A(char) {\n    return isLiteralChar(char) || isNumericChar(char);\n  },\n  a: function a(char) {\n    return isLiteralChar(char) || isNumericChar(char) || isSpaceChar(char);\n  }\n};\n\nvar isNumericChar = function isNumericChar(char) {\n  return /[0-9]/.test(char);\n};\n\nvar isLiteralChar = function isLiteralChar(char) {\n  var code = char.charCodeAt();\n  return 64 < code && code < 91 || 96 < code && code < 123 || code > 127;\n};\n\nvar isSpaceChar = function isSpaceChar(char) {\n  return \" \" === char;\n};\n\nvar TextEditorMask = TextEditorBase.inherit({\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      mask: \"\",\n      maskChar: \"_\",\n      maskRules: {},\n      maskInvalidMessage: messageLocalization.format(\"validation-mask\"),\n      useMaskedValue: false,\n      showMaskMode: \"always\"\n    });\n  },\n  _supportedKeys: function _supportedKeys() {\n    var that = this;\n    var keyHandlerMap = {\n      backspace: that._maskStrategy.getHandler(\"backspace\"),\n      del: that._maskStrategy.getHandler(\"del\"),\n      enter: that._changeHandler\n    };\n    var result = that.callBase();\n    each(keyHandlerMap, function (key, callback) {\n      var parentHandler = result[key];\n\n      result[key] = function (e) {\n        that.option(\"mask\") && callback.call(that, e);\n        parentHandler && parentHandler(e);\n      };\n    });\n    return result;\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    return !this.option(\"mask\") ? this.callBase() : this._$hiddenElement;\n  },\n  _init: function _init() {\n    this.callBase();\n\n    this._initMaskStrategy();\n  },\n  _initMaskStrategy: function _initMaskStrategy() {\n    var device = devices.real();\n    this._maskStrategy = device.android && device.version[0] > 4 ? new AndroidMaskStrategy(this) : new DefaultMaskStrategy(this);\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderHiddenElement();\n\n    this.callBase();\n  },\n  _attachMouseWheelEventHandlers: function _attachMouseWheelEventHandlers() {\n    var hasMouseWheelHandler = this._onMouseWheel !== noop;\n\n    if (!hasMouseWheelHandler) {\n      return;\n    }\n\n    var input = this._input();\n\n    var eventName = eventUtils.addNamespace(wheelEvent.name, this.NAME);\n\n    var mouseWheelAction = this._createAction(function (e) {\n      if (focused(input)) {\n        var dxEvent = e.event;\n\n        this._onMouseWheel(dxEvent);\n\n        dxEvent.preventDefault();\n        dxEvent.stopPropagation();\n      }\n    }.bind(this));\n\n    eventsEngine.off(input, eventName);\n    eventsEngine.on(input, eventName, function (e) {\n      mouseWheelAction({\n        event: e\n      });\n    });\n  },\n  _onMouseWheel: noop,\n  _render: function _render() {\n    this.callBase();\n\n    this._renderMask();\n\n    this._attachMouseWheelEventHandlers();\n  },\n  _renderHiddenElement: function _renderHiddenElement() {\n    if (this.option(\"mask\")) {\n      this._$hiddenElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this._inputWrapper());\n    }\n  },\n  _removeHiddenElement: function _removeHiddenElement() {\n    this._$hiddenElement && this._$hiddenElement.remove();\n  },\n  _renderMask: function _renderMask() {\n    this.$element().removeClass(TEXTEDITOR_MASKED_CLASS);\n    this._maskRulesChain = null;\n\n    this._maskStrategy.detachEvents();\n\n    if (!this.option(\"mask\")) {\n      return;\n    }\n\n    this.$element().addClass(TEXTEDITOR_MASKED_CLASS);\n\n    this._maskStrategy.attachEvents();\n\n    this._parseMask();\n\n    this._renderMaskedValue();\n  },\n  _suppressCaretChanging: function _suppressCaretChanging(callback, args) {\n    var originalCaret = caret;\n    caret = stubCaret;\n\n    try {\n      callback.apply(this, args);\n    } finally {\n      caret = originalCaret;\n    }\n  },\n  _changeHandler: function _changeHandler(e) {\n    var $input = this._input();\n\n    var inputValue = $input.val();\n\n    if (inputValue === this._changedValue) {\n      return;\n    }\n\n    this._changedValue = inputValue;\n    var changeEvent = eventUtils.createEvent(e, {\n      type: \"change\"\n    });\n    eventsEngine.trigger($input, changeEvent);\n  },\n  _parseMask: function _parseMask() {\n    this._maskRules = extend({}, buildInMaskRules, this.option(\"maskRules\"));\n    this._maskRulesChain = this._parseMaskRule(0);\n  },\n  _parseMaskRule: function _parseMaskRule(index) {\n    var mask = this.option(\"mask\");\n\n    if (index >= mask.length) {\n      return new MaskRules.EmptyMaskRule();\n    }\n\n    var currentMaskChar = mask[index];\n    var isEscapedChar = currentMaskChar === ESCAPED_CHAR;\n    var result = isEscapedChar ? new MaskRules.StubMaskRule({\n      maskChar: mask[index + 1]\n    }) : this._getMaskRule(currentMaskChar);\n    result.next(this._parseMaskRule(index + 1 + isEscapedChar));\n    return result;\n  },\n  _getMaskRule: function _getMaskRule(pattern) {\n    var ruleConfig;\n    each(this._maskRules, function (rulePattern, allowedChars) {\n      if (rulePattern === pattern) {\n        ruleConfig = {\n          pattern: rulePattern,\n          allowedChars: allowedChars\n        };\n        return false;\n      }\n    });\n    return isDefined(ruleConfig) ? new MaskRules.MaskRule(extend({\n      maskChar: this.option(\"maskChar\")\n    }, ruleConfig)) : new MaskRules.StubMaskRule({\n      maskChar: pattern\n    });\n  },\n  _renderMaskedValue: function _renderMaskedValue() {\n    if (!this._maskRulesChain) {\n      return;\n    }\n\n    var value = this.option(\"value\") || \"\";\n\n    this._maskRulesChain.clear(this._normalizeChainArguments());\n\n    var chainArgs = {\n      length: value.length\n    };\n    chainArgs[this._isMaskedValueMode() ? \"text\" : \"value\"] = value;\n\n    this._handleChain(chainArgs);\n\n    this._displayMask();\n  },\n  _replaceSelectedText: function _replaceSelectedText(text, selection, char) {\n    if (void 0 === char) {\n      return text;\n    }\n\n    var textBefore = text.slice(0, selection.start);\n    var textAfter = text.slice(selection.end);\n    var edited = textBefore + char + textAfter;\n    return edited;\n  },\n  _isMaskedValueMode: function _isMaskedValueMode() {\n    return this.option(\"useMaskedValue\");\n  },\n  _displayMask: function _displayMask(caret) {\n    caret = caret || this._caret();\n\n    this._renderValue();\n\n    this._caret(caret);\n  },\n  _isValueEmpty: function _isValueEmpty() {\n    return stringUtils.isEmpty(this._value);\n  },\n  _shouldShowMask: function _shouldShowMask() {\n    var showMaskMode = this.option(\"showMaskMode\");\n\n    if (\"onFocus\" === showMaskMode) {\n      return focused(this._input()) || !this._isValueEmpty();\n    }\n\n    return true;\n  },\n  _showMaskPlaceholder: function _showMaskPlaceholder() {\n    if (this._shouldShowMask()) {\n      var text = this._maskRulesChain.text();\n\n      this.option(\"text\", text);\n\n      if (\"onFocus\" === this.option(\"showMaskMode\")) {\n        this._renderDisplayText(text);\n      }\n    }\n  },\n  _renderValue: function _renderValue() {\n    if (this._maskRulesChain) {\n      var text = this._maskRulesChain.text();\n\n      this._showMaskPlaceholder();\n\n      if (this._$hiddenElement) {\n        var value = this._maskRulesChain.value();\n\n        var hiddenElementValue = this._isMaskedValueMode() ? text : value;\n\n        this._$hiddenElement.val(!stringUtils.isEmpty(value) ? hiddenElementValue : \"\");\n      }\n    }\n\n    return this.callBase();\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e) {\n    if (!this._maskRulesChain) {\n      this.callBase.apply(this, arguments);\n      return;\n    }\n\n    this._saveValueChangeEvent(e);\n\n    this.option(\"value\", this._convertToValue().replace(/\\s+$/, \"\"));\n  },\n  _isControlKeyFired: function _isControlKeyFired(e) {\n    return this._isControlKey(eventUtils.normalizeKeyName(e)) || e.ctrlKey || e.metaKey;\n  },\n  _handleChain: function _handleChain(args) {\n    var handledCount = this._maskRulesChain.handle(this._normalizeChainArguments(args));\n\n    this._value = this._maskRulesChain.value();\n    this._textValue = this._maskRulesChain.text();\n    return handledCount;\n  },\n  _normalizeChainArguments: function _normalizeChainArguments(args) {\n    args = args || {};\n    args.index = 0;\n    args.fullText = this._maskRulesChain.text();\n    return args;\n  },\n  _convertToValue: function _convertToValue(text) {\n    if (this._isMaskedValueMode()) {\n      text = this._replaceMaskCharWithEmpty(text || this._textValue || \"\");\n    } else {\n      text = text || this._value || \"\";\n    }\n\n    return text;\n  },\n  _replaceMaskCharWithEmpty: function _replaceMaskCharWithEmpty(text) {\n    return text.replace(new RegExp(this.option(\"maskChar\"), \"g\"), EMPTY_CHAR);\n  },\n  _maskKeyHandler: function _maskKeyHandler(e, keyHandler) {\n    var _this = this;\n\n    if (this.option(\"readOnly\")) {\n      return;\n    }\n\n    this.setForwardDirection();\n    e.preventDefault();\n\n    this._handleSelection();\n\n    var previousText = this._input().val();\n\n    var raiseInputEvent = function raiseInputEvent() {\n      if (previousText !== _this._input().val()) {\n        _this._maskStrategy.runWithoutEventProcessing(function () {\n          return eventsEngine.trigger(_this._input(), \"input\");\n        });\n      }\n    };\n\n    var handled = keyHandler();\n\n    if (handled) {\n      handled.then(raiseInputEvent);\n    } else {\n      this.setForwardDirection();\n\n      this._adjustCaret();\n\n      this._displayMask();\n\n      this._maskRulesChain.reset();\n\n      raiseInputEvent();\n    }\n  },\n  _handleKey: function _handleKey(key, direction) {\n    this._direction(direction || FORWARD_DIRECTION);\n\n    this._adjustCaret(key);\n\n    this._handleKeyChain(key);\n\n    this._moveCaret();\n  },\n  _handleSelection: function _handleSelection() {\n    if (!this._hasSelection()) {\n      return;\n    }\n\n    var caret = this._caret();\n\n    var emptyChars = new Array(caret.end - caret.start + 1).join(EMPTY_CHAR);\n\n    this._handleKeyChain(emptyChars);\n  },\n  _handleKeyChain: function _handleKeyChain(chars) {\n    var caret = this._caret();\n\n    var start = this.isForwardDirection() ? caret.start : caret.start - 1;\n    var end = this.isForwardDirection() ? caret.end : caret.end - 1;\n    var length = start === end ? 1 : end - start;\n\n    this._handleChain({\n      text: chars,\n      start: start,\n      length: length\n    });\n  },\n  _tryMoveCaretBackward: function _tryMoveCaretBackward() {\n    this.setBackwardDirection();\n\n    var currentCaret = this._caret().start;\n\n    this._adjustCaret();\n\n    return !currentCaret || currentCaret !== this._caret().start;\n  },\n  _adjustCaret: function _adjustCaret(char) {\n    var caret = this._maskRulesChain.adjustedCaret(this._caret().start, this.isForwardDirection(), char);\n\n    this._caret({\n      start: caret,\n      end: caret\n    });\n  },\n  _moveCaret: function _moveCaret() {\n    var currentCaret = this._caret().start;\n\n    var maskRuleIndex = currentCaret + (this.isForwardDirection() ? 0 : -1);\n    var caret = this._maskRulesChain.isAccepted(maskRuleIndex) ? currentCaret + (this.isForwardDirection() ? 1 : -1) : currentCaret;\n\n    this._caret({\n      start: caret,\n      end: caret\n    });\n  },\n  _caret: function _caret(position) {\n    var $input = this._input();\n\n    if (!$input.length) {\n      return;\n    }\n\n    if (!arguments.length) {\n      return caret($input);\n    }\n\n    caret($input, position);\n  },\n  _hasSelection: function _hasSelection() {\n    var caret = this._caret();\n\n    return caret.start !== caret.end;\n  },\n  _direction: function _direction(direction) {\n    if (!arguments.length) {\n      return this._typingDirection;\n    }\n\n    this._typingDirection = direction;\n  },\n  setForwardDirection: function setForwardDirection() {\n    this._direction(FORWARD_DIRECTION);\n  },\n  setBackwardDirection: function setBackwardDirection() {\n    this._direction(BACKWARD_DIRECTION);\n  },\n  isForwardDirection: function isForwardDirection() {\n    return this._direction() === FORWARD_DIRECTION;\n  },\n  _clean: function _clean() {\n    this._maskStrategy && this._maskStrategy.clean();\n    this.callBase();\n  },\n  _validateMask: function _validateMask() {\n    if (!this._maskRulesChain) {\n      return;\n    }\n\n    var isValid = stringUtils.isEmpty(this.option(\"value\")) || this._maskRulesChain.isValid(this._normalizeChainArguments());\n\n    this.option({\n      isValid: isValid,\n      validationError: isValid ? null : {\n        editorSpecific: true,\n        message: this.option(\"maskInvalidMessage\")\n      }\n    });\n  },\n  _updateHiddenElement: function _updateHiddenElement() {\n    this._removeHiddenElement();\n\n    if (this.option(\"mask\")) {\n      this._input().removeAttr(\"name\");\n\n      this._renderHiddenElement();\n    }\n\n    this._setSubmitElementName(this.option(\"name\"));\n  },\n  _updateMaskOption: function _updateMaskOption() {\n    this._updateHiddenElement();\n\n    this._renderMask();\n\n    this._validateMask();\n  },\n  _processEmptyMask: function _processEmptyMask(mask) {\n    if (mask) {\n      return;\n    }\n\n    var value = this.option(\"value\");\n    this.option({\n      text: value,\n      isValid: true\n    });\n    this.validationRequest.fire({\n      value: value,\n      editor: this\n    });\n\n    this._renderValue();\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"mask\":\n        this._updateMaskOption();\n\n        this._processEmptyMask(args.value);\n\n        break;\n\n      case \"maskChar\":\n      case \"maskRules\":\n      case \"useMaskedValue\":\n        this._updateMaskOption();\n\n        break;\n\n      case \"value\":\n        this._renderMaskedValue();\n\n        this._validateMask();\n\n        this.callBase(args);\n        this._changedValue = this._input().val();\n        break;\n\n      case \"maskInvalidMessage\":\n        break;\n\n      case \"showMaskMode\":\n        this.option(\"text\", \"\");\n\n        this._renderValue();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nmodule.exports = TextEditorMask;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/ui/text_box/ui.text_editor.mask.js"],"names":["$","require","caret","devices","each","eventUtils","eventsEngine","extend","focused","isDefined","messageLocalization","noop","stringUtils","wheelEvent","MaskRules","TextEditorBase","DefaultMaskStrategy","default","AndroidMaskStrategy","stubCaret","EMPTY_CHAR","ESCAPED_CHAR","TEXTEDITOR_MASKED_CLASS","FORWARD_DIRECTION","BACKWARD_DIRECTION","buildInMaskRules","L","char","isLiteralChar","l","isSpaceChar","C","c","A","isNumericChar","a","test","code","charCodeAt","TextEditorMask","inherit","_getDefaultOptions","callBase","mask","maskChar","maskRules","maskInvalidMessage","format","useMaskedValue","showMaskMode","_supportedKeys","that","keyHandlerMap","backspace","_maskStrategy","getHandler","del","enter","_changeHandler","result","key","callback","parentHandler","e","option","call","_getSubmitElement","_$hiddenElement","_init","_initMaskStrategy","device","real","android","version","_initMarkup","_renderHiddenElement","_attachMouseWheelEventHandlers","hasMouseWheelHandler","_onMouseWheel","input","_input","eventName","addNamespace","name","NAME","mouseWheelAction","_createAction","dxEvent","event","preventDefault","stopPropagation","bind","off","on","_render","_renderMask","attr","appendTo","_inputWrapper","_removeHiddenElement","remove","$element","removeClass","_maskRulesChain","detachEvents","addClass","attachEvents","_parseMask","_renderMaskedValue","_suppressCaretChanging","args","originalCaret","apply","$input","inputValue","val","_changedValue","changeEvent","createEvent","type","trigger","_maskRules","_parseMaskRule","index","length","EmptyMaskRule","currentMaskChar","isEscapedChar","StubMaskRule","_getMaskRule","next","pattern","ruleConfig","rulePattern","allowedChars","MaskRule","value","clear","_normalizeChainArguments","chainArgs","_isMaskedValueMode","_handleChain","_displayMask","_replaceSelectedText","text","selection","textBefore","slice","start","textAfter","end","edited","_caret","_renderValue","_isValueEmpty","isEmpty","_value","_shouldShowMask","_showMaskPlaceholder","_renderDisplayText","hiddenElementValue","_valueChangeEventHandler","arguments","_saveValueChangeEvent","_convertToValue","replace","_isControlKeyFired","_isControlKey","normalizeKeyName","ctrlKey","metaKey","handledCount","handle","_textValue","fullText","_replaceMaskCharWithEmpty","RegExp","_maskKeyHandler","keyHandler","_this","setForwardDirection","_handleSelection","previousText","raiseInputEvent","runWithoutEventProcessing","handled","then","_adjustCaret","reset","_handleKey","direction","_direction","_handleKeyChain","_moveCaret","_hasSelection","emptyChars","Array","join","chars","isForwardDirection","_tryMoveCaretBackward","setBackwardDirection","currentCaret","adjustedCaret","maskRuleIndex","isAccepted","position","_typingDirection","_clean","clean","_validateMask","isValid","validationError","editorSpecific","message","_updateHiddenElement","removeAttr","_setSubmitElementName","_updateMaskOption","_processEmptyMask","validationRequest","fire","editor","_optionChanged","module","exports"],"mappings":"AAAA;;;;;;;;AAQA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,eAAD,CAAnB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,2BAAD,CAAP,CAAqCG,IAAhD;;AACA,IAAIC,UAAU,GAAGJ,OAAO,CAAC,oBAAD,CAAxB;;AACA,IAAIK,YAAY,GAAGL,OAAO,CAAC,iCAAD,CAA1B;;AACA,IAAIM,MAAM,GAAGN,OAAO,CAAC,yBAAD,CAAP,CAAmCM,MAAhD;;AACA,IAAIC,OAAO,GAAGP,OAAO,CAAC,qBAAD,CAAP,CAA+BO,OAA7C;;AACA,IAAIC,SAAS,GAAGR,OAAO,CAAC,uBAAD,CAAP,CAAiCQ,SAAjD;;AACA,IAAIC,mBAAmB,GAAGT,OAAO,CAAC,4BAAD,CAAjC;;AACA,IAAIU,IAAI,GAAGV,OAAO,CAAC,yBAAD,CAAP,CAAmCU,IAA9C;;AACA,IAAIC,WAAW,GAAGX,OAAO,CAAC,yBAAD,CAAzB;;AACA,IAAIY,UAAU,GAAGZ,OAAO,CAAC,yBAAD,CAAxB;;AACA,IAAIa,SAAS,GAAGb,OAAO,CAAC,4BAAD,CAAvB;;AACA,IAAIc,cAAc,GAAGd,OAAO,CAAC,uBAAD,CAA5B;;AACA,IAAIe,mBAAmB,GAAGf,OAAO,CAAC,wCAAD,CAAP,CAAkDgB,OAA5E;;AACA,IAAIC,mBAAmB,GAAGjB,OAAO,CAAC,wCAAD,CAAP,CAAkDgB,OAA5E;;AACA,IAAIE,SAAS,GAAG,SAAZA,SAAY,GAAW;AACvB,SAAO,EAAP;AACH,CAFD;;AAGA,IAAIC,UAAU,GAAG,GAAjB;AACA,IAAIC,YAAY,GAAG,IAAnB;AACA,IAAIC,uBAAuB,GAAG,sBAA9B;AACA,IAAIC,iBAAiB,GAAG,SAAxB;AACA,IAAIC,kBAAkB,GAAG,UAAzB;AACA,IAAIC,gBAAgB,GAAG;AACnB,KAAG,OADgB;AAEnB,KAAG,SAFgB;AAGnB,OAAK,WAHc;AAInBC,EAAAA,CAAC,EAAE,WAASC,IAAT,EAAe;AACd,WAAOC,aAAa,CAACD,IAAD,CAApB;AACH,GANkB;AAOnBE,EAAAA,CAAC,EAAE,WAASF,IAAT,EAAe;AACd,WAAOC,aAAa,CAACD,IAAD,CAAb,IAAuBG,WAAW,CAACH,IAAD,CAAzC;AACH,GATkB;AAUnBI,EAAAA,CAAC,EAAE,IAVgB;AAWnBC,EAAAA,CAAC,EAAE,GAXgB;AAYnBC,EAAAA,CAAC,EAAE,WAASN,IAAT,EAAe;AACd,WAAOC,aAAa,CAACD,IAAD,CAAb,IAAuBO,aAAa,CAACP,IAAD,CAA3C;AACH,GAdkB;AAenBQ,EAAAA,CAAC,EAAE,WAASR,IAAT,EAAe;AACd,WAAOC,aAAa,CAACD,IAAD,CAAb,IAAuBO,aAAa,CAACP,IAAD,CAApC,IAA8CG,WAAW,CAACH,IAAD,CAAhE;AACH;AAjBkB,CAAvB;;AAmBA,IAAIO,aAAa,GAAG,SAAhBA,aAAgB,CAASP,IAAT,EAAe;AAC/B,SAAO,QAAQS,IAAR,CAAaT,IAAb,CAAP;AACH,CAFD;;AAGA,IAAIC,aAAa,GAAG,SAAhBA,aAAgB,CAASD,IAAT,EAAe;AAC/B,MAAIU,IAAI,GAAGV,IAAI,CAACW,UAAL,EAAX;AACA,SAAO,KAAKD,IAAL,IAAaA,IAAI,GAAG,EAApB,IAA0B,KAAKA,IAAL,IAAaA,IAAI,GAAG,GAA9C,IAAqDA,IAAI,GAAG,GAAnE;AACH,CAHD;;AAIA,IAAIP,WAAW,GAAG,SAAdA,WAAc,CAASH,IAAT,EAAe;AAC7B,SAAO,QAAQA,IAAf;AACH,CAFD;;AAGA,IAAIY,cAAc,GAAGxB,cAAc,CAACyB,OAAf,CAAuB;AACxCC,EAAAA,kBAAkB,EAAE,8BAAW;AAC3B,WAAOlC,MAAM,CAAC,KAAKmC,QAAL,EAAD,EAAkB;AAC3BC,MAAAA,IAAI,EAAE,EADqB;AAE3BC,MAAAA,QAAQ,EAAE,GAFiB;AAG3BC,MAAAA,SAAS,EAAE,EAHgB;AAI3BC,MAAAA,kBAAkB,EAAEpC,mBAAmB,CAACqC,MAApB,CAA2B,iBAA3B,CAJO;AAK3BC,MAAAA,cAAc,EAAE,KALW;AAM3BC,MAAAA,YAAY,EAAE;AANa,KAAlB,CAAb;AAQH,GAVuC;AAWxCC,EAAAA,cAAc,EAAE,0BAAW;AACvB,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIC,aAAa,GAAG;AAChBC,MAAAA,SAAS,EAAEF,IAAI,CAACG,aAAL,CAAmBC,UAAnB,CAA8B,WAA9B,CADK;AAEhBC,MAAAA,GAAG,EAAEL,IAAI,CAACG,aAAL,CAAmBC,UAAnB,CAA8B,KAA9B,CAFW;AAGhBE,MAAAA,KAAK,EAAEN,IAAI,CAACO;AAHI,KAApB;AAKA,QAAIC,MAAM,GAAGR,IAAI,CAACT,QAAL,EAAb;AACAtC,IAAAA,IAAI,CAACgD,aAAD,EAAgB,UAASQ,GAAT,EAAcC,QAAd,EAAwB;AACxC,UAAIC,aAAa,GAAGH,MAAM,CAACC,GAAD,CAA1B;;AACAD,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAc,UAASG,CAAT,EAAY;AACtBZ,QAAAA,IAAI,CAACa,MAAL,CAAY,MAAZ,KAAuBH,QAAQ,CAACI,IAAT,CAAcd,IAAd,EAAoBY,CAApB,CAAvB;AACAD,QAAAA,aAAa,IAAIA,aAAa,CAACC,CAAD,CAA9B;AACH,OAHD;AAIH,KANG,CAAJ;AAOA,WAAOJ,MAAP;AACH,GA3BuC;AA4BxCO,EAAAA,iBAAiB,EAAE,6BAAW;AAC1B,WAAO,CAAC,KAAKF,MAAL,CAAY,MAAZ,CAAD,GAAuB,KAAKtB,QAAL,EAAvB,GAAyC,KAAKyB,eAArD;AACH,GA9BuC;AA+BxCC,EAAAA,KAAK,EAAE,iBAAW;AACd,SAAK1B,QAAL;;AACA,SAAK2B,iBAAL;AACH,GAlCuC;AAmCxCA,EAAAA,iBAAiB,EAAE,6BAAW;AAC1B,QAAIC,MAAM,GAAGnE,OAAO,CAACoE,IAAR,EAAb;AACA,SAAKjB,aAAL,GAAqBgB,MAAM,CAACE,OAAP,IAAkBF,MAAM,CAACG,OAAP,CAAe,CAAf,IAAoB,CAAtC,GAA0C,IAAIvD,mBAAJ,CAAwB,IAAxB,CAA1C,GAA0E,IAAIF,mBAAJ,CAAwB,IAAxB,CAA/F;AACH,GAtCuC;AAuCxC0D,EAAAA,WAAW,EAAE,uBAAW;AACpB,SAAKC,oBAAL;;AACA,SAAKjC,QAAL;AACH,GA1CuC;AA2CxCkC,EAAAA,8BAA8B,EAAE,0CAAW;AACvC,QAAIC,oBAAoB,GAAG,KAAKC,aAAL,KAAuBnE,IAAlD;;AACA,QAAI,CAACkE,oBAAL,EAA2B;AACvB;AACH;;AACD,QAAIE,KAAK,GAAG,KAAKC,MAAL,EAAZ;;AACA,QAAIC,SAAS,GAAG5E,UAAU,CAAC6E,YAAX,CAAwBrE,UAAU,CAACsE,IAAnC,EAAyC,KAAKC,IAA9C,CAAhB;;AACA,QAAIC,gBAAgB,GAAG,KAAKC,aAAL,CAAmB,UAASvB,CAAT,EAAY;AAClD,UAAIvD,OAAO,CAACuE,KAAD,CAAX,EAAoB;AAChB,YAAIQ,OAAO,GAAGxB,CAAC,CAACyB,KAAhB;;AACA,aAAKV,aAAL,CAAmBS,OAAnB;;AACAA,QAAAA,OAAO,CAACE,cAAR;AACAF,QAAAA,OAAO,CAACG,eAAR;AACH;AACJ,KAPyC,CAOxCC,IAPwC,CAOnC,IAPmC,CAAnB,CAAvB;;AAQArF,IAAAA,YAAY,CAACsF,GAAb,CAAiBb,KAAjB,EAAwBE,SAAxB;AACA3E,IAAAA,YAAY,CAACuF,EAAb,CAAgBd,KAAhB,EAAuBE,SAAvB,EAAkC,UAASlB,CAAT,EAAY;AAC1CsB,MAAAA,gBAAgB,CAAC;AACbG,QAAAA,KAAK,EAAEzB;AADM,OAAD,CAAhB;AAGH,KAJD;AAKH,GAhEuC;AAiExCe,EAAAA,aAAa,EAAEnE,IAjEyB;AAkExCmF,EAAAA,OAAO,EAAE,mBAAW;AAChB,SAAKpD,QAAL;;AACA,SAAKqD,WAAL;;AACA,SAAKnB,8BAAL;AACH,GAtEuC;AAuExCD,EAAAA,oBAAoB,EAAE,gCAAW;AAC7B,QAAI,KAAKX,MAAL,CAAY,MAAZ,CAAJ,EAAyB;AACrB,WAAKG,eAAL,GAAuBnE,CAAC,CAAC,SAAD,CAAD,CAAagG,IAAb,CAAkB,MAAlB,EAA0B,QAA1B,EAAoCC,QAApC,CAA6C,KAAKC,aAAL,EAA7C,CAAvB;AACH;AACJ,GA3EuC;AA4ExCC,EAAAA,oBAAoB,EAAE,gCAAW;AAC7B,SAAKhC,eAAL,IAAwB,KAAKA,eAAL,CAAqBiC,MAArB,EAAxB;AACH,GA9EuC;AA+ExCL,EAAAA,WAAW,EAAE,uBAAW;AACpB,SAAKM,QAAL,GAAgBC,WAAhB,CAA4BhF,uBAA5B;AACA,SAAKiF,eAAL,GAAuB,IAAvB;;AACA,SAAKjD,aAAL,CAAmBkD,YAAnB;;AACA,QAAI,CAAC,KAAKxC,MAAL,CAAY,MAAZ,CAAL,EAA0B;AACtB;AACH;;AACD,SAAKqC,QAAL,GAAgBI,QAAhB,CAAyBnF,uBAAzB;;AACA,SAAKgC,aAAL,CAAmBoD,YAAnB;;AACA,SAAKC,UAAL;;AACA,SAAKC,kBAAL;AACH,GA1FuC;AA2FxCC,EAAAA,sBAAsB,EAAE,gCAAShD,QAAT,EAAmBiD,IAAnB,EAAyB;AAC7C,QAAIC,aAAa,GAAG7G,KAApB;AACAA,IAAAA,KAAK,GAAGiB,SAAR;;AACA,QAAI;AACA0C,MAAAA,QAAQ,CAACmD,KAAT,CAAe,IAAf,EAAqBF,IAArB;AACH,KAFD,SAEU;AACN5G,MAAAA,KAAK,GAAG6G,aAAR;AACH;AACJ,GAnGuC;AAoGxCrD,EAAAA,cAAc,EAAE,wBAASK,CAAT,EAAY;AACxB,QAAIkD,MAAM,GAAG,KAAKjC,MAAL,EAAb;;AACA,QAAIkC,UAAU,GAAGD,MAAM,CAACE,GAAP,EAAjB;;AACA,QAAID,UAAU,KAAK,KAAKE,aAAxB,EAAuC;AACnC;AACH;;AACD,SAAKA,aAAL,GAAqBF,UAArB;AACA,QAAIG,WAAW,GAAGhH,UAAU,CAACiH,WAAX,CAAuBvD,CAAvB,EAA0B;AACxCwD,MAAAA,IAAI,EAAE;AADkC,KAA1B,CAAlB;AAGAjH,IAAAA,YAAY,CAACkH,OAAb,CAAqBP,MAArB,EAA6BI,WAA7B;AACH,GA/GuC;AAgHxCV,EAAAA,UAAU,EAAE,sBAAW;AACnB,SAAKc,UAAL,GAAkBlH,MAAM,CAAC,EAAD,EAAKkB,gBAAL,EAAuB,KAAKuC,MAAL,CAAY,WAAZ,CAAvB,CAAxB;AACA,SAAKuC,eAAL,GAAuB,KAAKmB,cAAL,CAAoB,CAApB,CAAvB;AACH,GAnHuC;AAoHxCA,EAAAA,cAAc,EAAE,wBAASC,KAAT,EAAgB;AAC5B,QAAIhF,IAAI,GAAG,KAAKqB,MAAL,CAAY,MAAZ,CAAX;;AACA,QAAI2D,KAAK,IAAIhF,IAAI,CAACiF,MAAlB,EAA0B;AACtB,aAAO,IAAI9G,SAAS,CAAC+G,aAAd,EAAP;AACH;;AACD,QAAIC,eAAe,GAAGnF,IAAI,CAACgF,KAAD,CAA1B;AACA,QAAII,aAAa,GAAGD,eAAe,KAAKzG,YAAxC;AACA,QAAIsC,MAAM,GAAGoE,aAAa,GAAG,IAAIjH,SAAS,CAACkH,YAAd,CAA2B;AACpDpF,MAAAA,QAAQ,EAAED,IAAI,CAACgF,KAAK,GAAG,CAAT;AADsC,KAA3B,CAAH,GAErB,KAAKM,YAAL,CAAkBH,eAAlB,CAFL;AAGAnE,IAAAA,MAAM,CAACuE,IAAP,CAAY,KAAKR,cAAL,CAAoBC,KAAK,GAAG,CAAR,GAAYI,aAAhC,CAAZ;AACA,WAAOpE,MAAP;AACH,GAhIuC;AAiIxCsE,EAAAA,YAAY,EAAE,sBAASE,OAAT,EAAkB;AAC5B,QAAIC,UAAJ;AACAhI,IAAAA,IAAI,CAAC,KAAKqH,UAAN,EAAkB,UAASY,WAAT,EAAsBC,YAAtB,EAAoC;AACtD,UAAID,WAAW,KAAKF,OAApB,EAA6B;AACzBC,QAAAA,UAAU,GAAG;AACTD,UAAAA,OAAO,EAAEE,WADA;AAETC,UAAAA,YAAY,EAAEA;AAFL,SAAb;AAIA,eAAO,KAAP;AACH;AACJ,KARG,CAAJ;AASA,WAAO7H,SAAS,CAAC2H,UAAD,CAAT,GAAwB,IAAItH,SAAS,CAACyH,QAAd,CAAuBhI,MAAM,CAAC;AACzDqC,MAAAA,QAAQ,EAAE,KAAKoB,MAAL,CAAY,UAAZ;AAD+C,KAAD,EAEzDoE,UAFyD,CAA7B,CAAxB,GAEW,IAAItH,SAAS,CAACkH,YAAd,CAA2B;AACzCpF,MAAAA,QAAQ,EAAEuF;AAD+B,KAA3B,CAFlB;AAKH,GAjJuC;AAkJxCvB,EAAAA,kBAAkB,EAAE,8BAAW;AAC3B,QAAI,CAAC,KAAKL,eAAV,EAA2B;AACvB;AACH;;AACD,QAAIiC,KAAK,GAAG,KAAKxE,MAAL,CAAY,OAAZ,KAAwB,EAApC;;AACA,SAAKuC,eAAL,CAAqBkC,KAArB,CAA2B,KAAKC,wBAAL,EAA3B;;AACA,QAAIC,SAAS,GAAG;AACZf,MAAAA,MAAM,EAAEY,KAAK,CAACZ;AADF,KAAhB;AAGAe,IAAAA,SAAS,CAAC,KAAKC,kBAAL,KAA4B,MAA5B,GAAqC,OAAtC,CAAT,GAA0DJ,KAA1D;;AACA,SAAKK,YAAL,CAAkBF,SAAlB;;AACA,SAAKG,YAAL;AACH,GA9JuC;AA+JxCC,EAAAA,oBAAoB,EAAE,8BAASC,IAAT,EAAeC,SAAf,EAA0BtH,IAA1B,EAAgC;AAClD,QAAI,KAAK,CAAL,KAAWA,IAAf,EAAqB;AACjB,aAAOqH,IAAP;AACH;;AACD,QAAIE,UAAU,GAAGF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcF,SAAS,CAACG,KAAxB,CAAjB;AACA,QAAIC,SAAS,GAAGL,IAAI,CAACG,KAAL,CAAWF,SAAS,CAACK,GAArB,CAAhB;AACA,QAAIC,MAAM,GAAGL,UAAU,GAAGvH,IAAb,GAAoB0H,SAAjC;AACA,WAAOE,MAAP;AACH,GAvKuC;AAwKxCX,EAAAA,kBAAkB,EAAE,8BAAW;AAC3B,WAAO,KAAK5E,MAAL,CAAY,gBAAZ,CAAP;AACH,GA1KuC;AA2KxC8E,EAAAA,YAAY,EAAE,sBAAS5I,KAAT,EAAgB;AAC1BA,IAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKsJ,MAAL,EAAjB;;AACA,SAAKC,YAAL;;AACA,SAAKD,MAAL,CAAYtJ,KAAZ;AACH,GA/KuC;AAgLxCwJ,EAAAA,aAAa,EAAE,yBAAW;AACtB,WAAO9I,WAAW,CAAC+I,OAAZ,CAAoB,KAAKC,MAAzB,CAAP;AACH,GAlLuC;AAmLxCC,EAAAA,eAAe,EAAE,2BAAW;AACxB,QAAI5G,YAAY,GAAG,KAAKe,MAAL,CAAY,cAAZ,CAAnB;;AACA,QAAI,cAAcf,YAAlB,EAAgC;AAC5B,aAAOzC,OAAO,CAAC,KAAKwE,MAAL,EAAD,CAAP,IAA0B,CAAC,KAAK0E,aAAL,EAAlC;AACH;;AACD,WAAO,IAAP;AACH,GAzLuC;AA0LxCI,EAAAA,oBAAoB,EAAE,gCAAW;AAC7B,QAAI,KAAKD,eAAL,EAAJ,EAA4B;AACxB,UAAIb,IAAI,GAAG,KAAKzC,eAAL,CAAqByC,IAArB,EAAX;;AACA,WAAKhF,MAAL,CAAY,MAAZ,EAAoBgF,IAApB;;AACA,UAAI,cAAc,KAAKhF,MAAL,CAAY,cAAZ,CAAlB,EAA+C;AAC3C,aAAK+F,kBAAL,CAAwBf,IAAxB;AACH;AACJ;AACJ,GAlMuC;AAmMxCS,EAAAA,YAAY,EAAE,wBAAW;AACrB,QAAI,KAAKlD,eAAT,EAA0B;AACtB,UAAIyC,IAAI,GAAG,KAAKzC,eAAL,CAAqByC,IAArB,EAAX;;AACA,WAAKc,oBAAL;;AACA,UAAI,KAAK3F,eAAT,EAA0B;AACtB,YAAIqE,KAAK,GAAG,KAAKjC,eAAL,CAAqBiC,KAArB,EAAZ;;AACA,YAAIwB,kBAAkB,GAAG,KAAKpB,kBAAL,KAA4BI,IAA5B,GAAmCR,KAA5D;;AACA,aAAKrE,eAAL,CAAqBgD,GAArB,CAAyB,CAACvG,WAAW,CAAC+I,OAAZ,CAAoBnB,KAApB,CAAD,GAA8BwB,kBAA9B,GAAmD,EAA5E;AACH;AACJ;;AACD,WAAO,KAAKtH,QAAL,EAAP;AACH,GA9MuC;AA+MxCuH,EAAAA,wBAAwB,EAAE,kCAASlG,CAAT,EAAY;AAClC,QAAI,CAAC,KAAKwC,eAAV,EAA2B;AACvB,WAAK7D,QAAL,CAAcsE,KAAd,CAAoB,IAApB,EAA0BkD,SAA1B;AACA;AACH;;AACD,SAAKC,qBAAL,CAA2BpG,CAA3B;;AACA,SAAKC,MAAL,CAAY,OAAZ,EAAqB,KAAKoG,eAAL,GAAuBC,OAAvB,CAA+B,MAA/B,EAAuC,EAAvC,CAArB;AACH,GAtNuC;AAuNxCC,EAAAA,kBAAkB,EAAE,4BAASvG,CAAT,EAAY;AAC5B,WAAO,KAAKwG,aAAL,CAAmBlK,UAAU,CAACmK,gBAAX,CAA4BzG,CAA5B,CAAnB,KAAsDA,CAAC,CAAC0G,OAAxD,IAAmE1G,CAAC,CAAC2G,OAA5E;AACH,GAzNuC;AA0NxC7B,EAAAA,YAAY,EAAE,sBAAS/B,IAAT,EAAe;AACzB,QAAI6D,YAAY,GAAG,KAAKpE,eAAL,CAAqBqE,MAArB,CAA4B,KAAKlC,wBAAL,CAA8B5B,IAA9B,CAA5B,CAAnB;;AACA,SAAK8C,MAAL,GAAc,KAAKrD,eAAL,CAAqBiC,KAArB,EAAd;AACA,SAAKqC,UAAL,GAAkB,KAAKtE,eAAL,CAAqByC,IAArB,EAAlB;AACA,WAAO2B,YAAP;AACH,GA/NuC;AAgOxCjC,EAAAA,wBAAwB,EAAE,kCAAS5B,IAAT,EAAe;AACrCA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACAA,IAAAA,IAAI,CAACa,KAAL,GAAa,CAAb;AACAb,IAAAA,IAAI,CAACgE,QAAL,GAAgB,KAAKvE,eAAL,CAAqByC,IAArB,EAAhB;AACA,WAAOlC,IAAP;AACH,GArOuC;AAsOxCsD,EAAAA,eAAe,EAAE,yBAASpB,IAAT,EAAe;AAC5B,QAAI,KAAKJ,kBAAL,EAAJ,EAA+B;AAC3BI,MAAAA,IAAI,GAAG,KAAK+B,yBAAL,CAA+B/B,IAAI,IAAI,KAAK6B,UAAb,IAA2B,EAA1D,CAAP;AACH,KAFD,MAEO;AACH7B,MAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKY,MAAb,IAAuB,EAA9B;AACH;;AACD,WAAOZ,IAAP;AACH,GA7OuC;AA8OxC+B,EAAAA,yBAAyB,EAAE,mCAAS/B,IAAT,EAAe;AACtC,WAAOA,IAAI,CAACqB,OAAL,CAAa,IAAIW,MAAJ,CAAW,KAAKhH,MAAL,CAAY,UAAZ,CAAX,EAAoC,GAApC,CAAb,EAAuD5C,UAAvD,CAAP;AACH,GAhPuC;AAiPxC6J,EAAAA,eAAe,EAAE,yBAASlH,CAAT,EAAYmH,UAAZ,EAAwB;AACrC,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAKnH,MAAL,CAAY,UAAZ,CAAJ,EAA6B;AACzB;AACH;;AACD,SAAKoH,mBAAL;AACArH,IAAAA,CAAC,CAAC0B,cAAF;;AACA,SAAK4F,gBAAL;;AACA,QAAIC,YAAY,GAAG,KAAKtG,MAAL,GAAcmC,GAAd,EAAnB;;AACA,QAAIoE,eAAe,GAAG,SAAlBA,eAAkB,GAAW;AAC7B,UAAID,YAAY,KAAKH,KAAK,CAACnG,MAAN,GAAemC,GAAf,EAArB,EAA2C;AACvCgE,QAAAA,KAAK,CAAC7H,aAAN,CAAoBkI,yBAApB,CAA8C,YAAW;AACrD,iBAAOlL,YAAY,CAACkH,OAAb,CAAqB2D,KAAK,CAACnG,MAAN,EAArB,EAAqC,OAArC,CAAP;AACH,SAFD;AAGH;AACJ,KAND;;AAOA,QAAIyG,OAAO,GAAGP,UAAU,EAAxB;;AACA,QAAIO,OAAJ,EAAa;AACTA,MAAAA,OAAO,CAACC,IAAR,CAAaH,eAAb;AACH,KAFD,MAEO;AACH,WAAKH,mBAAL;;AACA,WAAKO,YAAL;;AACA,WAAK7C,YAAL;;AACA,WAAKvC,eAAL,CAAqBqF,KAArB;;AACAL,MAAAA,eAAe;AAClB;AACJ,GA3QuC;AA4QxCM,EAAAA,UAAU,EAAE,oBAASjI,GAAT,EAAckI,SAAd,EAAyB;AACjC,SAAKC,UAAL,CAAgBD,SAAS,IAAIvK,iBAA7B;;AACA,SAAKoK,YAAL,CAAkB/H,GAAlB;;AACA,SAAKoI,eAAL,CAAqBpI,GAArB;;AACA,SAAKqI,UAAL;AACH,GAjRuC;AAkRxCZ,EAAAA,gBAAgB,EAAE,4BAAW;AACzB,QAAI,CAAC,KAAKa,aAAL,EAAL,EAA2B;AACvB;AACH;;AACD,QAAIhM,KAAK,GAAG,KAAKsJ,MAAL,EAAZ;;AACA,QAAI2C,UAAU,GAAG,IAAIC,KAAJ,CAAUlM,KAAK,CAACoJ,GAAN,GAAYpJ,KAAK,CAACkJ,KAAlB,GAA0B,CAApC,EAAuCiD,IAAvC,CAA4CjL,UAA5C,CAAjB;;AACA,SAAK4K,eAAL,CAAqBG,UAArB;AACH,GAzRuC;AA0RxCH,EAAAA,eAAe,EAAE,yBAASM,KAAT,EAAgB;AAC7B,QAAIpM,KAAK,GAAG,KAAKsJ,MAAL,EAAZ;;AACA,QAAIJ,KAAK,GAAG,KAAKmD,kBAAL,KAA4BrM,KAAK,CAACkJ,KAAlC,GAA0ClJ,KAAK,CAACkJ,KAAN,GAAc,CAApE;AACA,QAAIE,GAAG,GAAG,KAAKiD,kBAAL,KAA4BrM,KAAK,CAACoJ,GAAlC,GAAwCpJ,KAAK,CAACoJ,GAAN,GAAY,CAA9D;AACA,QAAI1B,MAAM,GAAGwB,KAAK,KAAKE,GAAV,GAAgB,CAAhB,GAAoBA,GAAG,GAAGF,KAAvC;;AACA,SAAKP,YAAL,CAAkB;AACdG,MAAAA,IAAI,EAAEsD,KADQ;AAEdlD,MAAAA,KAAK,EAAEA,KAFO;AAGdxB,MAAAA,MAAM,EAAEA;AAHM,KAAlB;AAKH,GApSuC;AAqSxC4E,EAAAA,qBAAqB,EAAE,iCAAW;AAC9B,SAAKC,oBAAL;;AACA,QAAIC,YAAY,GAAG,KAAKlD,MAAL,GAAcJ,KAAjC;;AACA,SAAKuC,YAAL;;AACA,WAAO,CAACe,YAAD,IAAiBA,YAAY,KAAK,KAAKlD,MAAL,GAAcJ,KAAvD;AACH,GA1SuC;AA2SxCuC,EAAAA,YAAY,EAAE,sBAAShK,IAAT,EAAe;AACzB,QAAIzB,KAAK,GAAG,KAAKqG,eAAL,CAAqBoG,aAArB,CAAmC,KAAKnD,MAAL,GAAcJ,KAAjD,EAAwD,KAAKmD,kBAAL,EAAxD,EAAmF5K,IAAnF,CAAZ;;AACA,SAAK6H,MAAL,CAAY;AACRJ,MAAAA,KAAK,EAAElJ,KADC;AAERoJ,MAAAA,GAAG,EAAEpJ;AAFG,KAAZ;AAIH,GAjTuC;AAkTxC+L,EAAAA,UAAU,EAAE,sBAAW;AACnB,QAAIS,YAAY,GAAG,KAAKlD,MAAL,GAAcJ,KAAjC;;AACA,QAAIwD,aAAa,GAAGF,YAAY,IAAI,KAAKH,kBAAL,KAA4B,CAA5B,GAAgC,CAAC,CAArC,CAAhC;AACA,QAAIrM,KAAK,GAAG,KAAKqG,eAAL,CAAqBsG,UAArB,CAAgCD,aAAhC,IAAiDF,YAAY,IAAI,KAAKH,kBAAL,KAA4B,CAA5B,GAAgC,CAAC,CAArC,CAA7D,GAAuGG,YAAnH;;AACA,SAAKlD,MAAL,CAAY;AACRJ,MAAAA,KAAK,EAAElJ,KADC;AAERoJ,MAAAA,GAAG,EAAEpJ;AAFG,KAAZ;AAIH,GA1TuC;AA2TxCsJ,EAAAA,MAAM,EAAE,gBAASsD,QAAT,EAAmB;AACvB,QAAI7F,MAAM,GAAG,KAAKjC,MAAL,EAAb;;AACA,QAAI,CAACiC,MAAM,CAACW,MAAZ,EAAoB;AAChB;AACH;;AACD,QAAI,CAACsC,SAAS,CAACtC,MAAf,EAAuB;AACnB,aAAO1H,KAAK,CAAC+G,MAAD,CAAZ;AACH;;AACD/G,IAAAA,KAAK,CAAC+G,MAAD,EAAS6F,QAAT,CAAL;AACH,GApUuC;AAqUxCZ,EAAAA,aAAa,EAAE,yBAAW;AACtB,QAAIhM,KAAK,GAAG,KAAKsJ,MAAL,EAAZ;;AACA,WAAOtJ,KAAK,CAACkJ,KAAN,KAAgBlJ,KAAK,CAACoJ,GAA7B;AACH,GAxUuC;AAyUxCyC,EAAAA,UAAU,EAAE,oBAASD,SAAT,EAAoB;AAC5B,QAAI,CAAC5B,SAAS,CAACtC,MAAf,EAAuB;AACnB,aAAO,KAAKmF,gBAAZ;AACH;;AACD,SAAKA,gBAAL,GAAwBjB,SAAxB;AACH,GA9UuC;AA+UxCV,EAAAA,mBAAmB,EAAE,+BAAW;AAC5B,SAAKW,UAAL,CAAgBxK,iBAAhB;AACH,GAjVuC;AAkVxCkL,EAAAA,oBAAoB,EAAE,gCAAW;AAC7B,SAAKV,UAAL,CAAgBvK,kBAAhB;AACH,GApVuC;AAqVxC+K,EAAAA,kBAAkB,EAAE,8BAAW;AAC3B,WAAO,KAAKR,UAAL,OAAsBxK,iBAA7B;AACH,GAvVuC;AAwVxCyL,EAAAA,MAAM,EAAE,kBAAW;AACf,SAAK1J,aAAL,IAAsB,KAAKA,aAAL,CAAmB2J,KAAnB,EAAtB;AACA,SAAKvK,QAAL;AACH,GA3VuC;AA4VxCwK,EAAAA,aAAa,EAAE,yBAAW;AACtB,QAAI,CAAC,KAAK3G,eAAV,EAA2B;AACvB;AACH;;AACD,QAAI4G,OAAO,GAAGvM,WAAW,CAAC+I,OAAZ,CAAoB,KAAK3F,MAAL,CAAY,OAAZ,CAApB,KAA6C,KAAKuC,eAAL,CAAqB4G,OAArB,CAA6B,KAAKzE,wBAAL,EAA7B,CAA3D;;AACA,SAAK1E,MAAL,CAAY;AACRmJ,MAAAA,OAAO,EAAEA,OADD;AAERC,MAAAA,eAAe,EAAED,OAAO,GAAG,IAAH,GAAU;AAC9BE,QAAAA,cAAc,EAAE,IADc;AAE9BC,QAAAA,OAAO,EAAE,KAAKtJ,MAAL,CAAY,oBAAZ;AAFqB;AAF1B,KAAZ;AAOH,GAxWuC;AAyWxCuJ,EAAAA,oBAAoB,EAAE,gCAAW;AAC7B,SAAKpH,oBAAL;;AACA,QAAI,KAAKnC,MAAL,CAAY,MAAZ,CAAJ,EAAyB;AACrB,WAAKgB,MAAL,GAAcwI,UAAd,CAAyB,MAAzB;;AACA,WAAK7I,oBAAL;AACH;;AACD,SAAK8I,qBAAL,CAA2B,KAAKzJ,MAAL,CAAY,MAAZ,CAA3B;AACH,GAhXuC;AAiXxC0J,EAAAA,iBAAiB,EAAE,6BAAW;AAC1B,SAAKH,oBAAL;;AACA,SAAKxH,WAAL;;AACA,SAAKmH,aAAL;AACH,GArXuC;AAsXxCS,EAAAA,iBAAiB,EAAE,2BAAShL,IAAT,EAAe;AAC9B,QAAIA,IAAJ,EAAU;AACN;AACH;;AACD,QAAI6F,KAAK,GAAG,KAAKxE,MAAL,CAAY,OAAZ,CAAZ;AACA,SAAKA,MAAL,CAAY;AACRgF,MAAAA,IAAI,EAAER,KADE;AAER2E,MAAAA,OAAO,EAAE;AAFD,KAAZ;AAIA,SAAKS,iBAAL,CAAuBC,IAAvB,CAA4B;AACxBrF,MAAAA,KAAK,EAAEA,KADiB;AAExBsF,MAAAA,MAAM,EAAE;AAFgB,KAA5B;;AAIA,SAAKrE,YAAL;AACH,GApYuC;AAqYxCsE,EAAAA,cAAc,EAAE,wBAASjH,IAAT,EAAe;AAC3B,YAAQA,IAAI,CAAC3B,IAAb;AACI,WAAK,MAAL;AACI,aAAKuI,iBAAL;;AACA,aAAKC,iBAAL,CAAuB7G,IAAI,CAAC0B,KAA5B;;AACA;;AACJ,WAAK,UAAL;AACA,WAAK,WAAL;AACA,WAAK,gBAAL;AACI,aAAKkF,iBAAL;;AACA;;AACJ,WAAK,OAAL;AACI,aAAK9G,kBAAL;;AACA,aAAKsG,aAAL;;AACA,aAAKxK,QAAL,CAAcoE,IAAd;AACA,aAAKM,aAAL,GAAqB,KAAKpC,MAAL,GAAcmC,GAAd,EAArB;AACA;;AACJ,WAAK,oBAAL;AACI;;AACJ,WAAK,cAAL;AACI,aAAKnD,MAAL,CAAY,MAAZ,EAAoB,EAApB;;AACA,aAAKyF,YAAL;;AACA;;AACJ;AACI,aAAK/G,QAAL,CAAcoE,IAAd;AAvBR;AAyBH;AA/ZuC,CAAvB,CAArB;AAiaAkH,MAAM,CAACC,OAAP,GAAiB1L,cAAjB","sourcesContent":["/**\r\n * DevExtreme (ui/text_box/ui.text_editor.mask.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\");\r\nvar caret = require(\"./utils.caret\");\r\nvar devices = require(\"../../core/devices\");\r\nvar each = require(\"../../core/utils/iterator\").each;\r\nvar eventUtils = require(\"../../events/utils\");\r\nvar eventsEngine = require(\"../../events/core/events_engine\");\r\nvar extend = require(\"../../core/utils/extend\").extend;\r\nvar focused = require(\"../widget/selectors\").focused;\r\nvar isDefined = require(\"../../core/utils/type\").isDefined;\r\nvar messageLocalization = require(\"../../localization/message\");\r\nvar noop = require(\"../../core/utils/common\").noop;\r\nvar stringUtils = require(\"../../core/utils/string\");\r\nvar wheelEvent = require(\"../../events/core/wheel\");\r\nvar MaskRules = require(\"./ui.text_editor.mask.rule\");\r\nvar TextEditorBase = require(\"./ui.text_editor.base\");\r\nvar DefaultMaskStrategy = require(\"./ui.text_editor.mask.strategy.default\").default;\r\nvar AndroidMaskStrategy = require(\"./ui.text_editor.mask.strategy.android\").default;\r\nvar stubCaret = function() {\r\n    return {}\r\n};\r\nvar EMPTY_CHAR = \" \";\r\nvar ESCAPED_CHAR = \"\\\\\";\r\nvar TEXTEDITOR_MASKED_CLASS = \"dx-texteditor-masked\";\r\nvar FORWARD_DIRECTION = \"forward\";\r\nvar BACKWARD_DIRECTION = \"backward\";\r\nvar buildInMaskRules = {\r\n    0: /[0-9]/,\r\n    9: /[0-9\\s]/,\r\n    \"#\": /[-+0-9\\s]/,\r\n    L: function(char) {\r\n        return isLiteralChar(char)\r\n    },\r\n    l: function(char) {\r\n        return isLiteralChar(char) || isSpaceChar(char)\r\n    },\r\n    C: /\\S/,\r\n    c: /./,\r\n    A: function(char) {\r\n        return isLiteralChar(char) || isNumericChar(char)\r\n    },\r\n    a: function(char) {\r\n        return isLiteralChar(char) || isNumericChar(char) || isSpaceChar(char)\r\n    }\r\n};\r\nvar isNumericChar = function(char) {\r\n    return /[0-9]/.test(char)\r\n};\r\nvar isLiteralChar = function(char) {\r\n    var code = char.charCodeAt();\r\n    return 64 < code && code < 91 || 96 < code && code < 123 || code > 127\r\n};\r\nvar isSpaceChar = function(char) {\r\n    return \" \" === char\r\n};\r\nvar TextEditorMask = TextEditorBase.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            mask: \"\",\r\n            maskChar: \"_\",\r\n            maskRules: {},\r\n            maskInvalidMessage: messageLocalization.format(\"validation-mask\"),\r\n            useMaskedValue: false,\r\n            showMaskMode: \"always\"\r\n        })\r\n    },\r\n    _supportedKeys: function() {\r\n        var that = this;\r\n        var keyHandlerMap = {\r\n            backspace: that._maskStrategy.getHandler(\"backspace\"),\r\n            del: that._maskStrategy.getHandler(\"del\"),\r\n            enter: that._changeHandler\r\n        };\r\n        var result = that.callBase();\r\n        each(keyHandlerMap, function(key, callback) {\r\n            var parentHandler = result[key];\r\n            result[key] = function(e) {\r\n                that.option(\"mask\") && callback.call(that, e);\r\n                parentHandler && parentHandler(e)\r\n            }\r\n        });\r\n        return result\r\n    },\r\n    _getSubmitElement: function() {\r\n        return !this.option(\"mask\") ? this.callBase() : this._$hiddenElement\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        this._initMaskStrategy()\r\n    },\r\n    _initMaskStrategy: function() {\r\n        var device = devices.real();\r\n        this._maskStrategy = device.android && device.version[0] > 4 ? new AndroidMaskStrategy(this) : new DefaultMaskStrategy(this)\r\n    },\r\n    _initMarkup: function() {\r\n        this._renderHiddenElement();\r\n        this.callBase()\r\n    },\r\n    _attachMouseWheelEventHandlers: function() {\r\n        var hasMouseWheelHandler = this._onMouseWheel !== noop;\r\n        if (!hasMouseWheelHandler) {\r\n            return\r\n        }\r\n        var input = this._input();\r\n        var eventName = eventUtils.addNamespace(wheelEvent.name, this.NAME);\r\n        var mouseWheelAction = this._createAction(function(e) {\r\n            if (focused(input)) {\r\n                var dxEvent = e.event;\r\n                this._onMouseWheel(dxEvent);\r\n                dxEvent.preventDefault();\r\n                dxEvent.stopPropagation()\r\n            }\r\n        }.bind(this));\r\n        eventsEngine.off(input, eventName);\r\n        eventsEngine.on(input, eventName, function(e) {\r\n            mouseWheelAction({\r\n                event: e\r\n            })\r\n        })\r\n    },\r\n    _onMouseWheel: noop,\r\n    _render: function() {\r\n        this.callBase();\r\n        this._renderMask();\r\n        this._attachMouseWheelEventHandlers()\r\n    },\r\n    _renderHiddenElement: function() {\r\n        if (this.option(\"mask\")) {\r\n            this._$hiddenElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this._inputWrapper())\r\n        }\r\n    },\r\n    _removeHiddenElement: function() {\r\n        this._$hiddenElement && this._$hiddenElement.remove()\r\n    },\r\n    _renderMask: function() {\r\n        this.$element().removeClass(TEXTEDITOR_MASKED_CLASS);\r\n        this._maskRulesChain = null;\r\n        this._maskStrategy.detachEvents();\r\n        if (!this.option(\"mask\")) {\r\n            return\r\n        }\r\n        this.$element().addClass(TEXTEDITOR_MASKED_CLASS);\r\n        this._maskStrategy.attachEvents();\r\n        this._parseMask();\r\n        this._renderMaskedValue()\r\n    },\r\n    _suppressCaretChanging: function(callback, args) {\r\n        var originalCaret = caret;\r\n        caret = stubCaret;\r\n        try {\r\n            callback.apply(this, args)\r\n        } finally {\r\n            caret = originalCaret\r\n        }\r\n    },\r\n    _changeHandler: function(e) {\r\n        var $input = this._input();\r\n        var inputValue = $input.val();\r\n        if (inputValue === this._changedValue) {\r\n            return\r\n        }\r\n        this._changedValue = inputValue;\r\n        var changeEvent = eventUtils.createEvent(e, {\r\n            type: \"change\"\r\n        });\r\n        eventsEngine.trigger($input, changeEvent)\r\n    },\r\n    _parseMask: function() {\r\n        this._maskRules = extend({}, buildInMaskRules, this.option(\"maskRules\"));\r\n        this._maskRulesChain = this._parseMaskRule(0)\r\n    },\r\n    _parseMaskRule: function(index) {\r\n        var mask = this.option(\"mask\");\r\n        if (index >= mask.length) {\r\n            return new MaskRules.EmptyMaskRule\r\n        }\r\n        var currentMaskChar = mask[index];\r\n        var isEscapedChar = currentMaskChar === ESCAPED_CHAR;\r\n        var result = isEscapedChar ? new MaskRules.StubMaskRule({\r\n            maskChar: mask[index + 1]\r\n        }) : this._getMaskRule(currentMaskChar);\r\n        result.next(this._parseMaskRule(index + 1 + isEscapedChar));\r\n        return result\r\n    },\r\n    _getMaskRule: function(pattern) {\r\n        var ruleConfig;\r\n        each(this._maskRules, function(rulePattern, allowedChars) {\r\n            if (rulePattern === pattern) {\r\n                ruleConfig = {\r\n                    pattern: rulePattern,\r\n                    allowedChars: allowedChars\r\n                };\r\n                return false\r\n            }\r\n        });\r\n        return isDefined(ruleConfig) ? new MaskRules.MaskRule(extend({\r\n            maskChar: this.option(\"maskChar\")\r\n        }, ruleConfig)) : new MaskRules.StubMaskRule({\r\n            maskChar: pattern\r\n        })\r\n    },\r\n    _renderMaskedValue: function() {\r\n        if (!this._maskRulesChain) {\r\n            return\r\n        }\r\n        var value = this.option(\"value\") || \"\";\r\n        this._maskRulesChain.clear(this._normalizeChainArguments());\r\n        var chainArgs = {\r\n            length: value.length\r\n        };\r\n        chainArgs[this._isMaskedValueMode() ? \"text\" : \"value\"] = value;\r\n        this._handleChain(chainArgs);\r\n        this._displayMask()\r\n    },\r\n    _replaceSelectedText: function(text, selection, char) {\r\n        if (void 0 === char) {\r\n            return text\r\n        }\r\n        var textBefore = text.slice(0, selection.start);\r\n        var textAfter = text.slice(selection.end);\r\n        var edited = textBefore + char + textAfter;\r\n        return edited\r\n    },\r\n    _isMaskedValueMode: function() {\r\n        return this.option(\"useMaskedValue\")\r\n    },\r\n    _displayMask: function(caret) {\r\n        caret = caret || this._caret();\r\n        this._renderValue();\r\n        this._caret(caret)\r\n    },\r\n    _isValueEmpty: function() {\r\n        return stringUtils.isEmpty(this._value)\r\n    },\r\n    _shouldShowMask: function() {\r\n        var showMaskMode = this.option(\"showMaskMode\");\r\n        if (\"onFocus\" === showMaskMode) {\r\n            return focused(this._input()) || !this._isValueEmpty()\r\n        }\r\n        return true\r\n    },\r\n    _showMaskPlaceholder: function() {\r\n        if (this._shouldShowMask()) {\r\n            var text = this._maskRulesChain.text();\r\n            this.option(\"text\", text);\r\n            if (\"onFocus\" === this.option(\"showMaskMode\")) {\r\n                this._renderDisplayText(text)\r\n            }\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        if (this._maskRulesChain) {\r\n            var text = this._maskRulesChain.text();\r\n            this._showMaskPlaceholder();\r\n            if (this._$hiddenElement) {\r\n                var value = this._maskRulesChain.value();\r\n                var hiddenElementValue = this._isMaskedValueMode() ? text : value;\r\n                this._$hiddenElement.val(!stringUtils.isEmpty(value) ? hiddenElementValue : \"\")\r\n            }\r\n        }\r\n        return this.callBase()\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        if (!this._maskRulesChain) {\r\n            this.callBase.apply(this, arguments);\r\n            return\r\n        }\r\n        this._saveValueChangeEvent(e);\r\n        this.option(\"value\", this._convertToValue().replace(/\\s+$/, \"\"))\r\n    },\r\n    _isControlKeyFired: function(e) {\r\n        return this._isControlKey(eventUtils.normalizeKeyName(e)) || e.ctrlKey || e.metaKey\r\n    },\r\n    _handleChain: function(args) {\r\n        var handledCount = this._maskRulesChain.handle(this._normalizeChainArguments(args));\r\n        this._value = this._maskRulesChain.value();\r\n        this._textValue = this._maskRulesChain.text();\r\n        return handledCount\r\n    },\r\n    _normalizeChainArguments: function(args) {\r\n        args = args || {};\r\n        args.index = 0;\r\n        args.fullText = this._maskRulesChain.text();\r\n        return args\r\n    },\r\n    _convertToValue: function(text) {\r\n        if (this._isMaskedValueMode()) {\r\n            text = this._replaceMaskCharWithEmpty(text || this._textValue || \"\")\r\n        } else {\r\n            text = text || this._value || \"\"\r\n        }\r\n        return text\r\n    },\r\n    _replaceMaskCharWithEmpty: function(text) {\r\n        return text.replace(new RegExp(this.option(\"maskChar\"), \"g\"), EMPTY_CHAR)\r\n    },\r\n    _maskKeyHandler: function(e, keyHandler) {\r\n        var _this = this;\r\n        if (this.option(\"readOnly\")) {\r\n            return\r\n        }\r\n        this.setForwardDirection();\r\n        e.preventDefault();\r\n        this._handleSelection();\r\n        var previousText = this._input().val();\r\n        var raiseInputEvent = function() {\r\n            if (previousText !== _this._input().val()) {\r\n                _this._maskStrategy.runWithoutEventProcessing(function() {\r\n                    return eventsEngine.trigger(_this._input(), \"input\")\r\n                })\r\n            }\r\n        };\r\n        var handled = keyHandler();\r\n        if (handled) {\r\n            handled.then(raiseInputEvent)\r\n        } else {\r\n            this.setForwardDirection();\r\n            this._adjustCaret();\r\n            this._displayMask();\r\n            this._maskRulesChain.reset();\r\n            raiseInputEvent()\r\n        }\r\n    },\r\n    _handleKey: function(key, direction) {\r\n        this._direction(direction || FORWARD_DIRECTION);\r\n        this._adjustCaret(key);\r\n        this._handleKeyChain(key);\r\n        this._moveCaret()\r\n    },\r\n    _handleSelection: function() {\r\n        if (!this._hasSelection()) {\r\n            return\r\n        }\r\n        var caret = this._caret();\r\n        var emptyChars = new Array(caret.end - caret.start + 1).join(EMPTY_CHAR);\r\n        this._handleKeyChain(emptyChars)\r\n    },\r\n    _handleKeyChain: function(chars) {\r\n        var caret = this._caret();\r\n        var start = this.isForwardDirection() ? caret.start : caret.start - 1;\r\n        var end = this.isForwardDirection() ? caret.end : caret.end - 1;\r\n        var length = start === end ? 1 : end - start;\r\n        this._handleChain({\r\n            text: chars,\r\n            start: start,\r\n            length: length\r\n        })\r\n    },\r\n    _tryMoveCaretBackward: function() {\r\n        this.setBackwardDirection();\r\n        var currentCaret = this._caret().start;\r\n        this._adjustCaret();\r\n        return !currentCaret || currentCaret !== this._caret().start\r\n    },\r\n    _adjustCaret: function(char) {\r\n        var caret = this._maskRulesChain.adjustedCaret(this._caret().start, this.isForwardDirection(), char);\r\n        this._caret({\r\n            start: caret,\r\n            end: caret\r\n        })\r\n    },\r\n    _moveCaret: function() {\r\n        var currentCaret = this._caret().start;\r\n        var maskRuleIndex = currentCaret + (this.isForwardDirection() ? 0 : -1);\r\n        var caret = this._maskRulesChain.isAccepted(maskRuleIndex) ? currentCaret + (this.isForwardDirection() ? 1 : -1) : currentCaret;\r\n        this._caret({\r\n            start: caret,\r\n            end: caret\r\n        })\r\n    },\r\n    _caret: function(position) {\r\n        var $input = this._input();\r\n        if (!$input.length) {\r\n            return\r\n        }\r\n        if (!arguments.length) {\r\n            return caret($input)\r\n        }\r\n        caret($input, position)\r\n    },\r\n    _hasSelection: function() {\r\n        var caret = this._caret();\r\n        return caret.start !== caret.end\r\n    },\r\n    _direction: function(direction) {\r\n        if (!arguments.length) {\r\n            return this._typingDirection\r\n        }\r\n        this._typingDirection = direction\r\n    },\r\n    setForwardDirection: function() {\r\n        this._direction(FORWARD_DIRECTION)\r\n    },\r\n    setBackwardDirection: function() {\r\n        this._direction(BACKWARD_DIRECTION)\r\n    },\r\n    isForwardDirection: function() {\r\n        return this._direction() === FORWARD_DIRECTION\r\n    },\r\n    _clean: function() {\r\n        this._maskStrategy && this._maskStrategy.clean();\r\n        this.callBase()\r\n    },\r\n    _validateMask: function() {\r\n        if (!this._maskRulesChain) {\r\n            return\r\n        }\r\n        var isValid = stringUtils.isEmpty(this.option(\"value\")) || this._maskRulesChain.isValid(this._normalizeChainArguments());\r\n        this.option({\r\n            isValid: isValid,\r\n            validationError: isValid ? null : {\r\n                editorSpecific: true,\r\n                message: this.option(\"maskInvalidMessage\")\r\n            }\r\n        })\r\n    },\r\n    _updateHiddenElement: function() {\r\n        this._removeHiddenElement();\r\n        if (this.option(\"mask\")) {\r\n            this._input().removeAttr(\"name\");\r\n            this._renderHiddenElement()\r\n        }\r\n        this._setSubmitElementName(this.option(\"name\"))\r\n    },\r\n    _updateMaskOption: function() {\r\n        this._updateHiddenElement();\r\n        this._renderMask();\r\n        this._validateMask()\r\n    },\r\n    _processEmptyMask: function(mask) {\r\n        if (mask) {\r\n            return\r\n        }\r\n        var value = this.option(\"value\");\r\n        this.option({\r\n            text: value,\r\n            isValid: true\r\n        });\r\n        this.validationRequest.fire({\r\n            value: value,\r\n            editor: this\r\n        });\r\n        this._renderValue()\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"mask\":\r\n                this._updateMaskOption();\r\n                this._processEmptyMask(args.value);\r\n                break;\r\n            case \"maskChar\":\r\n            case \"maskRules\":\r\n            case \"useMaskedValue\":\r\n                this._updateMaskOption();\r\n                break;\r\n            case \"value\":\r\n                this._renderMaskedValue();\r\n                this._validateMask();\r\n                this.callBase(args);\r\n                this._changedValue = this._input().val();\r\n                break;\r\n            case \"maskInvalidMessage\":\r\n                break;\r\n            case \"showMaskMode\":\r\n                this.option(\"text\", \"\");\r\n                this._renderValue();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nmodule.exports = TextEditorMask;\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\src\\\\Components\\\\Graph.jsx\";\nimport React, { useState } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport axios from \"axios\";\nimport { Chart, ArgumentAxis, ValueAxis, SplineSeries } from \"@devexpress/dx-react-chart-material-ui\";\n\nfunction Graph(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        history = _useState2[0],\n        setHist = _useState2[1];\n\n  const SetH = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var rec;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios({\n              \"method\": \"get\",\n              \"url\": \"https://corona.lmao.ninja/v2/historical\"\n            }).then(response => {\n              const Timeline = response.data;\n              return Timeline;\n            }).catch(error => {\n              console.log(error);\n            });\n\n          case 2:\n            rec = _context.sent;\n            setHist(rec);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function SetH() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  SetH();\n  const info = history.filter(rec => rec.country === props.name);\n\n  function getData(record) {\n    const newData = record.timeline.cases;\n    const data = [];\n    const dates = Object.keys(newData);\n    var i = 0;\n    var date;\n\n    for (date in dates) {\n      console.log(i++);\n      console.log(newData[date]); // if(newData[date]>0)\n      //   data =  [\n      //     ...date,\n      //     {argument:date , value: newData[date]}];\n    } // console.log(data);\n\n\n    return /*#__PURE__*/React.createElement(Chart, {\n      data: data,\n      width: 350,\n      height: 350,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ArgumentAxis, {\n      showGrid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ValueAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(SplineSeries, {\n      valueField: \"value\",\n      argumentField: \"argument\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, info.map(getData));\n}\n\nexport default Graph;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/src/Components/Graph.jsx"],"names":["React","useState","Paper","axios","Chart","ArgumentAxis","ValueAxis","SplineSeries","Graph","props","history","setHist","SetH","then","response","Timeline","data","catch","error","console","log","rec","info","filter","country","name","getData","record","newData","timeline","cases","dates","Object","keys","i","date","map"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,KADF,EAEEC,YAFF,EAGEC,SAHF,EAIEC,YAJF,QAKO,wCALP;;AAOA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA,oBAEOR,QAAQ,CAAC,EAAD,CAFf;AAAA;AAAA,QAEbS,OAFa;AAAA,QAEJC,OAFI;;AAIpB,QAAMC,IAAI;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACOT,KAAK,CAAC;AACtB,wBAAU,KADY;AAEtB,qBAAO;AAFe,aAAD,CAAL,CAGjBU,IAHiB,CAGXC,QAAD,IAAY;AACd,oBAAMC,QAAQ,GAAGD,QAAQ,CAACE,IAA1B;AACA,qBAAOD,QAAP;AACH,aANiB,EAOjBE,KAPiB,CAOVC,KAAD,IAAS;AACZC,cAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACL,aATmB,CADP;;AAAA;AACLG,YAAAA,GADK;AAWbV,YAAAA,OAAO,CAACU,GAAD,CAAP;;AAXa;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAJT,IAAI;AAAA;AAAA;AAAA,KAAV;;AAaAA,EAAAA,IAAI;AAEJ,QAAMU,IAAI,GAAGZ,OAAO,CAACa,MAAR,CAAgBF,GAAD,IAAQA,GAAG,CAACG,OAAJ,KAAcf,KAAK,CAACgB,IAA3C,CAAb;;AAEA,WAASC,OAAT,CAAiBC,MAAjB,EAAyB;AACvB,UAAMC,OAAO,GAAGD,MAAM,CAACE,QAAP,CAAgBC,KAAhC;AACA,UAAMd,IAAI,GAAG,EAAb;AACA,UAAMe,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYL,OAAZ,CAAd;AACA,QAAIM,CAAC,GAAE,CAAP;AACA,QAAIC,IAAJ;;AACA,SAAIA,IAAJ,IAAYJ,KAAZ,EAAmB;AACjBZ,MAAAA,OAAO,CAACC,GAAR,CAAYc,CAAC,EAAb;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAYQ,OAAO,CAACO,IAAD,CAAnB,EAFiB,CAIjB;AACA;AACA;AACA;AACD,KAdsB,CAevB;;;AACA,wBACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAEnB,IAAb;AAAmB,MAAA,KAAK,EAAE,GAA1B;AAA+B,MAAA,MAAM,EAAE,GAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AAAc,MAAA,QAAQ,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAIE,oBAAC,YAAD;AAAc,MAAA,UAAU,EAAC,OAAzB;AAAiC,MAAA,aAAa,EAAC,UAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AASD;;AAED,sBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGM,IAAI,CAACc,GAAL,CAASV,OAAT,CAFH,CADF;AAOD;;AAED,eAAelB,KAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Chart,\r\n  ArgumentAxis,\r\n  ValueAxis,\r\n  SplineSeries\r\n} from \"@devexpress/dx-react-chart-material-ui\";\r\n\r\nfunction Graph(props) {\r\n\r\n  const [history, setHist] = useState([]);\r\n\r\n  const SetH = async () => {\r\n    const rec = await axios({\r\n      \"method\": \"get\",\r\n      \"url\": \"https://corona.lmao.ninja/v2/historical\"})\r\n    .then((response)=>{\r\n        const Timeline = response.data;\r\n        return Timeline;\r\n    })\r\n    .catch((error)=>{\r\n        console.log(error)\r\n  });\r\n  setHist(rec);\r\n  }\r\n  SetH();\r\n\r\n  const info = history.filter((rec)=>(rec.country===props.name));\r\n\r\n  function getData(record) {\r\n    const newData = record.timeline.cases;\r\n    const data = []\r\n    const dates = Object.keys(newData);\r\n    var i =0;\r\n    var date;\r\n    for(date in dates) {\r\n      console.log(i++);\r\n      console.log(newData[date])\r\n      \r\n      // if(newData[date]>0)\r\n      //   data =  [\r\n      //     ...date,\r\n      //     {argument:date , value: newData[date]}];\r\n    }\r\n    // console.log(data);\r\n    return (\r\n      <Chart data={data} width={350} height={350}>\r\n        <ArgumentAxis showGrid />\r\n        <ValueAxis />\r\n\r\n        <SplineSeries valueField=\"value\" argumentField=\"argument\" />\r\n      </Chart>\r\n    )\r\n    \r\n  }\r\n\r\n  return (\r\n    <Paper>\r\n\r\n      {info.map(getData)}\r\n      \r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Graph;"]},"metadata":{},"sourceType":"module"}
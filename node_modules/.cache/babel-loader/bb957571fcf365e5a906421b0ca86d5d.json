{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/data.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar errors = require(\"../errors\");\n\nvar Class = require(\"../class\");\n\nvar objectUtils = require(\"./object\");\n\nvar typeUtils = require(\"./type\");\n\nvar each = require(\"./iterator\").each;\n\nvar variableWrapper = require(\"./variable_wrapper\");\n\nvar unwrapVariable = variableWrapper.unwrap;\nvar isWrapped = variableWrapper.isWrapped;\nvar assign = variableWrapper.assign;\n\nvar bracketsToDots = function bracketsToDots(expr) {\n  return expr.replace(/\\[/g, \".\").replace(/\\]/g, \"\");\n};\n\nvar readPropValue = function readPropValue(obj, propName, options) {\n  options = options || {};\n\n  if (\"this\" === propName) {\n    return unwrap(obj, options);\n  }\n\n  return unwrap(obj[propName], options);\n};\n\nvar assignPropValue = function assignPropValue(obj, propName, value, options) {\n  if (\"this\" === propName) {\n    throw new errors.Error(\"E4016\");\n  }\n\n  var propValue = obj[propName];\n\n  if (options.unwrapObservables && isWrapped(propValue)) {\n    assign(propValue, value);\n  } else {\n    obj[propName] = value;\n  }\n};\n\nvar prepareOptions = function prepareOptions(options) {\n  options = options || {};\n  options.unwrapObservables = void 0 !== options.unwrapObservables ? options.unwrapObservables : true;\n  return options;\n};\n\nvar unwrap = function unwrap(value, options) {\n  return options.unwrapObservables ? unwrapVariable(value) : value;\n};\n\nvar compileGetter = function compileGetter(expr) {\n  if (arguments.length > 1) {\n    expr = [].slice.call(arguments);\n  }\n\n  if (!expr || \"this\" === expr) {\n    return function (obj) {\n      return obj;\n    };\n  }\n\n  if (\"string\" === typeof expr) {\n    expr = bracketsToDots(expr);\n    var path = expr.split(\".\");\n    return function (obj, options) {\n      options = prepareOptions(options);\n      var functionAsIs = options.functionsAsIs;\n      var hasDefaultValue = (\"defaultValue\" in options);\n      var current = unwrap(obj, options);\n\n      for (var i = 0; i < path.length; i++) {\n        if (!current) {\n          if (null == current && hasDefaultValue) {\n            return options.defaultValue;\n          }\n\n          break;\n        }\n\n        var pathPart = path[i];\n\n        if (hasDefaultValue && typeUtils.isObject(current) && !(pathPart in current)) {\n          return options.defaultValue;\n        }\n\n        var next = unwrap(current[pathPart], options);\n\n        if (!functionAsIs && typeUtils.isFunction(next)) {\n          next = next.call(current);\n        }\n\n        current = next;\n      }\n\n      return current;\n    };\n  }\n\n  if (Array.isArray(expr)) {\n    return combineGetters(expr);\n  }\n\n  if (typeUtils.isFunction(expr)) {\n    return expr;\n  }\n};\n\nvar combineGetters = function combineGetters(getters) {\n  var compiledGetters = {};\n\n  for (var i = 0, l = getters.length; i < l; i++) {\n    var getter = getters[i];\n    compiledGetters[getter] = compileGetter(getter);\n  }\n\n  return function (obj, options) {\n    var result;\n    each(compiledGetters, function (name) {\n      var value = this(obj, options);\n      var current;\n      var path;\n      var pathItem;\n      var last;\n      var i;\n\n      if (void 0 === value) {\n        return;\n      }\n\n      current = result || (result = {});\n      path = name.split(\".\");\n      last = path.length - 1;\n\n      for (i = 0; i < last; i++) {\n        pathItem = path[i];\n\n        if (!(pathItem in current)) {\n          current[pathItem] = {};\n        }\n\n        current = current[pathItem];\n      }\n\n      current[path[last]] = value;\n    });\n    return result;\n  };\n};\n\nvar ensurePropValueDefined = function ensurePropValueDefined(obj, propName, value, options) {\n  if (typeUtils.isDefined(value)) {\n    return value;\n  }\n\n  var newValue = {};\n  assignPropValue(obj, propName, newValue, options);\n  return newValue;\n};\n\nvar compileSetter = function compileSetter(expr) {\n  expr = bracketsToDots(expr || \"this\").split(\".\");\n  var lastLevelIndex = expr.length - 1;\n  return function (obj, value, options) {\n    options = prepareOptions(options);\n    var currentValue = unwrap(obj, options);\n    expr.forEach(function (propertyName, levelIndex) {\n      var propertyValue = readPropValue(currentValue, propertyName, options);\n      var isPropertyFunc = !options.functionsAsIs && typeUtils.isFunction(propertyValue) && !isWrapped(propertyValue);\n\n      if (levelIndex === lastLevelIndex) {\n        if (options.merge && typeUtils.isPlainObject(value) && (!typeUtils.isDefined(propertyValue) || typeUtils.isPlainObject(propertyValue))) {\n          propertyValue = ensurePropValueDefined(currentValue, propertyName, propertyValue, options);\n          objectUtils.deepExtendArraySafe(propertyValue, value, false, true);\n        } else {\n          if (isPropertyFunc) {\n            currentValue[propertyName](value);\n          } else {\n            assignPropValue(currentValue, propertyName, value, options);\n          }\n        }\n      } else {\n        propertyValue = ensurePropValueDefined(currentValue, propertyName, propertyValue, options);\n\n        if (isPropertyFunc) {\n          propertyValue = propertyValue.call(currentValue);\n        }\n\n        currentValue = propertyValue;\n      }\n    });\n  };\n};\n\nvar toComparable = function toComparable(value, caseSensitive) {\n  if (value instanceof Date) {\n    return value.getTime();\n  }\n\n  if (value && value instanceof Class && value.valueOf) {\n    return value.valueOf();\n  }\n\n  if (!caseSensitive && \"string\" === typeof value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n};\n\nexports.compileGetter = compileGetter;\nexports.compileSetter = compileSetter;\nexports.toComparable = toComparable;\nexports.bracketsToDots = bracketsToDots;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/core/utils/data.js"],"names":["errors","require","Class","objectUtils","typeUtils","each","variableWrapper","unwrapVariable","unwrap","isWrapped","assign","bracketsToDots","expr","replace","readPropValue","obj","propName","options","assignPropValue","value","Error","propValue","unwrapObservables","prepareOptions","compileGetter","arguments","length","slice","call","path","split","functionAsIs","functionsAsIs","hasDefaultValue","current","i","defaultValue","pathPart","isObject","next","isFunction","Array","isArray","combineGetters","getters","compiledGetters","l","getter","result","name","pathItem","last","ensurePropValueDefined","isDefined","newValue","compileSetter","lastLevelIndex","currentValue","forEach","propertyName","levelIndex","propertyValue","isPropertyFunc","merge","isPlainObject","deepExtendArraySafe","toComparable","caseSensitive","Date","getTime","valueOf","toLowerCase","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (core/utils/data.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar errors = require(\"../errors\");\r\nvar Class = require(\"../class\");\r\nvar objectUtils = require(\"./object\");\r\nvar typeUtils = require(\"./type\");\r\nvar each = require(\"./iterator\").each;\r\nvar variableWrapper = require(\"./variable_wrapper\");\r\nvar unwrapVariable = variableWrapper.unwrap;\r\nvar isWrapped = variableWrapper.isWrapped;\r\nvar assign = variableWrapper.assign;\r\nvar bracketsToDots = function(expr) {\r\n    return expr.replace(/\\[/g, \".\").replace(/\\]/g, \"\")\r\n};\r\nvar readPropValue = function(obj, propName, options) {\r\n    options = options || {};\r\n    if (\"this\" === propName) {\r\n        return unwrap(obj, options)\r\n    }\r\n    return unwrap(obj[propName], options)\r\n};\r\nvar assignPropValue = function(obj, propName, value, options) {\r\n    if (\"this\" === propName) {\r\n        throw new errors.Error(\"E4016\")\r\n    }\r\n    var propValue = obj[propName];\r\n    if (options.unwrapObservables && isWrapped(propValue)) {\r\n        assign(propValue, value)\r\n    } else {\r\n        obj[propName] = value\r\n    }\r\n};\r\nvar prepareOptions = function(options) {\r\n    options = options || {};\r\n    options.unwrapObservables = void 0 !== options.unwrapObservables ? options.unwrapObservables : true;\r\n    return options\r\n};\r\nvar unwrap = function(value, options) {\r\n    return options.unwrapObservables ? unwrapVariable(value) : value\r\n};\r\nvar compileGetter = function(expr) {\r\n    if (arguments.length > 1) {\r\n        expr = [].slice.call(arguments)\r\n    }\r\n    if (!expr || \"this\" === expr) {\r\n        return function(obj) {\r\n            return obj\r\n        }\r\n    }\r\n    if (\"string\" === typeof expr) {\r\n        expr = bracketsToDots(expr);\r\n        var path = expr.split(\".\");\r\n        return function(obj, options) {\r\n            options = prepareOptions(options);\r\n            var functionAsIs = options.functionsAsIs;\r\n            var hasDefaultValue = \"defaultValue\" in options;\r\n            var current = unwrap(obj, options);\r\n            for (var i = 0; i < path.length; i++) {\r\n                if (!current) {\r\n                    if (null == current && hasDefaultValue) {\r\n                        return options.defaultValue\r\n                    }\r\n                    break\r\n                }\r\n                var pathPart = path[i];\r\n                if (hasDefaultValue && typeUtils.isObject(current) && !(pathPart in current)) {\r\n                    return options.defaultValue\r\n                }\r\n                var next = unwrap(current[pathPart], options);\r\n                if (!functionAsIs && typeUtils.isFunction(next)) {\r\n                    next = next.call(current)\r\n                }\r\n                current = next\r\n            }\r\n            return current\r\n        }\r\n    }\r\n    if (Array.isArray(expr)) {\r\n        return combineGetters(expr)\r\n    }\r\n    if (typeUtils.isFunction(expr)) {\r\n        return expr\r\n    }\r\n};\r\nvar combineGetters = function(getters) {\r\n    var compiledGetters = {};\r\n    for (var i = 0, l = getters.length; i < l; i++) {\r\n        var getter = getters[i];\r\n        compiledGetters[getter] = compileGetter(getter)\r\n    }\r\n    return function(obj, options) {\r\n        var result;\r\n        each(compiledGetters, function(name) {\r\n            var value = this(obj, options);\r\n            var current;\r\n            var path;\r\n            var pathItem;\r\n            var last;\r\n            var i;\r\n            if (void 0 === value) {\r\n                return\r\n            }\r\n            current = result || (result = {});\r\n            path = name.split(\".\");\r\n            last = path.length - 1;\r\n            for (i = 0; i < last; i++) {\r\n                pathItem = path[i];\r\n                if (!(pathItem in current)) {\r\n                    current[pathItem] = {}\r\n                }\r\n                current = current[pathItem]\r\n            }\r\n            current[path[last]] = value\r\n        });\r\n        return result\r\n    }\r\n};\r\nvar ensurePropValueDefined = function(obj, propName, value, options) {\r\n    if (typeUtils.isDefined(value)) {\r\n        return value\r\n    }\r\n    var newValue = {};\r\n    assignPropValue(obj, propName, newValue, options);\r\n    return newValue\r\n};\r\nvar compileSetter = function(expr) {\r\n    expr = bracketsToDots(expr || \"this\").split(\".\");\r\n    var lastLevelIndex = expr.length - 1;\r\n    return function(obj, value, options) {\r\n        options = prepareOptions(options);\r\n        var currentValue = unwrap(obj, options);\r\n        expr.forEach(function(propertyName, levelIndex) {\r\n            var propertyValue = readPropValue(currentValue, propertyName, options);\r\n            var isPropertyFunc = !options.functionsAsIs && typeUtils.isFunction(propertyValue) && !isWrapped(propertyValue);\r\n            if (levelIndex === lastLevelIndex) {\r\n                if (options.merge && typeUtils.isPlainObject(value) && (!typeUtils.isDefined(propertyValue) || typeUtils.isPlainObject(propertyValue))) {\r\n                    propertyValue = ensurePropValueDefined(currentValue, propertyName, propertyValue, options);\r\n                    objectUtils.deepExtendArraySafe(propertyValue, value, false, true)\r\n                } else {\r\n                    if (isPropertyFunc) {\r\n                        currentValue[propertyName](value)\r\n                    } else {\r\n                        assignPropValue(currentValue, propertyName, value, options)\r\n                    }\r\n                }\r\n            } else {\r\n                propertyValue = ensurePropValueDefined(currentValue, propertyName, propertyValue, options);\r\n                if (isPropertyFunc) {\r\n                    propertyValue = propertyValue.call(currentValue)\r\n                }\r\n                currentValue = propertyValue\r\n            }\r\n        })\r\n    }\r\n};\r\nvar toComparable = function(value, caseSensitive) {\r\n    if (value instanceof Date) {\r\n        return value.getTime()\r\n    }\r\n    if (value && value instanceof Class && value.valueOf) {\r\n        return value.valueOf()\r\n    }\r\n    if (!caseSensitive && \"string\" === typeof value) {\r\n        return value.toLowerCase()\r\n    }\r\n    return value\r\n};\r\nexports.compileGetter = compileGetter;\r\nexports.compileSetter = compileSetter;\r\nexports.toComparable = toComparable;\r\nexports.bracketsToDots = bracketsToDots;\r\n"]},"metadata":{},"sourceType":"script"}
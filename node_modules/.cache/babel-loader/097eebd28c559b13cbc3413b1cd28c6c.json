{"ast":null,"code":"/**\r\n * DevExtreme (ui/number_box/number_box.base.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../core/renderer\");\n\nvar domAdapter = require(\"../../core/dom_adapter\");\n\nvar eventsEngine = require(\"../../events/core/events_engine\");\n\nvar commonUtils = require(\"../../core/utils/common\");\n\nvar typeUtils = require(\"../../core/utils/type\");\n\nvar mathUtils = require(\"../../core/utils/math\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar inArray = require(\"../../core/utils/array\").inArray;\n\nvar devices = require(\"../../core/devices\");\n\nvar browser = require(\"../../core/utils/browser\");\n\nvar TextEditor = require(\"../text_box/ui.text_editor\");\n\nvar eventUtils = require(\"../../events/utils\");\n\nvar SpinButtons = require(\"./number_box.spins\").default;\n\nvar messageLocalization = require(\"../../localization/message\");\n\nvar Deferred = require(\"../../core/utils/deferred\").Deferred;\n\nvar math = Math;\nvar WIDGET_CLASS = \"dx-numberbox\";\nvar FIREFOX_CONTROL_KEYS = [\"tab\", \"del\", \"backspace\", \"leftArrow\", \"rightArrow\", \"home\", \"end\", \"enter\"];\nvar FORCE_VALUECHANGE_EVENT_NAMESPACE = \"NumberBoxForceValueChange\";\nvar NumberBoxBase = TextEditor.inherit({\n  _supportedKeys: function _supportedKeys() {\n    return extend(this.callBase(), {\n      upArrow: function upArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._spinUpChangeHandler(e);\n      },\n      downArrow: function downArrow(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._spinDownChangeHandler(e);\n      },\n      enter: function enter() {}\n    });\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return extend(this.callBase(), {\n      value: 0,\n      min: void 0,\n      max: void 0,\n      step: 1,\n      showSpinButtons: false,\n      useLargeSpinButtons: true,\n      mode: \"text\",\n      invalidValueMessage: messageLocalization.format(\"dxNumberBox-invalidValueMessage\"),\n      buttons: void 0\n    });\n  },\n  _getDefaultButtons: function _getDefaultButtons() {\n    return this.callBase().concat([{\n      name: \"spins\",\n      Ctor: SpinButtons\n    }]);\n  },\n  _isSupportInputMode: function _isSupportInputMode() {\n    var version = parseFloat(browser.version);\n    return browser.chrome && version >= 66 || browser.safari && version >= 12 || browser.msie && version >= 75;\n  },\n  _defaultOptionsRules: function _defaultOptionsRules() {\n    return this.callBase().concat([{\n      device: function device() {\n        return devices.real().generic && !devices.isSimulator();\n      },\n      options: {\n        useLargeSpinButtons: false\n      }\n    }, {\n      device: function () {\n        return \"desktop\" !== devices.real().deviceType && !this._isSupportInputMode();\n      }.bind(this),\n      options: {\n        mode: \"number\"\n      }\n    }]);\n  },\n  _initMarkup: function _initMarkup() {\n    this._renderSubmitElement();\n\n    this.$element().addClass(WIDGET_CLASS);\n    this.callBase();\n  },\n  _applyInputAttributes: function _applyInputAttributes($input, customAttributes) {\n    $input.attr(\"inputmode\", \"decimal\");\n    this.callBase($input, customAttributes);\n  },\n  _renderContentImpl: function _renderContentImpl() {\n    this.option(\"isValid\") && this._validateValue(this.option(\"value\"));\n    this.setAria(\"role\", \"spinbutton\");\n  },\n  _renderSubmitElement: function _renderSubmitElement() {\n    this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n\n    this._setSubmitValue(this.option(\"value\"));\n  },\n  _setSubmitValue: function _setSubmitValue(value) {\n    this._getSubmitElement().val(commonUtils.applyServerDecimalSeparator(value));\n  },\n  _getSubmitElement: function _getSubmitElement() {\n    return this._$submitElement;\n  },\n  _keyPressHandler: function _keyPressHandler(e) {\n    this.callBase(e);\n    var char = eventUtils.getChar(e);\n    var validCharRegExp = /[\\d.,eE\\-+]|Subtract/;\n    var isInputCharValid = validCharRegExp.test(char);\n\n    if (!isInputCharValid) {\n      var keyName = eventUtils.normalizeKeyName(e);\n\n      if (e.metaKey || e.ctrlKey || keyName && inArray(keyName, FIREFOX_CONTROL_KEYS) >= 0) {\n        return;\n      }\n\n      e.preventDefault();\n      return false;\n    }\n\n    this._keyPressed = true;\n  },\n  _onMouseWheel: function _onMouseWheel(dxEvent) {\n    dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent);\n  },\n  _renderValue: function _renderValue() {\n    var inputValue = this._input().val();\n\n    var value = this.option(\"value\");\n\n    if (!inputValue.length || Number(inputValue) !== value) {\n      this._forceValueRender();\n\n      this._toggleEmptinessEventHandler();\n    }\n\n    var valueText = typeUtils.isDefined(value) ? null : messageLocalization.format(\"dxNumberBox-noDataText\");\n    this.setAria({\n      valuenow: commonUtils.ensureDefined(value, \"\"),\n      valuetext: valueText\n    });\n    this.option(\"text\", this._input().val());\n\n    this._updateButtons();\n\n    return new Deferred().resolve();\n  },\n  _forceValueRender: function _forceValueRender() {\n    var value = this.option(\"value\");\n    var number = Number(value);\n    var formattedValue = isNaN(number) ? \"\" : this._applyDisplayValueFormatter(value);\n\n    this._renderDisplayText(formattedValue);\n  },\n  _applyDisplayValueFormatter: function _applyDisplayValueFormatter(value) {\n    return this.option(\"displayValueFormatter\")(value);\n  },\n  _renderProps: function _renderProps() {\n    this.callBase();\n\n    this._input().prop({\n      min: this.option(\"min\"),\n      max: this.option(\"max\"),\n      step: this.option(\"step\")\n    });\n\n    this.setAria({\n      valuemin: commonUtils.ensureDefined(this.option(\"min\"), \"\"),\n      valuemax: commonUtils.ensureDefined(this.option(\"max\"), \"\")\n    });\n  },\n  _spinButtonsPointerDownHandler: function _spinButtonsPointerDownHandler() {\n    var $input = this._input();\n\n    if (!this.option(\"useLargeSpinButtons\") && domAdapter.getActiveElement() !== $input[0]) {\n      eventsEngine.trigger($input, \"focus\");\n    }\n  },\n  _spinUpChangeHandler: function _spinUpChangeHandler(e) {\n    if (!this.option(\"readOnly\")) {\n      this._spinValueChange(1, e.event || e);\n    }\n  },\n  _spinDownChangeHandler: function _spinDownChangeHandler(e) {\n    if (!this.option(\"readOnly\")) {\n      this._spinValueChange(-1, e.event || e);\n    }\n  },\n  _spinValueChange: function _spinValueChange(sign, dxEvent) {\n    var step = parseFloat(this.option(\"step\"));\n\n    if (0 === step) {\n      return;\n    }\n\n    var value = parseFloat(this._normalizeInputValue()) || 0;\n    value = this._correctRounding(value, step * sign);\n    var min = this.option(\"min\");\n    var max = this.option(\"max\");\n\n    if (void 0 !== min) {\n      value = Math.max(min, value);\n    }\n\n    if (void 0 !== max) {\n      value = Math.min(max, value);\n    }\n\n    this._saveValueChangeEvent(dxEvent);\n\n    this.option(\"value\", value);\n  },\n  _correctRounding: function _correctRounding(value, step) {\n    var regex = /[,.](.*)/;\n    var isFloatValue = regex.test(value);\n    var isFloatStep = regex.test(step);\n\n    if (isFloatValue || isFloatStep) {\n      var valueAccuracy = isFloatValue ? regex.exec(value)[0].length : 0;\n      var stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0;\n      var accuracy = math.max(valueAccuracy, stepAccuracy);\n      value = this._round(value + step, accuracy);\n      return value;\n    }\n\n    return value + step;\n  },\n  _round: function _round(value, precision) {\n    precision = precision || 0;\n    var multiplier = Math.pow(10, precision);\n    value *= multiplier;\n    value = Math.round(value) / multiplier;\n    return value;\n  },\n  _renderValueChangeEvent: function _renderValueChangeEvent() {\n    this.callBase();\n    var forceValueChangeEvent = eventUtils.addNamespace(\"focusout\", FORCE_VALUECHANGE_EVENT_NAMESPACE);\n    eventsEngine.off(this.element(), forceValueChangeEvent);\n    eventsEngine.on(this.element(), forceValueChangeEvent, this._forceRefreshInputValue.bind(this));\n  },\n  _forceRefreshInputValue: function _forceRefreshInputValue() {\n    if (\"number\" === this.option(\"mode\")) {\n      return;\n    }\n\n    var $input = this._input();\n\n    var formattedValue = this._applyDisplayValueFormatter(this.option(\"value\"));\n\n    $input.val(null);\n    $input.val(formattedValue);\n  },\n  _valueChangeEventHandler: function _valueChangeEventHandler(e) {\n    var $input = this._input();\n\n    var inputValue = this._normalizeText();\n\n    var value = this._parseValue(inputValue);\n\n    var valueHasDigits = \".\" !== inputValue && \"-\" !== inputValue;\n\n    if (this._isValueValid() && !this._validateValue(value)) {\n      $input.val(this._applyDisplayValueFormatter(value));\n      return;\n    }\n\n    if (valueHasDigits) {\n      this.callBase(e, isNaN(value) ? null : value);\n    }\n\n    this._applyValueBoundaries(inputValue, value);\n\n    this.validationRequest.fire({\n      value: value,\n      editor: this\n    });\n  },\n  _applyValueBoundaries: function _applyValueBoundaries(inputValue, parsedValue) {\n    var isValueIncomplete = this._isValueIncomplete(inputValue);\n\n    var isValueCorrect = this._isValueInRange(inputValue);\n\n    if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {\n      if (Number(inputValue) !== parsedValue) {\n        this._input().val(this._applyDisplayValueFormatter(parsedValue));\n      }\n    }\n  },\n  _replaceCommaWithPoint: function _replaceCommaWithPoint(value) {\n    return value.replace(\",\", \".\");\n  },\n  _inputIsInvalid: function _inputIsInvalid() {\n    var isNumberMode = \"number\" === this.option(\"mode\");\n\n    var validityState = this._input().get(0).validity;\n\n    return isNumberMode && validityState && validityState.badInput;\n  },\n  _renderDisplayText: function _renderDisplayText(text) {\n    if (this._inputIsInvalid()) {\n      return;\n    }\n\n    this.callBase(text);\n  },\n  _isValueIncomplete: function _isValueIncomplete(value) {\n    var incompleteRegex = /(^-$)|(^-?\\d*\\.$)|(\\d+e-?$)/i;\n    return incompleteRegex.test(value);\n  },\n  _isValueInRange: function _isValueInRange(value) {\n    return mathUtils.inRange(value, this.option(\"min\"), this.option(\"max\"));\n  },\n  _isNumber: function _isNumber(value) {\n    return null !== this._parseValue(value);\n  },\n  _validateValue: function _validateValue(value) {\n    var inputValue = this._normalizeText();\n\n    var isValueValid = this._isValueValid();\n\n    var isValid = true;\n\n    var isNumber = this._isNumber(inputValue);\n\n    if (isNaN(Number(value))) {\n      isValid = false;\n    }\n\n    if (!value && isValueValid) {\n      isValid = true;\n    } else {\n      if (!isNumber && !isValueValid) {\n        isValid = false;\n      }\n    }\n\n    this.option({\n      isValid: isValid,\n      validationError: isValid ? null : {\n        editorSpecific: true,\n        message: this.option(\"invalidValueMessage\")\n      }\n    });\n    return isValid;\n  },\n  _normalizeInputValue: function _normalizeInputValue() {\n    return this._parseValue(this._normalizeText());\n  },\n  _normalizeText: function _normalizeText() {\n    var value = this._input().val().trim();\n\n    return this._replaceCommaWithPoint(value);\n  },\n  _parseValue: function _parseValue(value) {\n    var number = parseFloat(value);\n\n    if (isNaN(number)) {\n      return null;\n    }\n\n    return mathUtils.fitIntoRange(number, this.option(\"min\"), this.option(\"max\"));\n  },\n  _clearValue: function _clearValue() {\n    if (this._inputIsInvalid()) {\n      this._input().val(\"\");\n\n      this._validateValue();\n    }\n\n    this.callBase();\n  },\n  reset: function reset() {\n    if (null === this.option(\"value\")) {\n      this.option(\"text\", \"\");\n\n      this._renderValue();\n    } else {\n      this.option(\"value\", null);\n    }\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"value\":\n        this._validateValue(args.value);\n\n        this._setSubmitValue(args.value);\n\n        this.callBase(args);\n\n        this._resumeValueChangeAction();\n\n        break;\n\n      case \"step\":\n        this._renderProps();\n\n        break;\n\n      case \"min\":\n      case \"max\":\n        this._renderProps();\n\n        this.option(\"value\", this._parseValue(this.option(\"value\")));\n        break;\n\n      case \"showSpinButtons\":\n      case \"useLargeSpinButtons\":\n        this._updateButtons([\"spins\"]);\n\n        break;\n\n      case \"invalidValueMessage\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nmodule.exports = NumberBoxBase;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/ui/number_box/number_box.base.js"],"names":["$","require","domAdapter","eventsEngine","commonUtils","typeUtils","mathUtils","extend","inArray","devices","browser","TextEditor","eventUtils","SpinButtons","default","messageLocalization","Deferred","math","Math","WIDGET_CLASS","FIREFOX_CONTROL_KEYS","FORCE_VALUECHANGE_EVENT_NAMESPACE","NumberBoxBase","inherit","_supportedKeys","callBase","upArrow","e","preventDefault","stopPropagation","_spinUpChangeHandler","downArrow","_spinDownChangeHandler","enter","_getDefaultOptions","value","min","max","step","showSpinButtons","useLargeSpinButtons","mode","invalidValueMessage","format","buttons","_getDefaultButtons","concat","name","Ctor","_isSupportInputMode","version","parseFloat","chrome","safari","msie","_defaultOptionsRules","device","real","generic","isSimulator","options","deviceType","bind","_initMarkup","_renderSubmitElement","$element","addClass","_applyInputAttributes","$input","customAttributes","attr","_renderContentImpl","option","_validateValue","setAria","_$submitElement","appendTo","_setSubmitValue","_getSubmitElement","val","applyServerDecimalSeparator","_keyPressHandler","char","getChar","validCharRegExp","isInputCharValid","test","keyName","normalizeKeyName","metaKey","ctrlKey","_keyPressed","_onMouseWheel","dxEvent","delta","_spinValueChange","_renderValue","inputValue","_input","length","Number","_forceValueRender","_toggleEmptinessEventHandler","valueText","isDefined","valuenow","ensureDefined","valuetext","_updateButtons","resolve","number","formattedValue","isNaN","_applyDisplayValueFormatter","_renderDisplayText","_renderProps","prop","valuemin","valuemax","_spinButtonsPointerDownHandler","getActiveElement","trigger","event","sign","_normalizeInputValue","_correctRounding","_saveValueChangeEvent","regex","isFloatValue","isFloatStep","valueAccuracy","exec","stepAccuracy","accuracy","_round","precision","multiplier","pow","round","_renderValueChangeEvent","forceValueChangeEvent","addNamespace","off","element","on","_forceRefreshInputValue","_valueChangeEventHandler","_normalizeText","_parseValue","valueHasDigits","_isValueValid","_applyValueBoundaries","validationRequest","fire","editor","parsedValue","isValueIncomplete","_isValueIncomplete","isValueCorrect","_isValueInRange","_replaceCommaWithPoint","replace","_inputIsInvalid","isNumberMode","validityState","get","validity","badInput","text","incompleteRegex","inRange","_isNumber","isValueValid","isValid","isNumber","validationError","editorSpecific","message","trim","fitIntoRange","_clearValue","reset","_optionChanged","args","_resumeValueChangeAction","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/number_box/number_box.base.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\");\r\nvar domAdapter = require(\"../../core/dom_adapter\");\r\nvar eventsEngine = require(\"../../events/core/events_engine\");\r\nvar commonUtils = require(\"../../core/utils/common\");\r\nvar typeUtils = require(\"../../core/utils/type\");\r\nvar mathUtils = require(\"../../core/utils/math\");\r\nvar extend = require(\"../../core/utils/extend\").extend;\r\nvar inArray = require(\"../../core/utils/array\").inArray;\r\nvar devices = require(\"../../core/devices\");\r\nvar browser = require(\"../../core/utils/browser\");\r\nvar TextEditor = require(\"../text_box/ui.text_editor\");\r\nvar eventUtils = require(\"../../events/utils\");\r\nvar SpinButtons = require(\"./number_box.spins\").default;\r\nvar messageLocalization = require(\"../../localization/message\");\r\nvar Deferred = require(\"../../core/utils/deferred\").Deferred;\r\nvar math = Math;\r\nvar WIDGET_CLASS = \"dx-numberbox\";\r\nvar FIREFOX_CONTROL_KEYS = [\"tab\", \"del\", \"backspace\", \"leftArrow\", \"rightArrow\", \"home\", \"end\", \"enter\"];\r\nvar FORCE_VALUECHANGE_EVENT_NAMESPACE = \"NumberBoxForceValueChange\";\r\nvar NumberBoxBase = TextEditor.inherit({\r\n    _supportedKeys: function() {\r\n        return extend(this.callBase(), {\r\n            upArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._spinUpChangeHandler(e)\r\n            },\r\n            downArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._spinDownChangeHandler(e)\r\n            },\r\n            enter: function() {}\r\n        })\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            value: 0,\r\n            min: void 0,\r\n            max: void 0,\r\n            step: 1,\r\n            showSpinButtons: false,\r\n            useLargeSpinButtons: true,\r\n            mode: \"text\",\r\n            invalidValueMessage: messageLocalization.format(\"dxNumberBox-invalidValueMessage\"),\r\n            buttons: void 0\r\n        })\r\n    },\r\n    _getDefaultButtons: function() {\r\n        return this.callBase().concat([{\r\n            name: \"spins\",\r\n            Ctor: SpinButtons\r\n        }])\r\n    },\r\n    _isSupportInputMode: function() {\r\n        var version = parseFloat(browser.version);\r\n        return browser.chrome && version >= 66 || browser.safari && version >= 12 || browser.msie && version >= 75\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return devices.real().generic && !devices.isSimulator()\r\n            },\r\n            options: {\r\n                useLargeSpinButtons: false\r\n            }\r\n        }, {\r\n            device: function() {\r\n                return \"desktop\" !== devices.real().deviceType && !this._isSupportInputMode()\r\n            }.bind(this),\r\n            options: {\r\n                mode: \"number\"\r\n            }\r\n        }])\r\n    },\r\n    _initMarkup: function() {\r\n        this._renderSubmitElement();\r\n        this.$element().addClass(WIDGET_CLASS);\r\n        this.callBase()\r\n    },\r\n    _applyInputAttributes: function($input, customAttributes) {\r\n        $input.attr(\"inputmode\", \"decimal\");\r\n        this.callBase($input, customAttributes)\r\n    },\r\n    _renderContentImpl: function() {\r\n        this.option(\"isValid\") && this._validateValue(this.option(\"value\"));\r\n        this.setAria(\"role\", \"spinbutton\")\r\n    },\r\n    _renderSubmitElement: function() {\r\n        this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\r\n        this._setSubmitValue(this.option(\"value\"))\r\n    },\r\n    _setSubmitValue: function(value) {\r\n        this._getSubmitElement().val(commonUtils.applyServerDecimalSeparator(value))\r\n    },\r\n    _getSubmitElement: function() {\r\n        return this._$submitElement\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        this.callBase(e);\r\n        var char = eventUtils.getChar(e);\r\n        var validCharRegExp = /[\\d.,eE\\-+]|Subtract/;\r\n        var isInputCharValid = validCharRegExp.test(char);\r\n        if (!isInputCharValid) {\r\n            var keyName = eventUtils.normalizeKeyName(e);\r\n            if (e.metaKey || e.ctrlKey || keyName && inArray(keyName, FIREFOX_CONTROL_KEYS) >= 0) {\r\n                return\r\n            }\r\n            e.preventDefault();\r\n            return false\r\n        }\r\n        this._keyPressed = true\r\n    },\r\n    _onMouseWheel: function(dxEvent) {\r\n        dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent)\r\n    },\r\n    _renderValue: function() {\r\n        var inputValue = this._input().val();\r\n        var value = this.option(\"value\");\r\n        if (!inputValue.length || Number(inputValue) !== value) {\r\n            this._forceValueRender();\r\n            this._toggleEmptinessEventHandler()\r\n        }\r\n        var valueText = typeUtils.isDefined(value) ? null : messageLocalization.format(\"dxNumberBox-noDataText\");\r\n        this.setAria({\r\n            valuenow: commonUtils.ensureDefined(value, \"\"),\r\n            valuetext: valueText\r\n        });\r\n        this.option(\"text\", this._input().val());\r\n        this._updateButtons();\r\n        return (new Deferred).resolve()\r\n    },\r\n    _forceValueRender: function() {\r\n        var value = this.option(\"value\");\r\n        var number = Number(value);\r\n        var formattedValue = isNaN(number) ? \"\" : this._applyDisplayValueFormatter(value);\r\n        this._renderDisplayText(formattedValue)\r\n    },\r\n    _applyDisplayValueFormatter: function(value) {\r\n        return this.option(\"displayValueFormatter\")(value)\r\n    },\r\n    _renderProps: function() {\r\n        this.callBase();\r\n        this._input().prop({\r\n            min: this.option(\"min\"),\r\n            max: this.option(\"max\"),\r\n            step: this.option(\"step\")\r\n        });\r\n        this.setAria({\r\n            valuemin: commonUtils.ensureDefined(this.option(\"min\"), \"\"),\r\n            valuemax: commonUtils.ensureDefined(this.option(\"max\"), \"\")\r\n        })\r\n    },\r\n    _spinButtonsPointerDownHandler: function() {\r\n        var $input = this._input();\r\n        if (!this.option(\"useLargeSpinButtons\") && domAdapter.getActiveElement() !== $input[0]) {\r\n            eventsEngine.trigger($input, \"focus\")\r\n        }\r\n    },\r\n    _spinUpChangeHandler: function(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(1, e.event || e)\r\n        }\r\n    },\r\n    _spinDownChangeHandler: function(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(-1, e.event || e)\r\n        }\r\n    },\r\n    _spinValueChange: function(sign, dxEvent) {\r\n        var step = parseFloat(this.option(\"step\"));\r\n        if (0 === step) {\r\n            return\r\n        }\r\n        var value = parseFloat(this._normalizeInputValue()) || 0;\r\n        value = this._correctRounding(value, step * sign);\r\n        var min = this.option(\"min\");\r\n        var max = this.option(\"max\");\r\n        if (void 0 !== min) {\r\n            value = Math.max(min, value)\r\n        }\r\n        if (void 0 !== max) {\r\n            value = Math.min(max, value)\r\n        }\r\n        this._saveValueChangeEvent(dxEvent);\r\n        this.option(\"value\", value)\r\n    },\r\n    _correctRounding: function(value, step) {\r\n        var regex = /[,.](.*)/;\r\n        var isFloatValue = regex.test(value);\r\n        var isFloatStep = regex.test(step);\r\n        if (isFloatValue || isFloatStep) {\r\n            var valueAccuracy = isFloatValue ? regex.exec(value)[0].length : 0;\r\n            var stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0;\r\n            var accuracy = math.max(valueAccuracy, stepAccuracy);\r\n            value = this._round(value + step, accuracy);\r\n            return value\r\n        }\r\n        return value + step\r\n    },\r\n    _round: function(value, precision) {\r\n        precision = precision || 0;\r\n        var multiplier = Math.pow(10, precision);\r\n        value *= multiplier;\r\n        value = Math.round(value) / multiplier;\r\n        return value\r\n    },\r\n    _renderValueChangeEvent: function() {\r\n        this.callBase();\r\n        var forceValueChangeEvent = eventUtils.addNamespace(\"focusout\", FORCE_VALUECHANGE_EVENT_NAMESPACE);\r\n        eventsEngine.off(this.element(), forceValueChangeEvent);\r\n        eventsEngine.on(this.element(), forceValueChangeEvent, this._forceRefreshInputValue.bind(this))\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (\"number\" === this.option(\"mode\")) {\r\n            return\r\n        }\r\n        var $input = this._input();\r\n        var formattedValue = this._applyDisplayValueFormatter(this.option(\"value\"));\r\n        $input.val(null);\r\n        $input.val(formattedValue)\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        var $input = this._input();\r\n        var inputValue = this._normalizeText();\r\n        var value = this._parseValue(inputValue);\r\n        var valueHasDigits = \".\" !== inputValue && \"-\" !== inputValue;\r\n        if (this._isValueValid() && !this._validateValue(value)) {\r\n            $input.val(this._applyDisplayValueFormatter(value));\r\n            return\r\n        }\r\n        if (valueHasDigits) {\r\n            this.callBase(e, isNaN(value) ? null : value)\r\n        }\r\n        this._applyValueBoundaries(inputValue, value);\r\n        this.validationRequest.fire({\r\n            value: value,\r\n            editor: this\r\n        })\r\n    },\r\n    _applyValueBoundaries: function(inputValue, parsedValue) {\r\n        var isValueIncomplete = this._isValueIncomplete(inputValue);\r\n        var isValueCorrect = this._isValueInRange(inputValue);\r\n        if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {\r\n            if (Number(inputValue) !== parsedValue) {\r\n                this._input().val(this._applyDisplayValueFormatter(parsedValue))\r\n            }\r\n        }\r\n    },\r\n    _replaceCommaWithPoint: function(value) {\r\n        return value.replace(\",\", \".\")\r\n    },\r\n    _inputIsInvalid: function() {\r\n        var isNumberMode = \"number\" === this.option(\"mode\");\r\n        var validityState = this._input().get(0).validity;\r\n        return isNumberMode && validityState && validityState.badInput\r\n    },\r\n    _renderDisplayText: function(text) {\r\n        if (this._inputIsInvalid()) {\r\n            return\r\n        }\r\n        this.callBase(text)\r\n    },\r\n    _isValueIncomplete: function(value) {\r\n        var incompleteRegex = /(^-$)|(^-?\\d*\\.$)|(\\d+e-?$)/i;\r\n        return incompleteRegex.test(value)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        return mathUtils.inRange(value, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _isNumber: function(value) {\r\n        return null !== this._parseValue(value)\r\n    },\r\n    _validateValue: function(value) {\r\n        var inputValue = this._normalizeText();\r\n        var isValueValid = this._isValueValid();\r\n        var isValid = true;\r\n        var isNumber = this._isNumber(inputValue);\r\n        if (isNaN(Number(value))) {\r\n            isValid = false\r\n        }\r\n        if (!value && isValueValid) {\r\n            isValid = true\r\n        } else {\r\n            if (!isNumber && !isValueValid) {\r\n                isValid = false\r\n            }\r\n        }\r\n        this.option({\r\n            isValid: isValid,\r\n            validationError: isValid ? null : {\r\n                editorSpecific: true,\r\n                message: this.option(\"invalidValueMessage\")\r\n            }\r\n        });\r\n        return isValid\r\n    },\r\n    _normalizeInputValue: function() {\r\n        return this._parseValue(this._normalizeText())\r\n    },\r\n    _normalizeText: function() {\r\n        var value = this._input().val().trim();\r\n        return this._replaceCommaWithPoint(value)\r\n    },\r\n    _parseValue: function(value) {\r\n        var number = parseFloat(value);\r\n        if (isNaN(number)) {\r\n            return null\r\n        }\r\n        return mathUtils.fitIntoRange(number, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _clearValue: function() {\r\n        if (this._inputIsInvalid()) {\r\n            this._input().val(\"\");\r\n            this._validateValue()\r\n        }\r\n        this.callBase()\r\n    },\r\n    reset: function() {\r\n        if (null === this.option(\"value\")) {\r\n            this.option(\"text\", \"\");\r\n            this._renderValue()\r\n        } else {\r\n            this.option(\"value\", null)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._validateValue(args.value);\r\n                this._setSubmitValue(args.value);\r\n                this.callBase(args);\r\n                this._resumeValueChangeAction();\r\n                break;\r\n            case \"step\":\r\n                this._renderProps();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._renderProps();\r\n                this.option(\"value\", this._parseValue(this.option(\"value\")));\r\n                break;\r\n            case \"showSpinButtons\":\r\n            case \"useLargeSpinButtons\":\r\n                this._updateButtons([\"spins\"]);\r\n                break;\r\n            case \"invalidValueMessage\":\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nmodule.exports = NumberBoxBase;\r\n"]},"metadata":{},"sourceType":"script"}
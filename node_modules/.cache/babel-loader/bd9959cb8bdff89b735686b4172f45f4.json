{"ast":null,"code":"/**\r\n * DevExtreme (viz/translators/category_translator.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar isDefined = require(\"../../core/utils/type\").isDefined;\n\nvar adjust = require(\"../../core/utils/math\").adjust;\n\nvar round = Math.round;\n\nfunction getValue(value) {\n  return value;\n}\n\nmodule.exports = {\n  translate: function translate(category, directionOffset) {\n    var that = this;\n    var canvasOptions = that._canvasOptions;\n\n    var categoryIndex = that._categoriesToPoints[category.valueOf()];\n\n    var stickDelta;\n    var specialValue = that.translateSpecialCase(category);\n    var startPointIndex = canvasOptions.startPointIndex || 0;\n    var stickInterval = that._options.stick ? 0 : .5;\n\n    if (isDefined(specialValue)) {\n      return round(specialValue);\n    }\n\n    if (!categoryIndex && 0 !== categoryIndex) {\n      return null;\n    }\n\n    directionOffset = directionOffset || 0;\n    stickDelta = categoryIndex + stickInterval - startPointIndex + .5 * directionOffset;\n    return round(that._calculateProjection(canvasOptions.interval * stickDelta));\n  },\n  getInterval: function getInterval() {\n    return this._canvasOptions.interval;\n  },\n  getEventScale: function getEventScale(zoomEvent) {\n    var scale = zoomEvent.deltaScale || 1;\n    return 1 - (1 - scale) / (.75 + this.visibleCategories.length / this._categories.length);\n  },\n  zoom: function zoom(translate, scale) {\n    var that = this;\n    var categories = that._categories;\n    var canvasOptions = that._canvasOptions;\n    var stick = that._options.stick;\n    var invert = canvasOptions.invert;\n    var interval = canvasOptions.interval * scale;\n    var translateCategories = translate / interval;\n    var visibleCount = (that.visibleCategories || []).length;\n    var startCategoryIndex = parseInt((canvasOptions.startPointIndex || 0) + translateCategories + .5);\n    var categoriesLength = parseInt(adjust(canvasOptions.canvasLength / interval) + (stick ? 1 : 0)) || 1;\n    var endCategoryIndex;\n    var newVisibleCategories;\n    var newInterval;\n\n    if (invert) {\n      startCategoryIndex = parseInt((canvasOptions.startPointIndex || 0) + visibleCount - translateCategories + .5) - categoriesLength;\n    }\n\n    if (startCategoryIndex < 0) {\n      startCategoryIndex = 0;\n    }\n\n    endCategoryIndex = startCategoryIndex + categoriesLength;\n\n    if (endCategoryIndex > categories.length) {\n      endCategoryIndex = categories.length;\n      startCategoryIndex = endCategoryIndex - categoriesLength;\n\n      if (startCategoryIndex < 0) {\n        startCategoryIndex = 0;\n      }\n    }\n\n    newVisibleCategories = categories.slice(parseInt(startCategoryIndex), parseInt(endCategoryIndex));\n    newInterval = that._getDiscreteInterval(newVisibleCategories.length, canvasOptions);\n    scale = newInterval / canvasOptions.interval;\n    translate = that.translate(!invert ? newVisibleCategories[0] : newVisibleCategories[newVisibleCategories.length - 1]) * scale - (canvasOptions.startPoint + (stick ? 0 : newInterval / 2));\n    return {\n      min: newVisibleCategories[0],\n      max: newVisibleCategories[newVisibleCategories.length - 1],\n      translate: translate,\n      scale: scale\n    };\n  },\n  getMinScale: function getMinScale(zoom) {\n    var that = this;\n    var canvasOptions = that._canvasOptions;\n    var categoriesLength = (that.visibleCategories || that._categories).length;\n    categoriesLength += (parseInt(.1 * categoriesLength) || 1) * (zoom ? -2 : 2);\n    return canvasOptions.canvasLength / (Math.max(categoriesLength, 1) * canvasOptions.interval);\n  },\n  getScale: function getScale(min, max) {\n    var that = this;\n    var canvasOptions = that._canvasOptions;\n    var visibleArea = that.getCanvasVisibleArea();\n    var stickOffset = !that._options.stick && 1;\n    var minPoint = isDefined(min) ? that.translate(min, -stickOffset) : null;\n    var maxPoint = isDefined(max) ? that.translate(max, +stickOffset) : null;\n\n    if (null === minPoint) {\n      minPoint = canvasOptions.invert ? visibleArea.max : visibleArea.min;\n    }\n\n    if (null === maxPoint) {\n      maxPoint = canvasOptions.invert ? visibleArea.min : visibleArea.max;\n    }\n\n    return that.canvasLength / Math.abs(maxPoint - minPoint);\n  },\n  isValid: function isValid(value) {\n    return isDefined(value) ? this._categoriesToPoints[value.valueOf()] >= 0 : false;\n  },\n  getCorrectValue: getValue,\n  to: function to(value, direction) {\n    var canvasOptions = this._canvasOptions;\n\n    var categoryIndex = this._categoriesToPoints[value.valueOf()];\n\n    var startPointIndex = canvasOptions.startPointIndex || 0;\n    var stickDelta = categoryIndex + (this._options.stick ? 0 : .5) - startPointIndex + (this._businessRange.invert ? -1 : 1) * direction * .5;\n    return round(this._calculateProjection(canvasOptions.interval * stickDelta));\n  },\n  from: function from(position) {\n    var direction = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n    var canvasOptions = this._canvasOptions;\n    var startPoint = canvasOptions.startPoint;\n    var categories = this.visibleCategories || this._categories;\n    var categoriesLength = categories.length;\n    var stickInterval = this._options.stick ? .5 : 0;\n    var result = round((position - startPoint) / canvasOptions.interval + stickInterval - .5 - .5 * direction);\n\n    if (result >= categoriesLength) {\n      result = categoriesLength - 1;\n    }\n\n    if (result < 0) {\n      result = 0;\n    }\n\n    if (canvasOptions.invert) {\n      result = categoriesLength - result - 1;\n    }\n\n    return categories[result];\n  },\n  _add: function _add() {\n    return NaN;\n  },\n  _toValue: getValue,\n  isValueProlonged: true\n};","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/viz/translators/category_translator.js"],"names":["isDefined","require","adjust","round","Math","getValue","value","module","exports","translate","category","directionOffset","that","canvasOptions","_canvasOptions","categoryIndex","_categoriesToPoints","valueOf","stickDelta","specialValue","translateSpecialCase","startPointIndex","stickInterval","_options","stick","_calculateProjection","interval","getInterval","getEventScale","zoomEvent","scale","deltaScale","visibleCategories","length","_categories","zoom","categories","invert","translateCategories","visibleCount","startCategoryIndex","parseInt","categoriesLength","canvasLength","endCategoryIndex","newVisibleCategories","newInterval","slice","_getDiscreteInterval","startPoint","min","max","getMinScale","getScale","visibleArea","getCanvasVisibleArea","stickOffset","minPoint","maxPoint","abs","isValid","getCorrectValue","to","direction","_businessRange","from","position","arguments","result","_add","NaN","_toValue","isValueProlonged"],"mappings":"AAAA;;;;;;;;AAQA;;AACA,IAAIA,SAAS,GAAGC,OAAO,CAAC,uBAAD,CAAP,CAAiCD,SAAjD;;AACA,IAAIE,MAAM,GAAGD,OAAO,CAAC,uBAAD,CAAP,CAAiCC,MAA9C;;AACA,IAAIC,KAAK,GAAGC,IAAI,CAACD,KAAjB;;AAEA,SAASE,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,SAAOA,KAAP;AACH;;AACDC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,SAAS,EAAE,mBAASC,QAAT,EAAmBC,eAAnB,EAAoC;AAC3C,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIC,aAAa,GAAGD,IAAI,CAACE,cAAzB;;AACA,QAAIC,aAAa,GAAGH,IAAI,CAACI,mBAAL,CAAyBN,QAAQ,CAACO,OAAT,EAAzB,CAApB;;AACA,QAAIC,UAAJ;AACA,QAAIC,YAAY,GAAGP,IAAI,CAACQ,oBAAL,CAA0BV,QAA1B,CAAnB;AACA,QAAIW,eAAe,GAAGR,aAAa,CAACQ,eAAd,IAAiC,CAAvD;AACA,QAAIC,aAAa,GAAGV,IAAI,CAACW,QAAL,CAAcC,KAAd,GAAsB,CAAtB,GAA0B,EAA9C;;AACA,QAAIxB,SAAS,CAACmB,YAAD,CAAb,EAA6B;AACzB,aAAOhB,KAAK,CAACgB,YAAD,CAAZ;AACH;;AACD,QAAI,CAACJ,aAAD,IAAkB,MAAMA,aAA5B,EAA2C;AACvC,aAAO,IAAP;AACH;;AACDJ,IAAAA,eAAe,GAAGA,eAAe,IAAI,CAArC;AACAO,IAAAA,UAAU,GAAGH,aAAa,GAAGO,aAAhB,GAAgCD,eAAhC,GAAkD,KAAKV,eAApE;AACA,WAAOR,KAAK,CAACS,IAAI,CAACa,oBAAL,CAA0BZ,aAAa,CAACa,QAAd,GAAyBR,UAAnD,CAAD,CAAZ;AACH,GAlBY;AAmBbS,EAAAA,WAAW,EAAE,uBAAW;AACpB,WAAO,KAAKb,cAAL,CAAoBY,QAA3B;AACH,GArBY;AAsBbE,EAAAA,aAAa,EAAE,uBAASC,SAAT,EAAoB;AAC/B,QAAIC,KAAK,GAAGD,SAAS,CAACE,UAAV,IAAwB,CAApC;AACA,WAAO,IAAI,CAAC,IAAID,KAAL,KAAe,MAAM,KAAKE,iBAAL,CAAuBC,MAAvB,GAAgC,KAAKC,WAAL,CAAiBD,MAAtE,CAAX;AACH,GAzBY;AA0BbE,EAAAA,IAAI,EAAE,cAAS1B,SAAT,EAAoBqB,KAApB,EAA2B;AAC7B,QAAIlB,IAAI,GAAG,IAAX;AACA,QAAIwB,UAAU,GAAGxB,IAAI,CAACsB,WAAtB;AACA,QAAIrB,aAAa,GAAGD,IAAI,CAACE,cAAzB;AACA,QAAIU,KAAK,GAAGZ,IAAI,CAACW,QAAL,CAAcC,KAA1B;AACA,QAAIa,MAAM,GAAGxB,aAAa,CAACwB,MAA3B;AACA,QAAIX,QAAQ,GAAGb,aAAa,CAACa,QAAd,GAAyBI,KAAxC;AACA,QAAIQ,mBAAmB,GAAG7B,SAAS,GAAGiB,QAAtC;AACA,QAAIa,YAAY,GAAG,CAAC3B,IAAI,CAACoB,iBAAL,IAA0B,EAA3B,EAA+BC,MAAlD;AACA,QAAIO,kBAAkB,GAAGC,QAAQ,CAAC,CAAC5B,aAAa,CAACQ,eAAd,IAAiC,CAAlC,IAAuCiB,mBAAvC,GAA6D,EAA9D,CAAjC;AACA,QAAII,gBAAgB,GAAGD,QAAQ,CAACvC,MAAM,CAACW,aAAa,CAAC8B,YAAd,GAA6BjB,QAA9B,CAAN,IAAiDF,KAAK,GAAG,CAAH,GAAO,CAA7D,CAAD,CAAR,IAA6E,CAApG;AACA,QAAIoB,gBAAJ;AACA,QAAIC,oBAAJ;AACA,QAAIC,WAAJ;;AACA,QAAIT,MAAJ,EAAY;AACRG,MAAAA,kBAAkB,GAAGC,QAAQ,CAAC,CAAC5B,aAAa,CAACQ,eAAd,IAAiC,CAAlC,IAAuCkB,YAAvC,GAAsDD,mBAAtD,GAA4E,EAA7E,CAAR,GAA2FI,gBAAhH;AACH;;AACD,QAAIF,kBAAkB,GAAG,CAAzB,EAA4B;AACxBA,MAAAA,kBAAkB,GAAG,CAArB;AACH;;AACDI,IAAAA,gBAAgB,GAAGJ,kBAAkB,GAAGE,gBAAxC;;AACA,QAAIE,gBAAgB,GAAGR,UAAU,CAACH,MAAlC,EAA0C;AACtCW,MAAAA,gBAAgB,GAAGR,UAAU,CAACH,MAA9B;AACAO,MAAAA,kBAAkB,GAAGI,gBAAgB,GAAGF,gBAAxC;;AACA,UAAIF,kBAAkB,GAAG,CAAzB,EAA4B;AACxBA,QAAAA,kBAAkB,GAAG,CAArB;AACH;AACJ;;AACDK,IAAAA,oBAAoB,GAAGT,UAAU,CAACW,KAAX,CAAiBN,QAAQ,CAACD,kBAAD,CAAzB,EAA+CC,QAAQ,CAACG,gBAAD,CAAvD,CAAvB;AACAE,IAAAA,WAAW,GAAGlC,IAAI,CAACoC,oBAAL,CAA0BH,oBAAoB,CAACZ,MAA/C,EAAuDpB,aAAvD,CAAd;AACAiB,IAAAA,KAAK,GAAGgB,WAAW,GAAGjC,aAAa,CAACa,QAApC;AACAjB,IAAAA,SAAS,GAAGG,IAAI,CAACH,SAAL,CAAe,CAAC4B,MAAD,GAAUQ,oBAAoB,CAAC,CAAD,CAA9B,GAAoCA,oBAAoB,CAACA,oBAAoB,CAACZ,MAArB,GAA8B,CAA/B,CAAvE,IAA4GH,KAA5G,IAAqHjB,aAAa,CAACoC,UAAd,IAA4BzB,KAAK,GAAG,CAAH,GAAOsB,WAAW,GAAG,CAAtD,CAArH,CAAZ;AACA,WAAO;AACHI,MAAAA,GAAG,EAAEL,oBAAoB,CAAC,CAAD,CADtB;AAEHM,MAAAA,GAAG,EAAEN,oBAAoB,CAACA,oBAAoB,CAACZ,MAArB,GAA8B,CAA/B,CAFtB;AAGHxB,MAAAA,SAAS,EAAEA,SAHR;AAIHqB,MAAAA,KAAK,EAAEA;AAJJ,KAAP;AAMH,GAhEY;AAiEbsB,EAAAA,WAAW,EAAE,qBAASjB,IAAT,EAAe;AACxB,QAAIvB,IAAI,GAAG,IAAX;AACA,QAAIC,aAAa,GAAGD,IAAI,CAACE,cAAzB;AACA,QAAI4B,gBAAgB,GAAG,CAAC9B,IAAI,CAACoB,iBAAL,IAA0BpB,IAAI,CAACsB,WAAhC,EAA6CD,MAApE;AACAS,IAAAA,gBAAgB,IAAI,CAACD,QAAQ,CAAC,KAAKC,gBAAN,CAAR,IAAmC,CAApC,KAA0CP,IAAI,GAAG,CAAC,CAAJ,GAAQ,CAAtD,CAApB;AACA,WAAOtB,aAAa,CAAC8B,YAAd,IAA8BvC,IAAI,CAAC+C,GAAL,CAAST,gBAAT,EAA2B,CAA3B,IAAgC7B,aAAa,CAACa,QAA5E,CAAP;AACH,GAvEY;AAwEb2B,EAAAA,QAAQ,EAAE,kBAASH,GAAT,EAAcC,GAAd,EAAmB;AACzB,QAAIvC,IAAI,GAAG,IAAX;AACA,QAAIC,aAAa,GAAGD,IAAI,CAACE,cAAzB;AACA,QAAIwC,WAAW,GAAG1C,IAAI,CAAC2C,oBAAL,EAAlB;AACA,QAAIC,WAAW,GAAG,CAAC5C,IAAI,CAACW,QAAL,CAAcC,KAAf,IAAwB,CAA1C;AACA,QAAIiC,QAAQ,GAAGzD,SAAS,CAACkD,GAAD,CAAT,GAAiBtC,IAAI,CAACH,SAAL,CAAeyC,GAAf,EAAoB,CAACM,WAArB,CAAjB,GAAqD,IAApE;AACA,QAAIE,QAAQ,GAAG1D,SAAS,CAACmD,GAAD,CAAT,GAAiBvC,IAAI,CAACH,SAAL,CAAe0C,GAAf,EAAoB,CAACK,WAArB,CAAjB,GAAqD,IAApE;;AACA,QAAI,SAASC,QAAb,EAAuB;AACnBA,MAAAA,QAAQ,GAAG5C,aAAa,CAACwB,MAAd,GAAuBiB,WAAW,CAACH,GAAnC,GAAyCG,WAAW,CAACJ,GAAhE;AACH;;AACD,QAAI,SAASQ,QAAb,EAAuB;AACnBA,MAAAA,QAAQ,GAAG7C,aAAa,CAACwB,MAAd,GAAuBiB,WAAW,CAACJ,GAAnC,GAAyCI,WAAW,CAACH,GAAhE;AACH;;AACD,WAAOvC,IAAI,CAAC+B,YAAL,GAAoBvC,IAAI,CAACuD,GAAL,CAASD,QAAQ,GAAGD,QAApB,CAA3B;AACH,GAtFY;AAuFbG,EAAAA,OAAO,EAAE,iBAAStD,KAAT,EAAgB;AACrB,WAAON,SAAS,CAACM,KAAD,CAAT,GAAmB,KAAKU,mBAAL,CAAyBV,KAAK,CAACW,OAAN,EAAzB,KAA6C,CAAhE,GAAoE,KAA3E;AACH,GAzFY;AA0Fb4C,EAAAA,eAAe,EAAExD,QA1FJ;AA2FbyD,EAAAA,EAAE,EAAE,YAASxD,KAAT,EAAgByD,SAAhB,EAA2B;AAC3B,QAAIlD,aAAa,GAAG,KAAKC,cAAzB;;AACA,QAAIC,aAAa,GAAG,KAAKC,mBAAL,CAAyBV,KAAK,CAACW,OAAN,EAAzB,CAApB;;AACA,QAAII,eAAe,GAAGR,aAAa,CAACQ,eAAd,IAAiC,CAAvD;AACA,QAAIH,UAAU,GAAGH,aAAa,IAAI,KAAKQ,QAAL,CAAcC,KAAd,GAAsB,CAAtB,GAA0B,EAA9B,CAAb,GAAiDH,eAAjD,GAAmE,CAAC,KAAK2C,cAAL,CAAoB3B,MAApB,GAA6B,CAAC,CAA9B,GAAkC,CAAnC,IAAwC0B,SAAxC,GAAoD,EAAxI;AACA,WAAO5D,KAAK,CAAC,KAAKsB,oBAAL,CAA0BZ,aAAa,CAACa,QAAd,GAAyBR,UAAnD,CAAD,CAAZ;AACH,GAjGY;AAkGb+C,EAAAA,IAAI,EAAE,cAASC,QAAT,EAAmB;AACrB,QAAIH,SAAS,GAAGI,SAAS,CAAClC,MAAV,GAAmB,CAAnB,IAAwB,KAAK,CAAL,KAAWkC,SAAS,CAAC,CAAD,CAA5C,GAAkDA,SAAS,CAAC,CAAD,CAA3D,GAAiE,CAAjF;AACA,QAAItD,aAAa,GAAG,KAAKC,cAAzB;AACA,QAAImC,UAAU,GAAGpC,aAAa,CAACoC,UAA/B;AACA,QAAIb,UAAU,GAAG,KAAKJ,iBAAL,IAA0B,KAAKE,WAAhD;AACA,QAAIQ,gBAAgB,GAAGN,UAAU,CAACH,MAAlC;AACA,QAAIX,aAAa,GAAG,KAAKC,QAAL,CAAcC,KAAd,GAAsB,EAAtB,GAA2B,CAA/C;AACA,QAAI4C,MAAM,GAAGjE,KAAK,CAAC,CAAC+D,QAAQ,GAAGjB,UAAZ,IAA0BpC,aAAa,CAACa,QAAxC,GAAmDJ,aAAnD,GAAmE,EAAnE,GAAwE,KAAKyC,SAA9E,CAAlB;;AACA,QAAIK,MAAM,IAAI1B,gBAAd,EAAgC;AAC5B0B,MAAAA,MAAM,GAAG1B,gBAAgB,GAAG,CAA5B;AACH;;AACD,QAAI0B,MAAM,GAAG,CAAb,EAAgB;AACZA,MAAAA,MAAM,GAAG,CAAT;AACH;;AACD,QAAIvD,aAAa,CAACwB,MAAlB,EAA0B;AACtB+B,MAAAA,MAAM,GAAG1B,gBAAgB,GAAG0B,MAAnB,GAA4B,CAArC;AACH;;AACD,WAAOhC,UAAU,CAACgC,MAAD,CAAjB;AACH,GApHY;AAqHbC,EAAAA,IAAI,EAAE,gBAAW;AACb,WAAOC,GAAP;AACH,GAvHY;AAwHbC,EAAAA,QAAQ,EAAElE,QAxHG;AAyHbmE,EAAAA,gBAAgB,EAAE;AAzHL,CAAjB","sourcesContent":["/**\r\n * DevExtreme (viz/translators/category_translator.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar isDefined = require(\"../../core/utils/type\").isDefined;\r\nvar adjust = require(\"../../core/utils/math\").adjust;\r\nvar round = Math.round;\r\n\r\nfunction getValue(value) {\r\n    return value\r\n}\r\nmodule.exports = {\r\n    translate: function(category, directionOffset) {\r\n        var that = this;\r\n        var canvasOptions = that._canvasOptions;\r\n        var categoryIndex = that._categoriesToPoints[category.valueOf()];\r\n        var stickDelta;\r\n        var specialValue = that.translateSpecialCase(category);\r\n        var startPointIndex = canvasOptions.startPointIndex || 0;\r\n        var stickInterval = that._options.stick ? 0 : .5;\r\n        if (isDefined(specialValue)) {\r\n            return round(specialValue)\r\n        }\r\n        if (!categoryIndex && 0 !== categoryIndex) {\r\n            return null\r\n        }\r\n        directionOffset = directionOffset || 0;\r\n        stickDelta = categoryIndex + stickInterval - startPointIndex + .5 * directionOffset;\r\n        return round(that._calculateProjection(canvasOptions.interval * stickDelta))\r\n    },\r\n    getInterval: function() {\r\n        return this._canvasOptions.interval\r\n    },\r\n    getEventScale: function(zoomEvent) {\r\n        var scale = zoomEvent.deltaScale || 1;\r\n        return 1 - (1 - scale) / (.75 + this.visibleCategories.length / this._categories.length)\r\n    },\r\n    zoom: function(translate, scale) {\r\n        var that = this;\r\n        var categories = that._categories;\r\n        var canvasOptions = that._canvasOptions;\r\n        var stick = that._options.stick;\r\n        var invert = canvasOptions.invert;\r\n        var interval = canvasOptions.interval * scale;\r\n        var translateCategories = translate / interval;\r\n        var visibleCount = (that.visibleCategories || []).length;\r\n        var startCategoryIndex = parseInt((canvasOptions.startPointIndex || 0) + translateCategories + .5);\r\n        var categoriesLength = parseInt(adjust(canvasOptions.canvasLength / interval) + (stick ? 1 : 0)) || 1;\r\n        var endCategoryIndex;\r\n        var newVisibleCategories;\r\n        var newInterval;\r\n        if (invert) {\r\n            startCategoryIndex = parseInt((canvasOptions.startPointIndex || 0) + visibleCount - translateCategories + .5) - categoriesLength\r\n        }\r\n        if (startCategoryIndex < 0) {\r\n            startCategoryIndex = 0\r\n        }\r\n        endCategoryIndex = startCategoryIndex + categoriesLength;\r\n        if (endCategoryIndex > categories.length) {\r\n            endCategoryIndex = categories.length;\r\n            startCategoryIndex = endCategoryIndex - categoriesLength;\r\n            if (startCategoryIndex < 0) {\r\n                startCategoryIndex = 0\r\n            }\r\n        }\r\n        newVisibleCategories = categories.slice(parseInt(startCategoryIndex), parseInt(endCategoryIndex));\r\n        newInterval = that._getDiscreteInterval(newVisibleCategories.length, canvasOptions);\r\n        scale = newInterval / canvasOptions.interval;\r\n        translate = that.translate(!invert ? newVisibleCategories[0] : newVisibleCategories[newVisibleCategories.length - 1]) * scale - (canvasOptions.startPoint + (stick ? 0 : newInterval / 2));\r\n        return {\r\n            min: newVisibleCategories[0],\r\n            max: newVisibleCategories[newVisibleCategories.length - 1],\r\n            translate: translate,\r\n            scale: scale\r\n        }\r\n    },\r\n    getMinScale: function(zoom) {\r\n        var that = this;\r\n        var canvasOptions = that._canvasOptions;\r\n        var categoriesLength = (that.visibleCategories || that._categories).length;\r\n        categoriesLength += (parseInt(.1 * categoriesLength) || 1) * (zoom ? -2 : 2);\r\n        return canvasOptions.canvasLength / (Math.max(categoriesLength, 1) * canvasOptions.interval)\r\n    },\r\n    getScale: function(min, max) {\r\n        var that = this;\r\n        var canvasOptions = that._canvasOptions;\r\n        var visibleArea = that.getCanvasVisibleArea();\r\n        var stickOffset = !that._options.stick && 1;\r\n        var minPoint = isDefined(min) ? that.translate(min, -stickOffset) : null;\r\n        var maxPoint = isDefined(max) ? that.translate(max, +stickOffset) : null;\r\n        if (null === minPoint) {\r\n            minPoint = canvasOptions.invert ? visibleArea.max : visibleArea.min\r\n        }\r\n        if (null === maxPoint) {\r\n            maxPoint = canvasOptions.invert ? visibleArea.min : visibleArea.max\r\n        }\r\n        return that.canvasLength / Math.abs(maxPoint - minPoint)\r\n    },\r\n    isValid: function(value) {\r\n        return isDefined(value) ? this._categoriesToPoints[value.valueOf()] >= 0 : false\r\n    },\r\n    getCorrectValue: getValue,\r\n    to: function(value, direction) {\r\n        var canvasOptions = this._canvasOptions;\r\n        var categoryIndex = this._categoriesToPoints[value.valueOf()];\r\n        var startPointIndex = canvasOptions.startPointIndex || 0;\r\n        var stickDelta = categoryIndex + (this._options.stick ? 0 : .5) - startPointIndex + (this._businessRange.invert ? -1 : 1) * direction * .5;\r\n        return round(this._calculateProjection(canvasOptions.interval * stickDelta))\r\n    },\r\n    from: function(position) {\r\n        var direction = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\r\n        var canvasOptions = this._canvasOptions;\r\n        var startPoint = canvasOptions.startPoint;\r\n        var categories = this.visibleCategories || this._categories;\r\n        var categoriesLength = categories.length;\r\n        var stickInterval = this._options.stick ? .5 : 0;\r\n        var result = round((position - startPoint) / canvasOptions.interval + stickInterval - .5 - .5 * direction);\r\n        if (result >= categoriesLength) {\r\n            result = categoriesLength - 1\r\n        }\r\n        if (result < 0) {\r\n            result = 0\r\n        }\r\n        if (canvasOptions.invert) {\r\n            result = categoriesLength - result - 1\r\n        }\r\n        return categories[result]\r\n    },\r\n    _add: function() {\r\n        return NaN\r\n    },\r\n    _toValue: getValue,\r\n    isValueProlonged: true\r\n};\r\n"]},"metadata":{},"sourceType":"script"}
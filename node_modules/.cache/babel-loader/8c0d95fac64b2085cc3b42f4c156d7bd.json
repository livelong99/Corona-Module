{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\src\\\\Components\\\\World\\\\Graph.jsx\";\nimport React, { useContext } from \"react\";\nimport { connect } from \"react-redux\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { HistoryContext } from '../Store';\nimport axios from \"axios\";\nimport { Chart, ArgumentAxis, ValueAxis, LineSeries, Legend, ZoomAndPan, Title } from \"@devexpress/dx-react-chart-material-ui\";\n\nfunction Graph(props) {\n  const _useContext = useContext(HistoryContext),\n        _useContext2 = _slicedToArray(_useContext, 2),\n        history = _useContext2[0],\n        setHistory = _useContext2[1];\n\n  const info = history.filter(rec => rec.country === props.name);\n\n  function getData(record) {\n    const Cases = record.timeline.cases;\n    const Deaths = record.timeline.deaths;\n    const Recovered = record.timeline.recovered;\n    const data = [];\n    const dates = Object.keys(Cases);\n    var i = 0;\n    var k = Math.round(dates.length / 10);\n    var date;\n\n    for (var _i = 0, _dates = dates; _i < _dates.length; _i++) {\n      date = _dates[_i];\n\n      if (Cases[date] > 0) {\n        if (i % (k - 1) === 0) {\n          if (date.length === 7) data.push({\n            argument: date.substring(0, 4),\n            cases: Cases[date],\n            deaths: Deaths[date],\n            recovered: Recovered[date]\n          });else data.push({\n            argument: date.substring(0, 3),\n            cases: Cases[date],\n            deaths: Deaths[date],\n            recovered: Recovered[date]\n          });\n        } //else\n        //data.push({argument:\"\" , cases: Cases[date], deaths: Deaths[date], recovered: Recovered[date] });\n\n      }\n\n      i++;\n    }\n\n    date = dates[dates.length - 1];\n    data.push({\n      argument: date.substring(0, 4),\n      cases: Cases[date],\n      deaths: Deaths[date],\n      recovered: Recovered[date]\n    });\n    return /*#__PURE__*/React.createElement(Chart, {\n      data: data,\n      width: 800,\n      height: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ArgumentAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ValueAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Title, {\n      text: \"Corona Record in \" + props.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(LineSeries, {\n      name: \"Total Cases\",\n      valueField: \"cases\",\n      argumentField: \"argument\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(LineSeries, {\n      name: \"Total Deaths\",\n      valueField: \"deaths\",\n      argumentField: \"argument\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(LineSeries, {\n      name: \"Total Recoveries\",\n      valueField: \"recovered\",\n      argumentField: \"argument\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ZoomAndPan, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, info.map(getData));\n}\n\nexport default Graph;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/src/Components/World/Graph.jsx"],"names":["React","useContext","connect","Paper","HistoryContext","axios","Chart","ArgumentAxis","ValueAxis","LineSeries","Legend","ZoomAndPan","Title","Graph","props","history","setHistory","info","filter","rec","country","name","getData","record","Cases","timeline","cases","Deaths","deaths","Recovered","recovered","data","dates","Object","keys","i","k","Math","round","length","date","push","argument","substring","map"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {HistoryContext} from '../Store';\r\nimport axios from \"axios\";\r\nimport {\r\n  Chart,\r\n  ArgumentAxis,\r\n  ValueAxis,\r\n  LineSeries,\r\n  Legend,\r\n  ZoomAndPan,\r\n  Title\r\n} from \"@devexpress/dx-react-chart-material-ui\";\r\n\r\n\r\nfunction Graph(props) {\r\n\r\n  const [history, setHistory] = useContext(HistoryContext);\r\n\r\n  const info = history.filter((rec)=>(rec.country===props.name))\r\n\r\n  function getData(record) {\r\n    const Cases = record.timeline.cases;\r\n    const Deaths = record.timeline.deaths;\r\n    const Recovered = record.timeline.recovered;\r\n    const data = []\r\n    const dates = Object.keys(Cases);\r\n    var i =0;\r\n    var k = Math.round(dates.length/10);\r\n    var date;\r\n    for(date of dates) {\r\n       if(Cases[date]>0){\r\n        if(i%(k-1)===0){\r\n          if(date.length===7)\r\n            data.push({argument:date.substring(0,4) , cases: Cases[date], deaths: Deaths[date], recovered: Recovered[date] });\r\n          else\r\n            data.push({argument:date.substring(0,3) , cases: Cases[date], deaths: Deaths[date], recovered: Recovered[date] });\r\n        }\r\n        //else\r\n          //data.push({argument:\"\" , cases: Cases[date], deaths: Deaths[date], recovered: Recovered[date] });\r\n       }\r\n       i++;\r\n    }\r\n    date = dates[dates.length-1];\r\n    data.push({argument:date.substring(0,4) , cases: Cases[date], deaths: Deaths[date], recovered: Recovered[date] });\r\n    return (\r\n      <Chart data={data} width={800} height={400}>\r\n        <ArgumentAxis/>\r\n        <ValueAxis />\r\n        <Title text={\"Corona Record in \" + props.name} />\r\n\r\n        <LineSeries\r\n            name=\"Total Cases\"\r\n            valueField=\"cases\"\r\n            argumentField=\"argument\"\r\n          />\r\n          <LineSeries\r\n            name=\"Total Deaths\"\r\n            valueField=\"deaths\"\r\n            argumentField=\"argument\"\r\n          />\r\n          <LineSeries\r\n            name=\"Total Recoveries\"\r\n            valueField=\"recovered\"\r\n            argumentField=\"argument\"\r\n          />\r\n          <Legend />\r\n          <ZoomAndPan />\r\n      </Chart>\r\n    )\r\n    \r\n  }\r\n\r\n  return (\r\n    <Paper>\r\n\r\n      {info.map(getData)}\r\n      \r\n    </Paper>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default (Graph);"]},"metadata":{},"sourceType":"module"}
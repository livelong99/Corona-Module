{"ast":null,"code":"/**\r\n * DevExtreme (events/pointer/mspointer.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar BaseStrategy = require(\"./base\");\n\nvar Observer = require(\"./observer\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar eventMap = {\n  dxpointerdown: \"pointerdown\",\n  dxpointermove: \"pointermove\",\n  dxpointerup: \"pointerup\",\n  dxpointercancel: \"pointercancel\",\n  dxpointerover: \"pointerover\",\n  dxpointerout: \"pointerout\",\n  dxpointerenter: \"pointerenter\",\n  dxpointerleave: \"pointerleave\"\n};\nvar observer;\nvar activated = false;\n\nvar activateStrategy = function activateStrategy() {\n  if (activated) {\n    return;\n  }\n\n  observer = new Observer(eventMap, function (a, b) {\n    return a.pointerId === b.pointerId;\n  }, function (e) {\n    if (e.isPrimary) {\n      observer.reset();\n    }\n  });\n  activated = true;\n};\n\nvar MsPointerStrategy = BaseStrategy.inherit({\n  ctor: function ctor() {\n    this.callBase.apply(this, arguments);\n    activateStrategy();\n  },\n  _fireEvent: function _fireEvent(args) {\n    return this.callBase(extend({\n      pointers: observer.pointers(),\n      pointerId: args.originalEvent.pointerId\n    }, args));\n  }\n});\nMsPointerStrategy.map = eventMap;\n\nMsPointerStrategy.resetObserver = function () {\n  observer.reset();\n};\n\nmodule.exports = MsPointerStrategy;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/events/pointer/mspointer.js"],"names":["BaseStrategy","require","Observer","extend","eventMap","dxpointerdown","dxpointermove","dxpointerup","dxpointercancel","dxpointerover","dxpointerout","dxpointerenter","dxpointerleave","observer","activated","activateStrategy","a","b","pointerId","e","isPrimary","reset","MsPointerStrategy","inherit","ctor","callBase","apply","arguments","_fireEvent","args","pointers","originalEvent","map","resetObserver","module","exports"],"mappings":"AAAA;;;;;;;;AAQA;;AACA,IAAIA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAA1B;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,yBAAD,CAAP,CAAmCE,MAAhD;;AACA,IAAIC,QAAQ,GAAG;AACXC,EAAAA,aAAa,EAAE,aADJ;AAEXC,EAAAA,aAAa,EAAE,aAFJ;AAGXC,EAAAA,WAAW,EAAE,WAHF;AAIXC,EAAAA,eAAe,EAAE,eAJN;AAKXC,EAAAA,aAAa,EAAE,aALJ;AAMXC,EAAAA,YAAY,EAAE,YANH;AAOXC,EAAAA,cAAc,EAAE,cAPL;AAQXC,EAAAA,cAAc,EAAE;AARL,CAAf;AAUA,IAAIC,QAAJ;AACA,IAAIC,SAAS,GAAG,KAAhB;;AACA,IAAIC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAW;AAC9B,MAAID,SAAJ,EAAe;AACX;AACH;;AACDD,EAAAA,QAAQ,GAAG,IAAIX,QAAJ,CAAaE,QAAb,EAAuB,UAASY,CAAT,EAAYC,CAAZ,EAAe;AAC7C,WAAOD,CAAC,CAACE,SAAF,KAAgBD,CAAC,CAACC,SAAzB;AACH,GAFU,EAER,UAASC,CAAT,EAAY;AACX,QAAIA,CAAC,CAACC,SAAN,EAAiB;AACbP,MAAAA,QAAQ,CAACQ,KAAT;AACH;AACJ,GANU,CAAX;AAOAP,EAAAA,SAAS,GAAG,IAAZ;AACH,CAZD;;AAaA,IAAIQ,iBAAiB,GAAGtB,YAAY,CAACuB,OAAb,CAAqB;AACzCC,EAAAA,IAAI,EAAE,gBAAW;AACb,SAAKC,QAAL,CAAcC,KAAd,CAAoB,IAApB,EAA0BC,SAA1B;AACAZ,IAAAA,gBAAgB;AACnB,GAJwC;AAKzCa,EAAAA,UAAU,EAAE,oBAASC,IAAT,EAAe;AACvB,WAAO,KAAKJ,QAAL,CAActB,MAAM,CAAC;AACxB2B,MAAAA,QAAQ,EAAEjB,QAAQ,CAACiB,QAAT,EADc;AAExBZ,MAAAA,SAAS,EAAEW,IAAI,CAACE,aAAL,CAAmBb;AAFN,KAAD,EAGxBW,IAHwB,CAApB,CAAP;AAIH;AAVwC,CAArB,CAAxB;AAYAP,iBAAiB,CAACU,GAAlB,GAAwB5B,QAAxB;;AACAkB,iBAAiB,CAACW,aAAlB,GAAkC,YAAW;AACzCpB,EAAAA,QAAQ,CAACQ,KAAT;AACH,CAFD;;AAGAa,MAAM,CAACC,OAAP,GAAiBb,iBAAjB","sourcesContent":["/**\r\n * DevExtreme (events/pointer/mspointer.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar BaseStrategy = require(\"./base\");\r\nvar Observer = require(\"./observer\");\r\nvar extend = require(\"../../core/utils/extend\").extend;\r\nvar eventMap = {\r\n    dxpointerdown: \"pointerdown\",\r\n    dxpointermove: \"pointermove\",\r\n    dxpointerup: \"pointerup\",\r\n    dxpointercancel: \"pointercancel\",\r\n    dxpointerover: \"pointerover\",\r\n    dxpointerout: \"pointerout\",\r\n    dxpointerenter: \"pointerenter\",\r\n    dxpointerleave: \"pointerleave\"\r\n};\r\nvar observer;\r\nvar activated = false;\r\nvar activateStrategy = function() {\r\n    if (activated) {\r\n        return\r\n    }\r\n    observer = new Observer(eventMap, function(a, b) {\r\n        return a.pointerId === b.pointerId\r\n    }, function(e) {\r\n        if (e.isPrimary) {\r\n            observer.reset()\r\n        }\r\n    });\r\n    activated = true\r\n};\r\nvar MsPointerStrategy = BaseStrategy.inherit({\r\n    ctor: function() {\r\n        this.callBase.apply(this, arguments);\r\n        activateStrategy()\r\n    },\r\n    _fireEvent: function(args) {\r\n        return this.callBase(extend({\r\n            pointers: observer.pointers(),\r\n            pointerId: args.originalEvent.pointerId\r\n        }, args))\r\n    }\r\n});\r\nMsPointerStrategy.map = eventMap;\r\nMsPointerStrategy.resetObserver = function() {\r\n    observer.reset()\r\n};\r\nmodule.exports = MsPointerStrategy;\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\r\n * DevExtreme (viz/translators/range.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar typeUtils = require(\"../../core/utils/type\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar _isDefined = typeUtils.isDefined;\nvar _isDate = typeUtils.isDate;\nvar _isFunction = typeUtils.isFunction;\n\nvar unique = require(\"../core/utils\").unique;\n\nvar minSelector = \"min\";\nvar maxSelector = \"max\";\nvar minVisibleSelector = \"minVisible\";\nvar maxVisibleSelector = \"maxVisible\";\nvar baseSelector = \"base\";\nvar axisTypeSelector = \"axisType\";\n\nvar _Range;\n\nfunction otherLessThan(thisValue, otherValue) {\n  return otherValue < thisValue;\n}\n\nfunction otherGreaterThan(thisValue, otherValue) {\n  return otherValue > thisValue;\n}\n\nfunction compareAndReplace(thisValue, otherValue, setValue, compare) {\n  var otherValueDefined = _isDefined(otherValue);\n\n  if (_isDefined(thisValue)) {\n    if (otherValueDefined && compare(thisValue, otherValue)) {\n      setValue(otherValue);\n    }\n  } else {\n    if (otherValueDefined) {\n      setValue(otherValue);\n    }\n  }\n}\n\n_Range = exports.Range = function (range) {\n  range && extend(this, range);\n};\n\n_Range.prototype = {\n  constructor: _Range,\n  addRange: function addRange(otherRange) {\n    var that = this;\n    var categories = that.categories;\n    var otherCategories = otherRange.categories;\n\n    var compareAndReplaceByField = function compareAndReplaceByField(field, compare) {\n      compareAndReplace(that[field], otherRange[field], function (value) {\n        that[field] = value;\n      }, compare);\n    };\n\n    var controlValuesByVisibleBounds = function controlValuesByVisibleBounds(valueField, visibleValueField, compare) {\n      compareAndReplace(that[valueField], that[visibleValueField], function (value) {\n        _isDefined(that[valueField]) && (that[valueField] = value);\n      }, compare);\n    };\n\n    var checkField = function checkField(field) {\n      that[field] = that[field] || otherRange[field];\n    };\n\n    checkField(\"invert\");\n    checkField(axisTypeSelector);\n    checkField(\"dataType\");\n    checkField(\"isSpacedMargin\");\n\n    if (\"logarithmic\" === that[axisTypeSelector]) {\n      checkField(baseSelector);\n    } else {\n      that[baseSelector] = void 0;\n    }\n\n    compareAndReplaceByField(minSelector, otherLessThan);\n    compareAndReplaceByField(maxSelector, otherGreaterThan);\n\n    if (\"discrete\" === that[axisTypeSelector]) {\n      checkField(minVisibleSelector);\n      checkField(maxVisibleSelector);\n    } else {\n      compareAndReplaceByField(minVisibleSelector, otherLessThan);\n      compareAndReplaceByField(maxVisibleSelector, otherGreaterThan);\n    }\n\n    compareAndReplaceByField(\"interval\", otherLessThan);\n    controlValuesByVisibleBounds(minSelector, minVisibleSelector, otherLessThan);\n    controlValuesByVisibleBounds(minSelector, maxVisibleSelector, otherLessThan);\n    controlValuesByVisibleBounds(maxSelector, maxVisibleSelector, otherGreaterThan);\n    controlValuesByVisibleBounds(maxSelector, minVisibleSelector, otherGreaterThan);\n\n    if (void 0 === categories) {\n      that.categories = otherCategories;\n    } else {\n      that.categories = otherCategories ? unique(categories.concat(otherCategories)) : categories;\n    }\n\n    if (\"logarithmic\" === that[axisTypeSelector]) {\n      checkField(\"allowNegatives\");\n      compareAndReplaceByField(\"linearThreshold\", otherLessThan);\n    }\n\n    return that;\n  },\n  isEmpty: function isEmpty() {\n    return (!_isDefined(this[minSelector]) || !_isDefined(this[maxSelector])) && (!this.categories || 0 === this.categories.length);\n  },\n  correctValueZeroLevel: function correctValueZeroLevel() {\n    var that = this;\n\n    if (\"logarithmic\" === that[axisTypeSelector] || _isDate(that[maxSelector]) || _isDate(that[minSelector])) {\n      return that;\n    }\n\n    function setZeroLevel(min, max) {\n      that[min] < 0 && that[max] < 0 && (that[max] = 0);\n      that[min] > 0 && that[max] > 0 && (that[min] = 0);\n    }\n\n    setZeroLevel(minSelector, maxSelector);\n    setZeroLevel(minVisibleSelector, maxVisibleSelector);\n    return that;\n  },\n  sortCategories: function sortCategories(sort) {\n    if (false === sort || !this.categories) {\n      return;\n    }\n\n    if (Array.isArray(sort)) {\n      var sortValues = sort.map(function (item) {\n        return item.valueOf();\n      });\n      var filteredSeriesCategories = this.categories.filter(function (item) {\n        return sortValues.indexOf(item.valueOf()) === -1;\n      });\n      this.categories = sort.concat(filteredSeriesCategories);\n    } else {\n      var notAFunction = !_isFunction(sort);\n\n      if (notAFunction && \"string\" !== this.dataType) {\n        sort = function sort(a, b) {\n          return a.valueOf() - b.valueOf();\n        };\n      } else {\n        if (notAFunction) {\n          sort = false;\n        }\n      }\n\n      sort && this.categories.sort(sort);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/viz/translators/range.js"],"names":["typeUtils","require","extend","_isDefined","isDefined","_isDate","isDate","_isFunction","isFunction","unique","minSelector","maxSelector","minVisibleSelector","maxVisibleSelector","baseSelector","axisTypeSelector","_Range","otherLessThan","thisValue","otherValue","otherGreaterThan","compareAndReplace","setValue","compare","otherValueDefined","exports","Range","range","prototype","constructor","addRange","otherRange","that","categories","otherCategories","compareAndReplaceByField","field","value","controlValuesByVisibleBounds","valueField","visibleValueField","checkField","concat","isEmpty","length","correctValueZeroLevel","setZeroLevel","min","max","sortCategories","sort","Array","isArray","sortValues","map","item","valueOf","filteredSeriesCategories","filter","indexOf","notAFunction","dataType","a","b"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/translators/range.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar typeUtils = require(\"../../core/utils/type\");\r\nvar extend = require(\"../../core/utils/extend\").extend;\r\nvar _isDefined = typeUtils.isDefined;\r\nvar _isDate = typeUtils.isDate;\r\nvar _isFunction = typeUtils.isFunction;\r\nvar unique = require(\"../core/utils\").unique;\r\nvar minSelector = \"min\";\r\nvar maxSelector = \"max\";\r\nvar minVisibleSelector = \"minVisible\";\r\nvar maxVisibleSelector = \"maxVisible\";\r\nvar baseSelector = \"base\";\r\nvar axisTypeSelector = \"axisType\";\r\nvar _Range;\r\n\r\nfunction otherLessThan(thisValue, otherValue) {\r\n    return otherValue < thisValue\r\n}\r\n\r\nfunction otherGreaterThan(thisValue, otherValue) {\r\n    return otherValue > thisValue\r\n}\r\n\r\nfunction compareAndReplace(thisValue, otherValue, setValue, compare) {\r\n    var otherValueDefined = _isDefined(otherValue);\r\n    if (_isDefined(thisValue)) {\r\n        if (otherValueDefined && compare(thisValue, otherValue)) {\r\n            setValue(otherValue)\r\n        }\r\n    } else {\r\n        if (otherValueDefined) {\r\n            setValue(otherValue)\r\n        }\r\n    }\r\n}\r\n_Range = exports.Range = function(range) {\r\n    range && extend(this, range)\r\n};\r\n_Range.prototype = {\r\n    constructor: _Range,\r\n    addRange: function(otherRange) {\r\n        var that = this;\r\n        var categories = that.categories;\r\n        var otherCategories = otherRange.categories;\r\n        var compareAndReplaceByField = function(field, compare) {\r\n            compareAndReplace(that[field], otherRange[field], function(value) {\r\n                that[field] = value\r\n            }, compare)\r\n        };\r\n        var controlValuesByVisibleBounds = function(valueField, visibleValueField, compare) {\r\n            compareAndReplace(that[valueField], that[visibleValueField], function(value) {\r\n                _isDefined(that[valueField]) && (that[valueField] = value)\r\n            }, compare)\r\n        };\r\n        var checkField = function(field) {\r\n            that[field] = that[field] || otherRange[field]\r\n        };\r\n        checkField(\"invert\");\r\n        checkField(axisTypeSelector);\r\n        checkField(\"dataType\");\r\n        checkField(\"isSpacedMargin\");\r\n        if (\"logarithmic\" === that[axisTypeSelector]) {\r\n            checkField(baseSelector)\r\n        } else {\r\n            that[baseSelector] = void 0\r\n        }\r\n        compareAndReplaceByField(minSelector, otherLessThan);\r\n        compareAndReplaceByField(maxSelector, otherGreaterThan);\r\n        if (\"discrete\" === that[axisTypeSelector]) {\r\n            checkField(minVisibleSelector);\r\n            checkField(maxVisibleSelector)\r\n        } else {\r\n            compareAndReplaceByField(minVisibleSelector, otherLessThan);\r\n            compareAndReplaceByField(maxVisibleSelector, otherGreaterThan)\r\n        }\r\n        compareAndReplaceByField(\"interval\", otherLessThan);\r\n        controlValuesByVisibleBounds(minSelector, minVisibleSelector, otherLessThan);\r\n        controlValuesByVisibleBounds(minSelector, maxVisibleSelector, otherLessThan);\r\n        controlValuesByVisibleBounds(maxSelector, maxVisibleSelector, otherGreaterThan);\r\n        controlValuesByVisibleBounds(maxSelector, minVisibleSelector, otherGreaterThan);\r\n        if (void 0 === categories) {\r\n            that.categories = otherCategories\r\n        } else {\r\n            that.categories = otherCategories ? unique(categories.concat(otherCategories)) : categories\r\n        }\r\n        if (\"logarithmic\" === that[axisTypeSelector]) {\r\n            checkField(\"allowNegatives\");\r\n            compareAndReplaceByField(\"linearThreshold\", otherLessThan)\r\n        }\r\n        return that\r\n    },\r\n    isEmpty: function() {\r\n        return (!_isDefined(this[minSelector]) || !_isDefined(this[maxSelector])) && (!this.categories || 0 === this.categories.length)\r\n    },\r\n    correctValueZeroLevel: function() {\r\n        var that = this;\r\n        if (\"logarithmic\" === that[axisTypeSelector] || _isDate(that[maxSelector]) || _isDate(that[minSelector])) {\r\n            return that\r\n        }\r\n\r\n        function setZeroLevel(min, max) {\r\n            that[min] < 0 && that[max] < 0 && (that[max] = 0);\r\n            that[min] > 0 && that[max] > 0 && (that[min] = 0)\r\n        }\r\n        setZeroLevel(minSelector, maxSelector);\r\n        setZeroLevel(minVisibleSelector, maxVisibleSelector);\r\n        return that\r\n    },\r\n    sortCategories: function(sort) {\r\n        if (false === sort || !this.categories) {\r\n            return\r\n        }\r\n        if (Array.isArray(sort)) {\r\n            var sortValues = sort.map(function(item) {\r\n                return item.valueOf()\r\n            });\r\n            var filteredSeriesCategories = this.categories.filter(function(item) {\r\n                return sortValues.indexOf(item.valueOf()) === -1\r\n            });\r\n            this.categories = sort.concat(filteredSeriesCategories)\r\n        } else {\r\n            var notAFunction = !_isFunction(sort);\r\n            if (notAFunction && \"string\" !== this.dataType) {\r\n                sort = function(a, b) {\r\n                    return a.valueOf() - b.valueOf()\r\n                }\r\n            } else {\r\n                if (notAFunction) {\r\n                    sort = false\r\n                }\r\n            }\r\n            sort && this.categories.sort(sort)\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}
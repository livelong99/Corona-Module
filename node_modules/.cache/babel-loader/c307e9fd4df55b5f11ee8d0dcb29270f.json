{"ast":null,"code":"/**\r\n * DevExtreme (localization/number.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _dependency_injector = require(\"../core/utils/dependency_injector\");\n\nvar _dependency_injector2 = _interopRequireDefault(_dependency_injector);\n\nvar _array = require(\"../core/utils/array\");\n\nvar _common = require(\"../core/utils/common\");\n\nvar _iterator = require(\"../core/utils/iterator\");\n\nvar _type = require(\"../core/utils/type\");\n\nvar _number = require(\"./ldml/number\");\n\nvar _number2 = _interopRequireDefault(_number);\n\nvar _config = require(\"../core/config\");\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _errors = require(\"../core/errors\");\n\nvar _errors2 = _interopRequireDefault(_errors);\n\nvar _utils = require(\"./utils\");\n\nvar _currency = require(\"./currency\");\n\nvar _currency2 = _interopRequireDefault(_currency);\n\nvar _number3 = require(\"./intl/number\");\n\nvar _number4 = _interopRequireDefault(_number3);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(n);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (\"undefined\" === typeof Symbol || !(Symbol.iterator in Object(arr))) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _e = void 0;\n\n  try {\n    for (var _s, _i = arr[Symbol.iterator](); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) {\n        break;\n      }\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && null != _i.return) {\n        _i.return();\n      }\n    } finally {\n      if (_d) {\n        throw _e;\n      }\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) {\n    return arr;\n  }\n}\n\nvar hasIntl = \"undefined\" !== typeof Intl;\nvar MAX_LARGE_NUMBER_POWER = 4;\nvar DECIMAL_BASE = 10;\nvar NUMERIC_FORMATS = [\"currency\", \"fixedpoint\", \"exponential\", \"percent\", \"decimal\"];\nvar LargeNumberFormatPostfixes = {\n  1: \"K\",\n  2: \"M\",\n  3: \"B\",\n  4: \"T\"\n};\nvar LargeNumberFormatPowers = {\n  largenumber: \"auto\",\n  thousands: 1,\n  millions: 2,\n  billions: 3,\n  trillions: 4\n};\nvar numberLocalization = (0, _dependency_injector2.default)({\n  engine: function engine() {\n    return \"base\";\n  },\n  numericFormats: NUMERIC_FORMATS,\n  defaultLargeNumberFormatPostfixes: LargeNumberFormatPostfixes,\n  _parseNumberFormatString: function _parseNumberFormatString(formatType) {\n    var formatList;\n    var formatObject = {};\n\n    if (!formatType || \"string\" !== typeof formatType) {\n      return;\n    }\n\n    formatList = formatType.toLowerCase().split(\" \");\n    (0, _iterator.each)(formatList, function (index, value) {\n      if ((0, _array.inArray)(value, NUMERIC_FORMATS) > -1) {\n        formatObject.formatType = value;\n      } else {\n        if (value in LargeNumberFormatPowers) {\n          formatObject.power = LargeNumberFormatPowers[value];\n        }\n      }\n    });\n\n    if (formatObject.power && !formatObject.formatType) {\n      formatObject.formatType = \"fixedpoint\";\n    }\n\n    if (formatObject.formatType) {\n      return formatObject;\n    }\n  },\n  _calculateNumberPower: function _calculateNumberPower(value, base, minPower, maxPower) {\n    var number = Math.abs(value);\n    var power = 0;\n\n    if (number > 1) {\n      while (number && number >= base && (void 0 === maxPower || power < maxPower)) {\n        power++;\n        number /= base;\n      }\n    } else {\n      if (number > 0 && number < 1) {\n        while (number < 1 && (void 0 === minPower || power > minPower)) {\n          power--;\n          number *= base;\n        }\n      }\n    }\n\n    return power;\n  },\n  _getNumberByPower: function _getNumberByPower(number, power, base) {\n    var result = number;\n\n    while (power > 0) {\n      result /= base;\n      power--;\n    }\n\n    while (power < 0) {\n      result *= base;\n      power++;\n    }\n\n    return result;\n  },\n  _formatNumber: function _formatNumber(value, formatObject, formatConfig) {\n    var powerPostfix;\n    var result;\n\n    if (\"auto\" === formatObject.power) {\n      formatObject.power = this._calculateNumberPower(value, 1e3, 0, MAX_LARGE_NUMBER_POWER);\n    }\n\n    if (formatObject.power) {\n      value = this._getNumberByPower(value, formatObject.power, 1e3);\n    }\n\n    powerPostfix = this.defaultLargeNumberFormatPostfixes[formatObject.power] || \"\";\n    result = this._formatNumberCore(value, formatObject.formatType, formatConfig);\n    result = result.replace(/(\\d|.$)(\\D*)$/, \"$1\" + powerPostfix + \"$2\");\n    return result;\n  },\n  _formatNumberExponential: function _formatNumberExponential(value, formatConfig) {\n    var power = this._calculateNumberPower(value, DECIMAL_BASE);\n\n    var number = this._getNumberByPower(value, power, DECIMAL_BASE);\n\n    var powString;\n\n    if (void 0 === formatConfig.precision) {\n      formatConfig.precision = 1;\n    }\n\n    if (number.toFixed(formatConfig.precision || 0) >= DECIMAL_BASE) {\n      power++;\n      number /= DECIMAL_BASE;\n    }\n\n    powString = (power >= 0 ? \"+\" : \"\") + power.toString();\n    return this._formatNumberCore(number, \"fixedpoint\", formatConfig) + \"E\" + powString;\n  },\n  _addZeroes: function _addZeroes(value, precision) {\n    var multiplier = Math.pow(10, precision);\n    var sign = value < 0 ? \"-\" : \"\";\n    value = (Math.abs(value) * multiplier >>> 0) / multiplier;\n    var result = value.toString();\n\n    while (result.length < precision) {\n      result = \"0\" + result;\n    }\n\n    return sign + result;\n  },\n  _addGroupSeparators: function _addGroupSeparators(value) {\n    var parts = value.toString().split(\".\");\n    return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, (0, _config2.default)().thousandsSeparator) + (parts[1] ? (0, _config2.default)().decimalSeparator + parts[1] : \"\");\n  },\n  _formatNumberCore: function _formatNumberCore(value, format, formatConfig) {\n    if (\"exponential\" === format) {\n      return this._formatNumberExponential(value, formatConfig);\n    }\n\n    if (\"decimal\" !== format && null !== formatConfig.precision) {\n      formatConfig.precision = formatConfig.precision || 0;\n    }\n\n    if (\"percent\" === format) {\n      value = 100 * value;\n    }\n\n    if (void 0 !== formatConfig.precision) {\n      if (\"decimal\" === format) {\n        value = this._addZeroes(value, formatConfig.precision);\n      } else {\n        value = null === formatConfig.precision ? value.toPrecision() : (0, _utils.toFixed)(value, formatConfig.precision);\n      }\n    }\n\n    if (\"decimal\" !== format) {\n      value = this._addGroupSeparators(value);\n    } else {\n      value = value.toString().replace(\".\", (0, _config2.default)().decimalSeparator);\n    }\n\n    if (\"percent\" === format) {\n      value += \"%\";\n    }\n\n    return value;\n  },\n  _normalizeFormat: function _normalizeFormat(format) {\n    if (!format) {\n      return {};\n    }\n\n    if (\"function\" === typeof format) {\n      return format;\n    }\n\n    if (!(0, _type.isPlainObject)(format)) {\n      format = {\n        type: format\n      };\n    }\n\n    return format;\n  },\n  _getSeparators: function _getSeparators() {\n    return {\n      decimalSeparator: this.getDecimalSeparator(),\n      thousandsSeparator: this.getThousandsSeparator()\n    };\n  },\n  getThousandsSeparator: function getThousandsSeparator() {\n    return this.format(1e4, \"fixedPoint\")[2];\n  },\n  getDecimalSeparator: function getDecimalSeparator() {\n    return this.format(1.2, {\n      type: \"fixedPoint\",\n      precision: 1\n    })[1];\n  },\n  convertDigits: function convertDigits(value, toStandard) {\n    var digits = this.format(90, \"decimal\");\n\n    if (\"string\" !== typeof value || \"0\" === digits[1]) {\n      return value;\n    }\n\n    var fromFirstDigit = toStandard ? digits[1] : \"0\";\n    var toFirstDigit = toStandard ? \"0\" : digits[1];\n    var fromLastDigit = toStandard ? digits[0] : \"9\";\n    var regExp = new RegExp(\"[\" + fromFirstDigit + \"-\" + fromLastDigit + \"]\", \"g\");\n    return value.replace(regExp, function (char) {\n      return String.fromCharCode(char.charCodeAt(0) + (toFirstDigit.charCodeAt(0) - fromFirstDigit.charCodeAt(0)));\n    });\n  },\n  getSign: function getSign(text, format) {\n    if (\"-\" === text.replace(/[^0-9-]/g, \"\").charAt(0)) {\n      return -1;\n    }\n\n    if (!format) {\n      return 1;\n    }\n\n    var separators = this._getSeparators();\n\n    var regExp = new RegExp(\"[0-9\" + (0, _common.escapeRegExp)(separators.decimalSeparator + separators.thousandsSeparator) + \"]+\", \"g\");\n    var negativeEtalon = this.format(-1, format).replace(regExp, \"1\");\n    var cleanedText = text.replace(regExp, \"1\");\n    return cleanedText === negativeEtalon ? -1 : 1;\n  },\n  format: function format(value, _format) {\n    if (\"number\" !== typeof value) {\n      return value;\n    }\n\n    if (\"number\" === typeof _format) {\n      return value;\n    }\n\n    _format = _format && _format.formatter || _format;\n\n    if (\"function\" === typeof _format) {\n      return _format(value);\n    }\n\n    _format = this._normalizeFormat(_format);\n\n    if (!_format.type) {\n      _format.type = \"decimal\";\n    }\n\n    var numberConfig = this._parseNumberFormatString(_format.type);\n\n    if (!numberConfig) {\n      return this.convertDigits(_number2.default.getFormatter(_format.type, this._getSeparators())(value));\n    }\n\n    return this._formatNumber(value, numberConfig, _format);\n  },\n  parse: function parse(text, format) {\n    if (!text) {\n      return;\n    }\n\n    if (format && format.parser) {\n      return format.parser(text);\n    }\n\n    text = this.convertDigits(text, true);\n\n    if (format && \"string\" !== typeof format) {\n      _errors2.default.log(\"W0011\");\n    }\n\n    var decimalSeparator = this.getDecimalSeparator();\n    var regExp = new RegExp(\"[^0-9\" + (0, _common.escapeRegExp)(decimalSeparator) + \"]\", \"g\");\n    var cleanedText = text.replace(regExp, \"\").replace(decimalSeparator, \".\").replace(/\\.$/g, \"\");\n\n    if (\".\" === cleanedText || \"\" === cleanedText) {\n      return null;\n    }\n\n    if (this._calcSignificantDigits(cleanedText) > 15) {\n      return NaN;\n    }\n\n    var parsed = +cleanedText;\n    return parsed * this.getSign(text, format);\n  },\n  _calcSignificantDigits: function _calcSignificantDigits(text) {\n    var _text$split = text.split(\".\"),\n        _text$split2 = _slicedToArray(_text$split, 2),\n        integer = _text$split2[0],\n        fractional = _text$split2[1];\n\n    var calcDigitsAfterLeadingZeros = function calcDigitsAfterLeadingZeros(digits) {\n      var index = -1;\n\n      for (var i = 0; i < digits.length; i++) {\n        if (\"0\" !== digits[i]) {\n          index = i;\n          break;\n        }\n      }\n\n      return index > -1 ? digits.length - index : 0;\n    };\n\n    var result = 0;\n\n    if (integer) {\n      result += calcDigitsAfterLeadingZeros(integer.split(\"\"));\n    }\n\n    if (fractional) {\n      result += calcDigitsAfterLeadingZeros(fractional.split(\"\").reverse());\n    }\n\n    return result;\n  }\n});\nnumberLocalization.inject(_currency2.default);\n\nif (hasIntl) {\n  numberLocalization.inject(_number4.default);\n}\n\nmodule.exports = numberLocalization;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/localization/number.js"],"names":["_dependency_injector","require","_dependency_injector2","_interopRequireDefault","_array","_common","_iterator","_type","_number","_number2","_config","_config2","_errors","_errors2","_utils","_currency","_currency2","_number3","_number4","obj","__esModule","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","Symbol","iterator","_arr","_n","_d","_e","_s","_i","next","done","push","value","err","return","isArray","hasIntl","Intl","MAX_LARGE_NUMBER_POWER","DECIMAL_BASE","NUMERIC_FORMATS","LargeNumberFormatPostfixes","LargeNumberFormatPowers","largenumber","thousands","millions","billions","trillions","numberLocalization","default","engine","numericFormats","defaultLargeNumberFormatPostfixes","_parseNumberFormatString","formatType","formatList","formatObject","toLowerCase","split","each","index","inArray","power","_calculateNumberPower","base","minPower","maxPower","number","Math","abs","_getNumberByPower","result","_formatNumber","formatConfig","powerPostfix","_formatNumberCore","replace","_formatNumberExponential","powString","precision","toFixed","_addZeroes","multiplier","pow","sign","_addGroupSeparators","parts","thousandsSeparator","decimalSeparator","format","toPrecision","_normalizeFormat","isPlainObject","type","_getSeparators","getDecimalSeparator","getThousandsSeparator","convertDigits","toStandard","digits","fromFirstDigit","toFirstDigit","fromLastDigit","regExp","RegExp","char","String","fromCharCode","charCodeAt","getSign","text","charAt","separators","escapeRegExp","negativeEtalon","cleanedText","_format","formatter","numberConfig","getFormatter","parse","parser","log","_calcSignificantDigits","NaN","parsed","_text$split","_text$split2","integer","fractional","calcDigitsAfterLeadingZeros","reverse","inject","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (localization/number.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _dependency_injector = require(\"../core/utils/dependency_injector\");\r\nvar _dependency_injector2 = _interopRequireDefault(_dependency_injector);\r\nvar _array = require(\"../core/utils/array\");\r\nvar _common = require(\"../core/utils/common\");\r\nvar _iterator = require(\"../core/utils/iterator\");\r\nvar _type = require(\"../core/utils/type\");\r\nvar _number = require(\"./ldml/number\");\r\nvar _number2 = _interopRequireDefault(_number);\r\nvar _config = require(\"../core/config\");\r\nvar _config2 = _interopRequireDefault(_config);\r\nvar _errors = require(\"../core/errors\");\r\nvar _errors2 = _interopRequireDefault(_errors);\r\nvar _utils = require(\"./utils\");\r\nvar _currency = require(\"./currency\");\r\nvar _currency2 = _interopRequireDefault(_currency);\r\nvar _number3 = require(\"./intl/number\");\r\nvar _number4 = _interopRequireDefault(_number3);\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\n\r\nfunction _slicedToArray(arr, i) {\r\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest()\r\n}\r\n\r\nfunction _nonIterableRest() {\r\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")\r\n}\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n    if (!o) {\r\n        return\r\n    }\r\n    if (\"string\" === typeof o) {\r\n        return _arrayLikeToArray(o, minLen)\r\n    }\r\n    var n = Object.prototype.toString.call(o).slice(8, -1);\r\n    if (\"Object\" === n && o.constructor) {\r\n        n = o.constructor.name\r\n    }\r\n    if (\"Map\" === n || \"Set\" === n) {\r\n        return Array.from(n)\r\n    }\r\n    if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\r\n        return _arrayLikeToArray(o, minLen)\r\n    }\r\n}\r\n\r\nfunction _arrayLikeToArray(arr, len) {\r\n    if (null == len || len > arr.length) {\r\n        len = arr.length\r\n    }\r\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n        arr2[i] = arr[i]\r\n    }\r\n    return arr2\r\n}\r\n\r\nfunction _iterableToArrayLimit(arr, i) {\r\n    if (\"undefined\" === typeof Symbol || !(Symbol.iterator in Object(arr))) {\r\n        return\r\n    }\r\n    var _arr = [];\r\n    var _n = true;\r\n    var _d = false;\r\n    var _e = void 0;\r\n    try {\r\n        for (var _s, _i = arr[Symbol.iterator](); !(_n = (_s = _i.next()).done); _n = true) {\r\n            _arr.push(_s.value);\r\n            if (i && _arr.length === i) {\r\n                break\r\n            }\r\n        }\r\n    } catch (err) {\r\n        _d = true;\r\n        _e = err\r\n    } finally {\r\n        try {\r\n            if (!_n && null != _i.return) {\r\n                _i.return()\r\n            }\r\n        } finally {\r\n            if (_d) {\r\n                throw _e\r\n            }\r\n        }\r\n    }\r\n    return _arr\r\n}\r\n\r\nfunction _arrayWithHoles(arr) {\r\n    if (Array.isArray(arr)) {\r\n        return arr\r\n    }\r\n}\r\nvar hasIntl = \"undefined\" !== typeof Intl;\r\nvar MAX_LARGE_NUMBER_POWER = 4;\r\nvar DECIMAL_BASE = 10;\r\nvar NUMERIC_FORMATS = [\"currency\", \"fixedpoint\", \"exponential\", \"percent\", \"decimal\"];\r\nvar LargeNumberFormatPostfixes = {\r\n    1: \"K\",\r\n    2: \"M\",\r\n    3: \"B\",\r\n    4: \"T\"\r\n};\r\nvar LargeNumberFormatPowers = {\r\n    largenumber: \"auto\",\r\n    thousands: 1,\r\n    millions: 2,\r\n    billions: 3,\r\n    trillions: 4\r\n};\r\nvar numberLocalization = (0, _dependency_injector2.default)({\r\n    engine: function() {\r\n        return \"base\"\r\n    },\r\n    numericFormats: NUMERIC_FORMATS,\r\n    defaultLargeNumberFormatPostfixes: LargeNumberFormatPostfixes,\r\n    _parseNumberFormatString: function(formatType) {\r\n        var formatList;\r\n        var formatObject = {};\r\n        if (!formatType || \"string\" !== typeof formatType) {\r\n            return\r\n        }\r\n        formatList = formatType.toLowerCase().split(\" \");\r\n        (0, _iterator.each)(formatList, function(index, value) {\r\n            if ((0, _array.inArray)(value, NUMERIC_FORMATS) > -1) {\r\n                formatObject.formatType = value\r\n            } else {\r\n                if (value in LargeNumberFormatPowers) {\r\n                    formatObject.power = LargeNumberFormatPowers[value]\r\n                }\r\n            }\r\n        });\r\n        if (formatObject.power && !formatObject.formatType) {\r\n            formatObject.formatType = \"fixedpoint\"\r\n        }\r\n        if (formatObject.formatType) {\r\n            return formatObject\r\n        }\r\n    },\r\n    _calculateNumberPower: function(value, base, minPower, maxPower) {\r\n        var number = Math.abs(value);\r\n        var power = 0;\r\n        if (number > 1) {\r\n            while (number && number >= base && (void 0 === maxPower || power < maxPower)) {\r\n                power++;\r\n                number /= base\r\n            }\r\n        } else {\r\n            if (number > 0 && number < 1) {\r\n                while (number < 1 && (void 0 === minPower || power > minPower)) {\r\n                    power--;\r\n                    number *= base\r\n                }\r\n            }\r\n        }\r\n        return power\r\n    },\r\n    _getNumberByPower: function(number, power, base) {\r\n        var result = number;\r\n        while (power > 0) {\r\n            result /= base;\r\n            power--\r\n        }\r\n        while (power < 0) {\r\n            result *= base;\r\n            power++\r\n        }\r\n        return result\r\n    },\r\n    _formatNumber: function(value, formatObject, formatConfig) {\r\n        var powerPostfix;\r\n        var result;\r\n        if (\"auto\" === formatObject.power) {\r\n            formatObject.power = this._calculateNumberPower(value, 1e3, 0, MAX_LARGE_NUMBER_POWER)\r\n        }\r\n        if (formatObject.power) {\r\n            value = this._getNumberByPower(value, formatObject.power, 1e3)\r\n        }\r\n        powerPostfix = this.defaultLargeNumberFormatPostfixes[formatObject.power] || \"\";\r\n        result = this._formatNumberCore(value, formatObject.formatType, formatConfig);\r\n        result = result.replace(/(\\d|.$)(\\D*)$/, \"$1\" + powerPostfix + \"$2\");\r\n        return result\r\n    },\r\n    _formatNumberExponential: function(value, formatConfig) {\r\n        var power = this._calculateNumberPower(value, DECIMAL_BASE);\r\n        var number = this._getNumberByPower(value, power, DECIMAL_BASE);\r\n        var powString;\r\n        if (void 0 === formatConfig.precision) {\r\n            formatConfig.precision = 1\r\n        }\r\n        if (number.toFixed(formatConfig.precision || 0) >= DECIMAL_BASE) {\r\n            power++;\r\n            number /= DECIMAL_BASE\r\n        }\r\n        powString = (power >= 0 ? \"+\" : \"\") + power.toString();\r\n        return this._formatNumberCore(number, \"fixedpoint\", formatConfig) + \"E\" + powString\r\n    },\r\n    _addZeroes: function(value, precision) {\r\n        var multiplier = Math.pow(10, precision);\r\n        var sign = value < 0 ? \"-\" : \"\";\r\n        value = (Math.abs(value) * multiplier >>> 0) / multiplier;\r\n        var result = value.toString();\r\n        while (result.length < precision) {\r\n            result = \"0\" + result\r\n        }\r\n        return sign + result\r\n    },\r\n    _addGroupSeparators: function(value) {\r\n        var parts = value.toString().split(\".\");\r\n        return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, (0, _config2.default)().thousandsSeparator) + (parts[1] ? (0, _config2.default)().decimalSeparator + parts[1] : \"\")\r\n    },\r\n    _formatNumberCore: function(value, format, formatConfig) {\r\n        if (\"exponential\" === format) {\r\n            return this._formatNumberExponential(value, formatConfig)\r\n        }\r\n        if (\"decimal\" !== format && null !== formatConfig.precision) {\r\n            formatConfig.precision = formatConfig.precision || 0\r\n        }\r\n        if (\"percent\" === format) {\r\n            value = 100 * value\r\n        }\r\n        if (void 0 !== formatConfig.precision) {\r\n            if (\"decimal\" === format) {\r\n                value = this._addZeroes(value, formatConfig.precision)\r\n            } else {\r\n                value = null === formatConfig.precision ? value.toPrecision() : (0, _utils.toFixed)(value, formatConfig.precision)\r\n            }\r\n        }\r\n        if (\"decimal\" !== format) {\r\n            value = this._addGroupSeparators(value)\r\n        } else {\r\n            value = value.toString().replace(\".\", (0, _config2.default)().decimalSeparator)\r\n        }\r\n        if (\"percent\" === format) {\r\n            value += \"%\"\r\n        }\r\n        return value\r\n    },\r\n    _normalizeFormat: function(format) {\r\n        if (!format) {\r\n            return {}\r\n        }\r\n        if (\"function\" === typeof format) {\r\n            return format\r\n        }\r\n        if (!(0, _type.isPlainObject)(format)) {\r\n            format = {\r\n                type: format\r\n            }\r\n        }\r\n        return format\r\n    },\r\n    _getSeparators: function() {\r\n        return {\r\n            decimalSeparator: this.getDecimalSeparator(),\r\n            thousandsSeparator: this.getThousandsSeparator()\r\n        }\r\n    },\r\n    getThousandsSeparator: function() {\r\n        return this.format(1e4, \"fixedPoint\")[2]\r\n    },\r\n    getDecimalSeparator: function() {\r\n        return this.format(1.2, {\r\n            type: \"fixedPoint\",\r\n            precision: 1\r\n        })[1]\r\n    },\r\n    convertDigits: function(value, toStandard) {\r\n        var digits = this.format(90, \"decimal\");\r\n        if (\"string\" !== typeof value || \"0\" === digits[1]) {\r\n            return value\r\n        }\r\n        var fromFirstDigit = toStandard ? digits[1] : \"0\";\r\n        var toFirstDigit = toStandard ? \"0\" : digits[1];\r\n        var fromLastDigit = toStandard ? digits[0] : \"9\";\r\n        var regExp = new RegExp(\"[\" + fromFirstDigit + \"-\" + fromLastDigit + \"]\", \"g\");\r\n        return value.replace(regExp, function(char) {\r\n            return String.fromCharCode(char.charCodeAt(0) + (toFirstDigit.charCodeAt(0) - fromFirstDigit.charCodeAt(0)))\r\n        })\r\n    },\r\n    getSign: function(text, format) {\r\n        if (\"-\" === text.replace(/[^0-9-]/g, \"\").charAt(0)) {\r\n            return -1\r\n        }\r\n        if (!format) {\r\n            return 1\r\n        }\r\n        var separators = this._getSeparators();\r\n        var regExp = new RegExp(\"[0-9\" + (0, _common.escapeRegExp)(separators.decimalSeparator + separators.thousandsSeparator) + \"]+\", \"g\");\r\n        var negativeEtalon = this.format(-1, format).replace(regExp, \"1\");\r\n        var cleanedText = text.replace(regExp, \"1\");\r\n        return cleanedText === negativeEtalon ? -1 : 1\r\n    },\r\n    format: function(value, _format) {\r\n        if (\"number\" !== typeof value) {\r\n            return value\r\n        }\r\n        if (\"number\" === typeof _format) {\r\n            return value\r\n        }\r\n        _format = _format && _format.formatter || _format;\r\n        if (\"function\" === typeof _format) {\r\n            return _format(value)\r\n        }\r\n        _format = this._normalizeFormat(_format);\r\n        if (!_format.type) {\r\n            _format.type = \"decimal\"\r\n        }\r\n        var numberConfig = this._parseNumberFormatString(_format.type);\r\n        if (!numberConfig) {\r\n            return this.convertDigits(_number2.default.getFormatter(_format.type, this._getSeparators())(value))\r\n        }\r\n        return this._formatNumber(value, numberConfig, _format)\r\n    },\r\n    parse: function(text, format) {\r\n        if (!text) {\r\n            return\r\n        }\r\n        if (format && format.parser) {\r\n            return format.parser(text)\r\n        }\r\n        text = this.convertDigits(text, true);\r\n        if (format && \"string\" !== typeof format) {\r\n            _errors2.default.log(\"W0011\")\r\n        }\r\n        var decimalSeparator = this.getDecimalSeparator();\r\n        var regExp = new RegExp(\"[^0-9\" + (0, _common.escapeRegExp)(decimalSeparator) + \"]\", \"g\");\r\n        var cleanedText = text.replace(regExp, \"\").replace(decimalSeparator, \".\").replace(/\\.$/g, \"\");\r\n        if (\".\" === cleanedText || \"\" === cleanedText) {\r\n            return null\r\n        }\r\n        if (this._calcSignificantDigits(cleanedText) > 15) {\r\n            return NaN\r\n        }\r\n        var parsed = +cleanedText;\r\n        return parsed * this.getSign(text, format)\r\n    },\r\n    _calcSignificantDigits: function(text) {\r\n        var _text$split = text.split(\".\"),\r\n            _text$split2 = _slicedToArray(_text$split, 2),\r\n            integer = _text$split2[0],\r\n            fractional = _text$split2[1];\r\n        var calcDigitsAfterLeadingZeros = function(digits) {\r\n            var index = -1;\r\n            for (var i = 0; i < digits.length; i++) {\r\n                if (\"0\" !== digits[i]) {\r\n                    index = i;\r\n                    break\r\n                }\r\n            }\r\n            return index > -1 ? digits.length - index : 0\r\n        };\r\n        var result = 0;\r\n        if (integer) {\r\n            result += calcDigitsAfterLeadingZeros(integer.split(\"\"))\r\n        }\r\n        if (fractional) {\r\n            result += calcDigitsAfterLeadingZeros(fractional.split(\"\").reverse())\r\n        }\r\n        return result\r\n    }\r\n});\r\nnumberLocalization.inject(_currency2.default);\r\nif (hasIntl) {\r\n    numberLocalization.inject(_number4.default)\r\n}\r\nmodule.exports = numberLocalization;\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\va112\\\\Documents\\\\Webdev\\\\React\\\\Corona\\\\src\\\\Components\\\\Graph.jsx\";\nimport React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Chart, ArgumentAxis, ValueAxis, SplineSeries } from \"@devexpress/dx-react-chart-material-ui\";\n\nfunction Graph(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        history = _useState2[0],\n        setHist = _useState2[1];\n\n  const SetH = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var rec;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios(\"https://corona.lmao.ninja/v2/historical\").then(response => {\n              const Timeline = response.data;\n              return Timeline;\n            }).catch(error => {\n              console.log(error);\n            });\n\n          case 2:\n            rec = _context.sent;\n            setHist(rec);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function SetH() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  SetH();\n  setInterval(SetH, 86400000);\n\n  const generateData = (start, end, step) => {\n    const data = [];\n\n    for (let i = start; i < end; i += step) {\n      data.push({\n        value: Math.sin(i) / i,\n        argument: i\n      });\n    }\n\n    return data;\n  };\n\n  const data = generateData(2.5, 12, 0.5);\n  return /*#__PURE__*/React.createElement(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Chart, {\n    data: data,\n    width: 350,\n    height: 350,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ArgumentAxis, {\n    showGrid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ValueAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SplineSeries, {\n    valueField: \"value\",\n    argumentField: \"argument\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Graph;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/src/Components/Graph.jsx"],"names":["React","Paper","Chart","ArgumentAxis","ValueAxis","SplineSeries","Graph","props","useState","history","setHist","SetH","axios","then","response","Timeline","data","catch","error","console","log","rec","setInterval","generateData","start","end","step","i","push","value","Math","sin","argument"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SACEC,KADF,EAEEC,YAFF,EAGEC,SAHF,EAIEC,YAJF,QAKO,wCALP;;AAOA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA,oBAEOC,QAAQ,CAAC,EAAD,CAFf;AAAA;AAAA,QAEbC,OAFa;AAAA,QAEJC,OAFI;;AAIpB,QAAMC,IAAI;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACOC,KAAK,CAAC,yCAAD,CAAL,CACjBC,IADiB,CACXC,QAAD,IAAY;AACd,oBAAMC,QAAQ,GAAGD,QAAQ,CAACE,IAA1B;AACA,qBAAOD,QAAP;AACH,aAJiB,EAKjBE,KALiB,CAKVC,KAAD,IAAS;AACZC,cAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACL,aAPmB,CADP;;AAAA;AACLG,YAAAA,GADK;AASbX,YAAAA,OAAO,CAACW,GAAD,CAAP;;AATa;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAJV,IAAI;AAAA;AAAA;AAAA,KAAV;;AAWAA,EAAAA,IAAI;AACJW,EAAAA,WAAW,CAACX,IAAD,EAAM,QAAN,CAAX;;AAEA,QAAMY,YAAY,GAAG,CAACC,KAAD,EAAQC,GAAR,EAAaC,IAAb,KAAsB;AACvC,UAAMV,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIW,CAAC,GAAGH,KAAb,EAAoBG,CAAC,GAAGF,GAAxB,EAA6BE,CAAC,IAAID,IAAlC,EAAwC;AACtCV,MAAAA,IAAI,CAACY,IAAL,CAAU;AAAEC,QAAAA,KAAK,EAAEC,IAAI,CAACC,GAAL,CAASJ,CAAT,IAAcA,CAAvB;AAA0BK,QAAAA,QAAQ,EAAEL;AAApC,OAAV;AACD;;AAED,WAAOX,IAAP;AACD,GAPH;;AAQE,QAAMA,IAAI,GAAGO,YAAY,CAAC,GAAD,EAAM,EAAN,EAAU,GAAV,CAAzB;AACF,sBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEP,IAAb;AAAmB,IAAA,KAAK,EAAE,GAA1B;AAA+B,IAAA,MAAM,EAAE,GAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,QAAQ,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAIE,oBAAC,YAAD;AAAc,IAAA,UAAU,EAAC,OAAzB;AAAiC,IAAA,aAAa,EAAC,UAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CADF;AAUD;;AAED,eAAeV,KAAf","sourcesContent":["import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n  Chart,\r\n  ArgumentAxis,\r\n  ValueAxis,\r\n  SplineSeries\r\n} from \"@devexpress/dx-react-chart-material-ui\";\r\n\r\nfunction Graph(props) {\r\n\r\n  const [history, setHist] = useState([]);\r\n\r\n  const SetH = async () => {\r\n    const rec = await axios(\"https://corona.lmao.ninja/v2/historical\")\r\n    .then((response)=>{\r\n        const Timeline = response.data;\r\n        return Timeline;\r\n    })\r\n    .catch((error)=>{\r\n        console.log(error)\r\n  });\r\n  setHist(rec);\r\n  }\r\n  SetH();\r\n  setInterval(SetH,86400000);\r\n\r\n  const generateData = (start, end, step) => {\r\n      const data = [];\r\n      for (let i = start; i < end; i += step) {\r\n        data.push({ value: Math.sin(i) / i, argument: i });\r\n      }\r\n    \r\n      return data;\r\n    };\r\n    const data = generateData(2.5, 12, 0.5);\r\n  return (\r\n    <Paper>\r\n      <Chart data={data} width={350} height={350}>\r\n        <ArgumentAxis showGrid />\r\n        <ValueAxis />\r\n\r\n        <SplineSeries valueField=\"value\" argumentField=\"argument\" />\r\n      </Chart>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Graph;"]},"metadata":{},"sourceType":"module"}
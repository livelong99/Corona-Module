{"ast":null,"code":"/**\r\n * DevExtreme (events/pointer/observer.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar readyCallbacks = require(\"../../core/utils/ready_callbacks\");\n\nvar domAdapter = require(\"../../core/dom_adapter\");\n\nvar addEventsListener = function addEventsListener(events, handler) {\n  readyCallbacks.add(function () {\n    events.split(\" \").forEach(function (event) {\n      domAdapter.listen(domAdapter.getDocument(), event, handler, true);\n    });\n  });\n};\n\nvar Observer = function Observer(eventMap, pointerEquals, onPointerAdding) {\n  onPointerAdding = onPointerAdding || function () {};\n\n  var pointers = [];\n\n  var getPointerIndex = function getPointerIndex(e) {\n    var index = -1;\n    each(pointers, function (i, pointer) {\n      if (!pointerEquals(e, pointer)) {\n        return true;\n      }\n\n      index = i;\n      return false;\n    });\n    return index;\n  };\n\n  var addPointer = function addPointer(e) {\n    if (getPointerIndex(e) === -1) {\n      onPointerAdding(e);\n      pointers.push(e);\n    }\n  };\n\n  var removePointer = function removePointer(e) {\n    var index = getPointerIndex(e);\n\n    if (index > -1) {\n      pointers.splice(index, 1);\n    }\n  };\n\n  var updatePointer = function updatePointer(e) {\n    pointers[getPointerIndex(e)] = e;\n  };\n\n  addEventsListener(eventMap.dxpointerdown, addPointer);\n  addEventsListener(eventMap.dxpointermove, updatePointer);\n  addEventsListener(eventMap.dxpointerup, removePointer);\n  addEventsListener(eventMap.dxpointercancel, removePointer);\n\n  this.pointers = function () {\n    return pointers;\n  };\n\n  this.reset = function () {\n    pointers = [];\n  };\n};\n\nmodule.exports = Observer;","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/events/pointer/observer.js"],"names":["each","require","readyCallbacks","domAdapter","addEventsListener","events","handler","add","split","forEach","event","listen","getDocument","Observer","eventMap","pointerEquals","onPointerAdding","pointers","getPointerIndex","e","index","i","pointer","addPointer","push","removePointer","splice","updatePointer","dxpointerdown","dxpointermove","dxpointerup","dxpointercancel","reset","module","exports"],"mappings":"AAAA;;;;;;;;AAQA;;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,2BAAD,CAAP,CAAqCD,IAAhD;;AACA,IAAIE,cAAc,GAAGD,OAAO,CAAC,kCAAD,CAA5B;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,wBAAD,CAAxB;;AACA,IAAIG,iBAAiB,GAAG,SAApBA,iBAAoB,CAASC,MAAT,EAAiBC,OAAjB,EAA0B;AAC9CJ,EAAAA,cAAc,CAACK,GAAf,CAAmB,YAAW;AAC1BF,IAAAA,MAAM,CAACG,KAAP,CAAa,GAAb,EAAkBC,OAAlB,CAA0B,UAASC,KAAT,EAAgB;AACtCP,MAAAA,UAAU,CAACQ,MAAX,CAAkBR,UAAU,CAACS,WAAX,EAAlB,EAA4CF,KAA5C,EAAmDJ,OAAnD,EAA4D,IAA5D;AACH,KAFD;AAGH,GAJD;AAKH,CAND;;AAOA,IAAIO,QAAQ,GAAG,SAAXA,QAAW,CAASC,QAAT,EAAmBC,aAAnB,EAAkCC,eAAlC,EAAmD;AAC9DA,EAAAA,eAAe,GAAGA,eAAe,IAAI,YAAW,CAAE,CAAlD;;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAASC,CAAT,EAAY;AAC9B,QAAIC,KAAK,GAAG,CAAC,CAAb;AACApB,IAAAA,IAAI,CAACiB,QAAD,EAAW,UAASI,CAAT,EAAYC,OAAZ,EAAqB;AAChC,UAAI,CAACP,aAAa,CAACI,CAAD,EAAIG,OAAJ,CAAlB,EAAgC;AAC5B,eAAO,IAAP;AACH;;AACDF,MAAAA,KAAK,GAAGC,CAAR;AACA,aAAO,KAAP;AACH,KANG,CAAJ;AAOA,WAAOD,KAAP;AACH,GAVD;;AAWA,MAAIG,UAAU,GAAG,SAAbA,UAAa,CAASJ,CAAT,EAAY;AACzB,QAAID,eAAe,CAACC,CAAD,CAAf,KAAuB,CAAC,CAA5B,EAA+B;AAC3BH,MAAAA,eAAe,CAACG,CAAD,CAAf;AACAF,MAAAA,QAAQ,CAACO,IAAT,CAAcL,CAAd;AACH;AACJ,GALD;;AAMA,MAAIM,aAAa,GAAG,SAAhBA,aAAgB,CAASN,CAAT,EAAY;AAC5B,QAAIC,KAAK,GAAGF,eAAe,CAACC,CAAD,CAA3B;;AACA,QAAIC,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZH,MAAAA,QAAQ,CAACS,MAAT,CAAgBN,KAAhB,EAAuB,CAAvB;AACH;AACJ,GALD;;AAMA,MAAIO,aAAa,GAAG,SAAhBA,aAAgB,CAASR,CAAT,EAAY;AAC5BF,IAAAA,QAAQ,CAACC,eAAe,CAACC,CAAD,CAAhB,CAAR,GAA+BA,CAA/B;AACH,GAFD;;AAGAf,EAAAA,iBAAiB,CAACU,QAAQ,CAACc,aAAV,EAAyBL,UAAzB,CAAjB;AACAnB,EAAAA,iBAAiB,CAACU,QAAQ,CAACe,aAAV,EAAyBF,aAAzB,CAAjB;AACAvB,EAAAA,iBAAiB,CAACU,QAAQ,CAACgB,WAAV,EAAuBL,aAAvB,CAAjB;AACArB,EAAAA,iBAAiB,CAACU,QAAQ,CAACiB,eAAV,EAA2BN,aAA3B,CAAjB;;AACA,OAAKR,QAAL,GAAgB,YAAW;AACvB,WAAOA,QAAP;AACH,GAFD;;AAGA,OAAKe,KAAL,GAAa,YAAW;AACpBf,IAAAA,QAAQ,GAAG,EAAX;AACH,GAFD;AAGH,CAvCD;;AAwCAgB,MAAM,CAACC,OAAP,GAAiBrB,QAAjB","sourcesContent":["/**\r\n * DevExtreme (events/pointer/observer.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar each = require(\"../../core/utils/iterator\").each;\r\nvar readyCallbacks = require(\"../../core/utils/ready_callbacks\");\r\nvar domAdapter = require(\"../../core/dom_adapter\");\r\nvar addEventsListener = function(events, handler) {\r\n    readyCallbacks.add(function() {\r\n        events.split(\" \").forEach(function(event) {\r\n            domAdapter.listen(domAdapter.getDocument(), event, handler, true)\r\n        })\r\n    })\r\n};\r\nvar Observer = function(eventMap, pointerEquals, onPointerAdding) {\r\n    onPointerAdding = onPointerAdding || function() {};\r\n    var pointers = [];\r\n    var getPointerIndex = function(e) {\r\n        var index = -1;\r\n        each(pointers, function(i, pointer) {\r\n            if (!pointerEquals(e, pointer)) {\r\n                return true\r\n            }\r\n            index = i;\r\n            return false\r\n        });\r\n        return index\r\n    };\r\n    var addPointer = function(e) {\r\n        if (getPointerIndex(e) === -1) {\r\n            onPointerAdding(e);\r\n            pointers.push(e)\r\n        }\r\n    };\r\n    var removePointer = function(e) {\r\n        var index = getPointerIndex(e);\r\n        if (index > -1) {\r\n            pointers.splice(index, 1)\r\n        }\r\n    };\r\n    var updatePointer = function(e) {\r\n        pointers[getPointerIndex(e)] = e\r\n    };\r\n    addEventsListener(eventMap.dxpointerdown, addPointer);\r\n    addEventsListener(eventMap.dxpointermove, updatePointer);\r\n    addEventsListener(eventMap.dxpointerup, removePointer);\r\n    addEventsListener(eventMap.dxpointercancel, removePointer);\r\n    this.pointers = function() {\r\n        return pointers\r\n    };\r\n    this.reset = function() {\r\n        pointers = []\r\n    }\r\n};\r\nmodule.exports = Observer;\r\n"]},"metadata":{},"sourceType":"script"}
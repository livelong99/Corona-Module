{"ast":null,"code":"/**\r\n * DevExtreme (exporter/excel_creator.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _class = require(\"../core/class\");\n\nvar _class2 = _interopRequireDefault(_class);\n\nvar _window = require(\"../core/utils/window\");\n\nvar _type = require(\"../core/utils/type\");\n\nvar _extend = require(\"../core/utils/extend\");\n\nvar _ui = require(\"../ui/widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _string = require(\"../core/utils/string\");\n\nvar _string2 = _interopRequireDefault(_string);\n\nvar _jszip = require(\"jszip\");\n\nvar _jszip2 = _interopRequireDefault(_jszip);\n\nvar _file_saver = require(\"./file_saver\");\n\nvar _file_saver2 = _interopRequireDefault(_file_saver);\n\nvar _excel_format_converter = require(\"./excel_format_converter\");\n\nvar _excel_format_converter2 = _interopRequireDefault(_excel_format_converter);\n\nvar _excel = require(\"./excel/excel.file\");\n\nvar _excel2 = _interopRequireDefault(_excel);\n\nvar _deferred = require(\"../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar XML_TAG = '<?xml version=\"1.0\" encoding=\"utf-8\"?>';\nvar GROUP_SHEET_PR_XML = '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>';\nvar SINGLE_SHEET_PR_XML = \"<sheetPr/>\";\nvar BASE_STYLE_XML2 = '<borders count=\"1\"><border><left style=\"thin\"><color rgb=\"FFD3D3D3\"/></left><right style=\"thin\"><color rgb=\"FFD3D3D3\"/></right><top style=\"thin\"><color rgb=\"FFD3D3D3\"/></top><bottom style=\"thin\"><color rgb=\"FFD3D3D3\"/></bottom></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs>';\nvar OPEN_XML_FORMAT_URL = \"http://schemas.openxmlformats.org\";\nvar RELATIONSHIP_PART_NAME = \"rels\";\nvar XL_FOLDER_NAME = \"xl\";\nvar WORKBOOK_FILE_NAME = \"workbook.xml\";\nvar CONTENTTYPES_FILE_NAME = \"[Content_Types].xml\";\nvar SHAREDSTRING_FILE_NAME = \"sharedStrings.xml\";\nvar STYLE_FILE_NAME = \"styles.xml\";\nvar WORKSHEETS_FOLDER = \"worksheets\";\nvar WORKSHEET_FILE_NAME = \"sheet1.xml\";\nvar WORKSHEET_HEADER_XML = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">';\nvar VALID_TYPES = {\n  \"boolean\": \"b\",\n  date: \"d\",\n  number: \"n\",\n  string: \"s\"\n};\nvar EXCEL_START_TIME = Date.UTC(1899, 11, 30);\nvar DAYS_COUNT_BEFORE_29_FEB_1900 = 60;\nvar MAX_DIGIT_WIDTH_IN_PIXELS = 7;\nvar UNSUPPORTED_FORMAT_MAPPING = {\n  quarter: \"shortDate\",\n  quarterAndYear: \"shortDate\",\n  minute: \"longTime\",\n  millisecond: \"longTime\"\n};\n\nvar ExcelCreator = _class2.default.inherit({\n  _getXMLTag: function _getXMLTag(tagName, attributes, content) {\n    var result = \"<\" + tagName;\n    var i;\n    var length = attributes.length;\n    var attr;\n\n    for (i = 0; i < length; i++) {\n      attr = attributes[i];\n\n      if (void 0 !== attr.value) {\n        result = result + \" \" + attr.name + '=\"' + attr.value + '\"';\n      }\n    }\n\n    return (0, _type.isDefined)(content) ? result + \">\" + content + \"</\" + tagName + \">\" : result + \" />\";\n  },\n  _convertToExcelCellRef: function _convertToExcelCellRef(zeroBasedRowIndex, zeroBasedCellIndex) {\n    var columnName = \"\";\n    var max = 26;\n    var charCode;\n    var isCellIndexFound;\n\n    while (!isCellIndexFound) {\n      charCode = 65 + (zeroBasedCellIndex >= max ? zeroBasedCellIndex % max : Math.ceil(zeroBasedCellIndex));\n      columnName = String.fromCharCode(charCode) + columnName;\n\n      if (zeroBasedCellIndex >= max) {\n        zeroBasedCellIndex = Math.floor(zeroBasedCellIndex / max) - 1;\n      } else {\n        isCellIndexFound = true;\n      }\n    }\n\n    return columnName + (zeroBasedRowIndex + 1);\n  },\n  _convertToExcelCellRefAndTrackMaxIndex: function _convertToExcelCellRefAndTrackMaxIndex(rowIndex, cellIndex) {\n    if (this._maxRowIndex < Number(rowIndex)) {\n      this._maxRowIndex = Number(rowIndex);\n    }\n\n    if (this._maxColumnIndex < Number(cellIndex)) {\n      this._maxColumnIndex = Number(cellIndex);\n    }\n\n    return this._convertToExcelCellRef(rowIndex, cellIndex);\n  },\n  _getDataType: function _getDataType(dataType) {\n    return VALID_TYPES[dataType] || VALID_TYPES.string;\n  },\n  _tryGetExcelCellDataType: function _tryGetExcelCellDataType(object) {\n    if ((0, _type.isDefined)(object)) {\n      if (\"number\" === typeof object) {\n        if (isFinite(object)) {\n          return VALID_TYPES.number;\n        } else {\n          return VALID_TYPES.string;\n        }\n      } else {\n        if ((0, _type.isString)(object)) {\n          return VALID_TYPES.string;\n        } else {\n          if ((0, _type.isDate)(object)) {\n            return VALID_TYPES.number;\n          } else {\n            if ((0, _type.isBoolean)(object)) {\n              return VALID_TYPES.boolean;\n            }\n          }\n        }\n      }\n    }\n  },\n  _formatObjectConverter: function _formatObjectConverter(format, dataType) {\n    var result = {\n      format: format,\n      precision: format && format.precision,\n      dataType: dataType\n    };\n\n    if ((0, _type.isObject)(format)) {\n      return (0, _extend.extend)(result, format, {\n        format: format.formatter || format.type,\n        currency: format.currency\n      });\n    }\n\n    return result;\n  },\n  _tryConvertToExcelNumberFormat: function _tryConvertToExcelNumberFormat(format, dataType) {\n    var currency;\n\n    var newFormat = this._formatObjectConverter(format, dataType);\n\n    format = newFormat.format;\n    currency = newFormat.currency;\n    dataType = newFormat.dataType;\n\n    if ((0, _type.isDefined)(format) && \"date\" === dataType) {\n      format = UNSUPPORTED_FORMAT_MAPPING[format && format.type || format] || format;\n    }\n\n    return _excel_format_converter2.default.convertFormat(format, newFormat.precision, dataType, currency);\n  },\n  _appendString: function _appendString(value) {\n    if ((0, _type.isDefined)(value)) {\n      value = String(value);\n\n      if (value.length) {\n        value = _string2.default.encodeHtml(value);\n\n        if (void 0 === this._stringHash[value]) {\n          this._stringHash[value] = this._stringArray.length;\n\n          this._stringArray.push(value);\n        }\n\n        return this._stringHash[value];\n      }\n    }\n  },\n  _tryGetExcelDateValue: function _tryGetExcelDateValue(date) {\n    var days;\n    var totalTime;\n\n    if ((0, _type.isDate)(date)) {\n      days = Math.floor((Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - EXCEL_START_TIME) / 864e5);\n\n      if (days < DAYS_COUNT_BEFORE_29_FEB_1900) {\n        days--;\n      }\n\n      totalTime = (3600 * date.getHours() + 60 * date.getMinutes() + date.getSeconds()) / 86400;\n      return days + totalTime;\n    }\n  },\n  _prepareValue: function _prepareValue(rowIndex, cellIndex) {\n    var dataProvider = this._dataProvider;\n\n    var _ref = dataProvider.getCellData(rowIndex, cellIndex) || {},\n        value = _ref.value,\n        cellSourceData = _ref.cellSourceData;\n\n    var sourceValue;\n\n    var type = this._getDataType(dataProvider.getCellType(rowIndex, cellIndex));\n\n    if (type === VALID_TYPES.date && !(0, _type.isDate)(value)) {\n      type = VALID_TYPES.string;\n    }\n\n    switch (type) {\n      case VALID_TYPES.string:\n        sourceValue = value;\n        value = this._appendString(value);\n        break;\n\n      case VALID_TYPES.date:\n        sourceValue = value;\n        value = this._tryGetExcelDateValue(value);\n        type = VALID_TYPES.number;\n    }\n\n    return {\n      value: value,\n      type: type,\n      sourceValue: sourceValue,\n      cellSourceData: cellSourceData\n    };\n  },\n  _callCustomizeExcelCell: function _callCustomizeExcelCell(_ref2) {\n    var dataProvider = _ref2.dataProvider,\n        value = _ref2.value,\n        style = _ref2.style,\n        sourceData = _ref2.sourceData;\n\n    var styleCopy = _excel2.default.copyCellFormat(style);\n\n    var args = {\n      value: value,\n      numberFormat: styleCopy.numberFormat,\n      clearStyle: function clearStyle() {\n        this.horizontalAlignment = null;\n        this.verticalAlignment = null;\n        this.wrapTextEnabled = null;\n        this.font = null;\n        this.numberFormat = null;\n      }\n    };\n\n    if ((0, _type.isDefined)(styleCopy)) {\n      if ((0, _type.isDefined)(styleCopy.alignment)) {\n        args.horizontalAlignment = styleCopy.alignment.horizontal;\n        args.verticalAlignment = styleCopy.alignment.vertical;\n        args.wrapTextEnabled = styleCopy.alignment.wrapText;\n      }\n\n      args.backgroundColor = styleCopy.backgroundColor;\n      args.fillPatternType = styleCopy.fillPatternType;\n      args.fillPatternColor = styleCopy.fillPatternColor;\n      args.font = styleCopy.font;\n    }\n\n    dataProvider.customizeExcelCell(args, sourceData);\n    var newStyle = styleCopy || {};\n    newStyle.font = args.font;\n    newStyle.alignment = newStyle.alignment || {};\n    newStyle.alignment.horizontal = args.horizontalAlignment;\n    newStyle.alignment.vertical = args.verticalAlignment;\n    newStyle.alignment.wrapText = args.wrapTextEnabled;\n    newStyle.backgroundColor = args.backgroundColor;\n    newStyle.fillPatternType = args.fillPatternType;\n    newStyle.fillPatternColor = args.fillPatternColor;\n    newStyle.numberFormat = args.numberFormat;\n    return {\n      value: args.value,\n      style: newStyle\n    };\n  },\n  _getDataArray: function _getDataArray() {\n    var that = this;\n    var rowIndex;\n    var cellIndex;\n    var cellsArray;\n    var cellData;\n    var result = [];\n    var dataProvider = that._dataProvider;\n    var rowsLength = dataProvider.getRowsCount();\n    var columns = dataProvider.getColumns();\n    var cellsLength;\n\n    for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n      cellsArray = [];\n      cellsLength = columns.length;\n\n      for (cellIndex = 0; cellIndex !== cellsLength; cellIndex++) {\n        cellData = that._prepareValue(rowIndex, cellIndex);\n        var styleArrayIndex = dataProvider.getStyleId(rowIndex, cellIndex);\n        var cellStyleId = this._styleArrayIndexToCellStyleIdMap[styleArrayIndex];\n\n        if (dataProvider.hasCustomizeExcelCell && dataProvider.hasCustomizeExcelCell()) {\n          var value = cellData.sourceValue || cellData.value;\n\n          var modifiedExcelCell = this._callCustomizeExcelCell({\n            dataProvider: dataProvider,\n            value: value,\n            style: that._styleArray[styleArrayIndex],\n            sourceData: cellData.cellSourceData\n          });\n\n          if (modifiedExcelCell.value !== value) {\n            if (_typeof(modifiedExcelCell.value) !== _typeof(value) || \"number\" === typeof modifiedExcelCell.value && !isFinite(modifiedExcelCell.value)) {\n              var cellDataType = this._tryGetExcelCellDataType(modifiedExcelCell.value);\n\n              if ((0, _type.isDefined)(cellDataType)) {\n                cellData.type = cellDataType;\n              }\n            }\n\n            switch (cellData.type) {\n              case VALID_TYPES.string:\n                cellData.value = this._appendString(modifiedExcelCell.value);\n                break;\n\n              case VALID_TYPES.date:\n                cellData.value = modifiedExcelCell.value;\n                break;\n\n              case VALID_TYPES.number:\n                var newValue = modifiedExcelCell.value;\n\n                var excelDateValue = this._tryGetExcelDateValue(newValue);\n\n                if ((0, _type.isDefined)(excelDateValue)) {\n                  newValue = excelDateValue;\n                }\n\n                cellData.value = newValue;\n                break;\n\n              default:\n                cellData.value = modifiedExcelCell.value;\n            }\n          }\n\n          cellStyleId = this._excelFile.registerCellFormat(modifiedExcelCell.style);\n        }\n\n        cellsArray.push({\n          style: cellStyleId,\n          value: cellData.value,\n          type: cellData.type\n        });\n      }\n\n      if (!that._needSheetPr && dataProvider.getGroupLevel(rowIndex) > 0) {\n        that._needSheetPr = true;\n      }\n\n      result.push(cellsArray);\n    }\n\n    return result;\n  },\n  _calculateWidth: function _calculateWidth(pixelsWidth) {\n    pixelsWidth = parseInt(pixelsWidth, 10);\n\n    if (!pixelsWidth || pixelsWidth < 5) {\n      pixelsWidth = 100;\n    }\n\n    return Math.min(255, Math.floor((pixelsWidth - 5) / MAX_DIGIT_WIDTH_IN_PIXELS * 100 + .5) / 100);\n  },\n  _prepareStyleData: function _prepareStyleData() {\n    var _this = this;\n\n    var that = this;\n\n    var styles = that._dataProvider.getStyles();\n\n    that._dataProvider.getColumns().forEach(function (column) {\n      that._colsArray.push(that._calculateWidth(column.width));\n    });\n\n    var fonts = [{\n      size: 11,\n      color: {\n        theme: 1\n      },\n      name: \"Calibri\",\n      family: 2,\n      scheme: \"minor\",\n      bold: false\n    }, {\n      size: 11,\n      color: {\n        theme: 1\n      },\n      name: \"Calibri\",\n      family: 2,\n      scheme: \"minor\",\n      bold: true\n    }];\n\n    this._excelFile.registerFont(fonts[0]);\n\n    this._excelFile.registerFont(fonts[1]);\n\n    styles.forEach(function (style) {\n      var numberFormat = that._tryConvertToExcelNumberFormat(style.format, style.dataType);\n\n      if (!(0, _type.isDefined)(numberFormat)) {\n        numberFormat = 0;\n      }\n\n      that._styleArray.push({\n        font: fonts[Number(!!style.bold)],\n        numberFormat: numberFormat,\n        alignment: {\n          vertical: \"top\",\n          wrapText: !!style.wrapText,\n          horizontal: style.alignment || \"left\"\n        }\n      });\n    });\n    that._styleArrayIndexToCellStyleIdMap = that._styleArray.map(function (item) {\n      return _this._excelFile.registerCellFormat(item);\n    });\n  },\n  _prepareCellData: function _prepareCellData() {\n    this._cellsArray = this._getDataArray();\n  },\n  _createXMLRelationships: function _createXMLRelationships(xmlRelationships) {\n    return this._getXMLTag(\"Relationships\", [{\n      name: \"xmlns\",\n      value: OPEN_XML_FORMAT_URL + \"/package/2006/relationships\"\n    }], xmlRelationships);\n  },\n  _createXMLRelationship: function _createXMLRelationship(id, type, target) {\n    return this._getXMLTag(\"Relationship\", [{\n      name: \"Id\",\n      value: \"rId\" + id\n    }, {\n      name: \"Type\",\n      value: OPEN_XML_FORMAT_URL + \"/officeDocument/2006/relationships/\" + type\n    }, {\n      name: \"Target\",\n      value: target\n    }]);\n  },\n  _getWorkbookContent: function _getWorkbookContent() {\n    var content = '<bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"0\" windowHeight=\"0\"/></bookViews><sheets><sheet name=\"Sheet\" sheetId=\"1\" r:id=\"rId1\" /></sheets><definedNames><definedName name=\"_xlnm.Print_Titles\" localSheetId=\"0\">Sheet!$1:$1</definedName><definedName name=\"_xlnm._FilterDatabase\" hidden=\"0\" localSheetId=\"0\">Sheet!$A$1:$F$6332</definedName></definedNames>';\n    return XML_TAG + this._getXMLTag(\"workbook\", [{\n      name: \"xmlns:r\",\n      value: OPEN_XML_FORMAT_URL + \"/officeDocument/2006/relationships\"\n    }, {\n      name: \"xmlns\",\n      value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\n    }], content);\n  },\n  _getContentTypesContent: function _getContentTypesContent() {\n    return XML_TAG + '<Types xmlns=\"' + OPEN_XML_FORMAT_URL + '/package/2006/content-types\"><Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" /><Default Extension=\"xml\" ContentType=\"application/xml\" /><Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" /><Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" /><Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\" /><Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" /></Types>';\n  },\n  _generateStylesXML: function _generateStylesXML() {\n    var that = this;\n\n    var folder = that._zip.folder(XL_FOLDER_NAME);\n\n    var XML = \"\";\n    XML += this._excelFile.generateNumberFormatsXml();\n    XML += this._excelFile.generateFontsXml();\n    XML += this._excelFile.generateFillsXml();\n    XML += BASE_STYLE_XML2;\n    XML += this._excelFile.generateCellFormatsXml();\n    XML += that._getXMLTag(\"cellStyles\", [{\n      name: \"count\",\n      value: 1\n    }], that._getXMLTag(\"cellStyle\", [{\n      name: \"name\",\n      value: \"Normal\"\n    }, {\n      name: \"xfId\",\n      value: 0\n    }, {\n      name: \"builtinId\",\n      value: 0\n    }]));\n    XML = XML_TAG + that._getXMLTag(\"styleSheet\", [{\n      name: \"xmlns\",\n      value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\n    }], XML);\n    folder.file(STYLE_FILE_NAME, XML);\n    that._styleArray = [];\n  },\n  _generateStringsXML: function _generateStringsXML() {\n    var folder = this._zip.folder(XL_FOLDER_NAME);\n\n    var stringIndex;\n    var stringsLength = this._stringArray.length;\n    var sharedStringXml = XML_TAG;\n\n    for (stringIndex = 0; stringIndex < stringsLength; stringIndex++) {\n      this._stringArray[stringIndex] = this._getXMLTag(\"si\", [], this._getXMLTag(\"t\", [], this._stringArray[stringIndex]));\n    }\n\n    sharedStringXml += this._getXMLTag(\"sst\", [{\n      name: \"xmlns\",\n      value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\n    }, {\n      name: \"count\",\n      value: this._stringArray.length\n    }, {\n      name: \"uniqueCount\",\n      value: this._stringArray.length\n    }], this._stringArray.join(\"\"));\n    folder.file(SHAREDSTRING_FILE_NAME, sharedStringXml);\n    this._stringArray = [];\n  },\n  _getPaneXML: function _getPaneXML() {\n    var attributes = [{\n      name: \"activePane\",\n      value: \"bottomLeft\"\n    }, {\n      name: \"state\",\n      value: \"frozen\"\n    }];\n\n    var frozenArea = this._dataProvider.getFrozenArea();\n\n    if (!(frozenArea.x || frozenArea.y)) {\n      return \"\";\n    }\n\n    if (frozenArea.x) {\n      attributes.push({\n        name: \"xSplit\",\n        value: frozenArea.x\n      });\n    }\n\n    if (frozenArea.y) {\n      attributes.push({\n        name: \"ySplit\",\n        value: frozenArea.y\n      });\n    }\n\n    attributes.push({\n      name: \"topLeftCell\",\n      value: this._convertToExcelCellRefAndTrackMaxIndex(frozenArea.y, frozenArea.x)\n    });\n    return this._getXMLTag(\"pane\", attributes);\n  },\n  _getAutoFilterXML: function _getAutoFilterXML(maxCellIndex) {\n    if (this._options.autoFilterEnabled) {\n      return '<autoFilter ref=\"A' + this._dataProvider.getHeaderRowCount() + \":\" + maxCellIndex + '\" />';\n    }\n\n    return \"\";\n  },\n  _getIgnoredErrorsXML: function _getIgnoredErrorsXML(maxCellIndex) {\n    if (this._options.ignoreErrors) {\n      return '<ignoredErrors><ignoredError sqref=\"A1:' + maxCellIndex + '\" numberStoredAsText=\"1\" /></ignoredErrors>';\n    }\n\n    return \"\";\n  },\n  _generateWorksheetXML: function _generateWorksheetXML() {\n    var colIndex;\n    var rowIndex;\n    var cellData;\n    var xmlCells;\n    var rightBottomCellRef;\n    var xmlRows = [];\n    var rowsLength = this._cellsArray.length;\n    var cellsLength;\n    var colsLength = this._colsArray.length;\n    var rSpans = \"1:\" + colsLength;\n    var headerRowCount = this._dataProvider.getHeaderRowCount ? this._dataProvider.getHeaderRowCount() : 1;\n    var xmlResult = [WORKSHEET_HEADER_XML];\n    xmlResult.push(this._needSheetPr ? GROUP_SHEET_PR_XML : SINGLE_SHEET_PR_XML);\n    xmlResult.push('<dimension ref=\"A1:C1\"/>');\n    xmlResult.push(\"<sheetViews><sheetView \");\n    xmlResult.push(this._rtlEnabled ? 'rightToLeft=\"1\" ' : \"\");\n    xmlResult.push('tabSelected=\"1\" workbookViewId=\"0\">');\n    xmlResult.push(this._getPaneXML());\n    xmlResult.push(\"</sheetView></sheetViews>\");\n    xmlResult.push('<sheetFormatPr defaultRowHeight=\"15\"');\n    xmlResult.push(' outlineLevelRow=\"' + (this._dataProvider.getRowsCount() > 0 ? this._dataProvider.getGroupLevel(0) : 0) + '\"');\n    xmlResult.push(' x14ac:dyDescent=\"0.25\"/>');\n\n    for (colIndex = 0; colIndex < colsLength; colIndex++) {\n      this._colsArray[colIndex] = this._getXMLTag(\"col\", [{\n        name: \"width\",\n        value: this._colsArray[colIndex]\n      }, {\n        name: \"min\",\n        value: Number(colIndex) + 1\n      }, {\n        name: \"max\",\n        value: Number(colIndex) + 1\n      }, {\n        name: \"customWidth\",\n        value: 1\n      }]);\n    }\n\n    xmlResult.push(this._getXMLTag(\"cols\", [], this._colsArray.join(\"\")) + \"<sheetData>\");\n\n    for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n      xmlCells = [];\n      cellsLength = this._cellsArray[rowIndex].length;\n\n      for (colIndex = 0; colIndex < cellsLength; colIndex++) {\n        rowIndex = Number(rowIndex);\n        cellData = this._cellsArray[rowIndex][colIndex];\n        xmlCells.push(this._getXMLTag(\"c\", [{\n          name: \"r\",\n          value: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex, colIndex)\n        }, {\n          name: \"s\",\n          value: cellData.style\n        }, {\n          name: \"t\",\n          value: cellData.type\n        }], (0, _type.isDefined)(cellData.value) ? this._getXMLTag(\"v\", [], cellData.value) : null));\n      }\n\n      xmlRows.push(this._getXMLTag(\"row\", [{\n        name: \"r\",\n        value: Number(rowIndex) + 1\n      }, {\n        name: \"spans\",\n        value: rSpans\n      }, {\n        name: \"outlineLevel\",\n        value: rowIndex >= headerRowCount ? this._dataProvider.getGroupLevel(rowIndex) : 0\n      }, {\n        name: \"x14ac:dyDescent\",\n        value: \"0.25\"\n      }], xmlCells.join(\"\")));\n      this._cellsArray[rowIndex] = null;\n\n      if (xmlRows.length > 1e4) {\n        xmlResult.push(xmlRows.join(\"\"));\n        xmlRows = [];\n      }\n    }\n\n    xmlResult.push(xmlRows.join(\"\"));\n    xmlRows = [];\n    rightBottomCellRef = this._convertToExcelCellRef(this._maxRowIndex, this._maxColumnIndex);\n    xmlResult.push(\"</sheetData>\" + this._getAutoFilterXML(rightBottomCellRef) + this._generateMergingXML() + this._getIgnoredErrorsXML(rightBottomCellRef) + \"</worksheet>\");\n\n    this._zip.folder(XL_FOLDER_NAME).folder(WORKSHEETS_FOLDER).file(WORKSHEET_FILE_NAME, xmlResult.join(\"\"));\n\n    this._colsArray = [];\n    this._cellsArray = [];\n    xmlResult = [];\n  },\n  _generateMergingXML: function _generateMergingXML() {\n    var k;\n    var l;\n    var cellIndex;\n    var rowIndex;\n    var rowsLength = (0, _type.isDefined)(this._dataProvider.getHeaderRowCount) ? this._dataProvider.getHeaderRowCount() : this._dataProvider.getRowsCount();\n\n    var columnsLength = this._dataProvider.getColumns().length;\n\n    var usedArea = [];\n    var mergeArray = [];\n    var mergeArrayLength;\n    var mergeIndex;\n    var mergeXML = \"\";\n\n    for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n      for (cellIndex = 0; cellIndex !== columnsLength; cellIndex++) {\n        if (!(0, _type.isDefined)(usedArea[rowIndex]) || !(0, _type.isDefined)(usedArea[rowIndex][cellIndex])) {\n          var cellMerge = this._dataProvider.getCellMerging(rowIndex, cellIndex);\n\n          if (cellMerge.colspan || cellMerge.rowspan) {\n            mergeArray.push({\n              start: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex, cellIndex),\n              end: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex + (cellMerge.rowspan || 0), cellIndex + (cellMerge.colspan || 0))\n            });\n\n            for (k = rowIndex; k <= rowIndex + cellMerge.rowspan || 0; k++) {\n              for (l = cellIndex; l <= cellIndex + cellMerge.colspan || 0; l++) {\n                if (!(0, _type.isDefined)(usedArea[k])) {\n                  usedArea[k] = [];\n                }\n\n                usedArea[k][l] = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    mergeArrayLength = mergeArray.length;\n\n    for (mergeIndex = 0; mergeIndex < mergeArrayLength; mergeIndex++) {\n      mergeXML += this._getXMLTag(\"mergeCell\", [{\n        name: \"ref\",\n        value: mergeArray[mergeIndex].start + \":\" + mergeArray[mergeIndex].end\n      }]);\n    }\n\n    return mergeXML.length ? this._getXMLTag(\"mergeCells\", [{\n      name: \"count\",\n      value: mergeArrayLength\n    }], mergeXML) : \"\";\n  },\n  _generateCommonXML: function _generateCommonXML() {\n    var relsFileContent = XML_TAG + this._createXMLRelationships(this._createXMLRelationship(1, \"officeDocument\", \"xl/\" + WORKBOOK_FILE_NAME));\n\n    var xmlRelationships;\n\n    var folder = this._zip.folder(XL_FOLDER_NAME);\n\n    var relsXML = XML_TAG;\n\n    this._zip.folder(\"_\" + RELATIONSHIP_PART_NAME).file(\".\" + RELATIONSHIP_PART_NAME, relsFileContent);\n\n    xmlRelationships = this._createXMLRelationship(1, \"worksheet\", \"worksheets/\" + WORKSHEET_FILE_NAME) + this._createXMLRelationship(2, \"styles\", STYLE_FILE_NAME) + this._createXMLRelationship(3, \"sharedStrings\", SHAREDSTRING_FILE_NAME);\n    relsXML += this._createXMLRelationships(xmlRelationships);\n    folder.folder(\"_\" + RELATIONSHIP_PART_NAME).file(WORKBOOK_FILE_NAME + \".rels\", relsXML);\n    folder.file(WORKBOOK_FILE_NAME, this._getWorkbookContent());\n\n    this._zip.file(CONTENTTYPES_FILE_NAME, this._getContentTypesContent());\n  },\n  _generateContent: function _generateContent() {\n    this._prepareStyleData();\n\n    this._prepareCellData();\n\n    this._generateWorkXML();\n\n    this._generateCommonXML();\n  },\n  _generateWorkXML: function _generateWorkXML() {\n    this._generateStylesXML();\n\n    this._generateStringsXML();\n\n    this._generateWorksheetXML();\n  },\n  ctor: function ctor(dataProvider, options) {\n    this._rtlEnabled = options && !!options.rtlEnabled;\n    this._options = options;\n    this._maxRowIndex = 0;\n    this._maxColumnIndex = 0;\n    this._stringArray = [];\n    this._stringHash = {};\n    this._styleArray = [];\n    this._colsArray = [];\n    this._cellsArray = [];\n    this._needSheetPr = false;\n    this._dataProvider = dataProvider;\n    this._excelFile = new _excel2.default();\n\n    if ((0, _type.isDefined)(ExcelCreator.JSZip)) {\n      this._zip = new ExcelCreator.JSZip();\n    } else {\n      this._zip = null;\n    }\n  },\n  _checkZipState: function _checkZipState() {\n    if (!this._zip) {\n      throw _ui2.default.Error(\"E1041\", \"JSZip\");\n    }\n  },\n  ready: function ready() {\n    return this._dataProvider.ready();\n  },\n  getData: function getData(isBlob) {\n    var options = {\n      type: isBlob ? \"blob\" : \"base64\",\n      compression: \"DEFLATE\",\n      mimeType: _file_saver2.default.MIME_TYPES.EXCEL\n    };\n    var deferred = new _deferred.Deferred();\n\n    this._checkZipState();\n\n    this._generateContent();\n\n    if (this._zip.generateAsync) {\n      this._zip.generateAsync(options).then(deferred.resolve);\n    } else {\n      deferred.resolve(this._zip.generate(options));\n    }\n\n    return deferred;\n  }\n});\n\nExcelCreator.JSZip = _jszip2.default;\nexports.ExcelCreator = ExcelCreator;\n\nexports.getData = function (data, options) {\n  var excelCreator = new exports.ExcelCreator(data, options);\n\n  excelCreator._checkZipState();\n\n  return excelCreator.ready().then(function () {\n    return excelCreator.getData((0, _type.isFunction)((0, _window.getWindow)().Blob));\n  });\n};","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/exporter/excel_creator.js"],"names":["_class","require","_class2","_interopRequireDefault","_window","_type","_extend","_ui","_ui2","_string","_string2","_jszip","_jszip2","_file_saver","_file_saver2","_excel_format_converter","_excel_format_converter2","_excel","_excel2","_deferred","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","XML_TAG","GROUP_SHEET_PR_XML","SINGLE_SHEET_PR_XML","BASE_STYLE_XML2","OPEN_XML_FORMAT_URL","RELATIONSHIP_PART_NAME","XL_FOLDER_NAME","WORKBOOK_FILE_NAME","CONTENTTYPES_FILE_NAME","SHAREDSTRING_FILE_NAME","STYLE_FILE_NAME","WORKSHEETS_FOLDER","WORKSHEET_FILE_NAME","WORKSHEET_HEADER_XML","VALID_TYPES","date","number","string","EXCEL_START_TIME","Date","UTC","DAYS_COUNT_BEFORE_29_FEB_1900","MAX_DIGIT_WIDTH_IN_PIXELS","UNSUPPORTED_FORMAT_MAPPING","quarter","quarterAndYear","minute","millisecond","ExcelCreator","default","inherit","_getXMLTag","tagName","attributes","content","result","i","length","attr","value","name","isDefined","_convertToExcelCellRef","zeroBasedRowIndex","zeroBasedCellIndex","columnName","max","charCode","isCellIndexFound","Math","ceil","String","fromCharCode","floor","_convertToExcelCellRefAndTrackMaxIndex","rowIndex","cellIndex","_maxRowIndex","Number","_maxColumnIndex","_getDataType","dataType","_tryGetExcelCellDataType","object","isFinite","isString","isDate","isBoolean","boolean","_formatObjectConverter","format","precision","isObject","extend","formatter","type","currency","_tryConvertToExcelNumberFormat","newFormat","convertFormat","_appendString","encodeHtml","_stringHash","_stringArray","push","_tryGetExcelDateValue","days","totalTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","_prepareValue","dataProvider","_dataProvider","_ref","getCellData","cellSourceData","sourceValue","getCellType","_callCustomizeExcelCell","_ref2","style","sourceData","styleCopy","copyCellFormat","args","numberFormat","clearStyle","horizontalAlignment","verticalAlignment","wrapTextEnabled","font","alignment","horizontal","vertical","wrapText","backgroundColor","fillPatternType","fillPatternColor","customizeExcelCell","newStyle","_getDataArray","that","cellsArray","cellData","rowsLength","getRowsCount","columns","getColumns","cellsLength","styleArrayIndex","getStyleId","cellStyleId","_styleArrayIndexToCellStyleIdMap","hasCustomizeExcelCell","modifiedExcelCell","_styleArray","cellDataType","newValue","excelDateValue","_excelFile","registerCellFormat","_needSheetPr","getGroupLevel","_calculateWidth","pixelsWidth","parseInt","min","_prepareStyleData","_this","styles","getStyles","forEach","column","_colsArray","width","fonts","size","color","theme","family","scheme","bold","registerFont","map","item","_prepareCellData","_cellsArray","_createXMLRelationships","xmlRelationships","_createXMLRelationship","id","target","_getWorkbookContent","_getContentTypesContent","_generateStylesXML","folder","_zip","XML","generateNumberFormatsXml","generateFontsXml","generateFillsXml","generateCellFormatsXml","file","_generateStringsXML","stringIndex","stringsLength","sharedStringXml","join","_getPaneXML","frozenArea","getFrozenArea","x","y","_getAutoFilterXML","maxCellIndex","_options","autoFilterEnabled","getHeaderRowCount","_getIgnoredErrorsXML","ignoreErrors","_generateWorksheetXML","colIndex","xmlCells","rightBottomCellRef","xmlRows","colsLength","rSpans","headerRowCount","xmlResult","_rtlEnabled","_generateMergingXML","k","l","columnsLength","usedArea","mergeArray","mergeArrayLength","mergeIndex","mergeXML","cellMerge","getCellMerging","colspan","rowspan","start","end","_generateCommonXML","relsFileContent","relsXML","_generateContent","_generateWorkXML","ctor","options","rtlEnabled","JSZip","_checkZipState","Error","ready","getData","isBlob","compression","mimeType","MIME_TYPES","EXCEL","deferred","Deferred","generateAsync","then","resolve","generate","exports","data","excelCreator","isFunction","getWindow","Blob"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (exporter/excel_creator.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _class = require(\"../core/class\");\r\nvar _class2 = _interopRequireDefault(_class);\r\nvar _window = require(\"../core/utils/window\");\r\nvar _type = require(\"../core/utils/type\");\r\nvar _extend = require(\"../core/utils/extend\");\r\nvar _ui = require(\"../ui/widget/ui.errors\");\r\nvar _ui2 = _interopRequireDefault(_ui);\r\nvar _string = require(\"../core/utils/string\");\r\nvar _string2 = _interopRequireDefault(_string);\r\nvar _jszip = require(\"jszip\");\r\nvar _jszip2 = _interopRequireDefault(_jszip);\r\nvar _file_saver = require(\"./file_saver\");\r\nvar _file_saver2 = _interopRequireDefault(_file_saver);\r\nvar _excel_format_converter = require(\"./excel_format_converter\");\r\nvar _excel_format_converter2 = _interopRequireDefault(_excel_format_converter);\r\nvar _excel = require(\"./excel/excel.file\");\r\nvar _excel2 = _interopRequireDefault(_excel);\r\nvar _deferred = require(\"../core/utils/deferred\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\n\r\nfunction _typeof(obj) {\r\n    \"@babel/helpers - typeof\";\r\n    if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\r\n        _typeof = function(obj) {\r\n            return typeof obj\r\n        }\r\n    } else {\r\n        _typeof = function(obj) {\r\n            return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj\r\n        }\r\n    }\r\n    return _typeof(obj)\r\n}\r\nvar XML_TAG = '<?xml version=\"1.0\" encoding=\"utf-8\"?>';\r\nvar GROUP_SHEET_PR_XML = '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>';\r\nvar SINGLE_SHEET_PR_XML = \"<sheetPr/>\";\r\nvar BASE_STYLE_XML2 = '<borders count=\"1\"><border><left style=\"thin\"><color rgb=\"FFD3D3D3\"/></left><right style=\"thin\"><color rgb=\"FFD3D3D3\"/></right><top style=\"thin\"><color rgb=\"FFD3D3D3\"/></top><bottom style=\"thin\"><color rgb=\"FFD3D3D3\"/></bottom></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs>';\r\nvar OPEN_XML_FORMAT_URL = \"http://schemas.openxmlformats.org\";\r\nvar RELATIONSHIP_PART_NAME = \"rels\";\r\nvar XL_FOLDER_NAME = \"xl\";\r\nvar WORKBOOK_FILE_NAME = \"workbook.xml\";\r\nvar CONTENTTYPES_FILE_NAME = \"[Content_Types].xml\";\r\nvar SHAREDSTRING_FILE_NAME = \"sharedStrings.xml\";\r\nvar STYLE_FILE_NAME = \"styles.xml\";\r\nvar WORKSHEETS_FOLDER = \"worksheets\";\r\nvar WORKSHEET_FILE_NAME = \"sheet1.xml\";\r\nvar WORKSHEET_HEADER_XML = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">';\r\nvar VALID_TYPES = {\r\n    \"boolean\": \"b\",\r\n    date: \"d\",\r\n    number: \"n\",\r\n    string: \"s\"\r\n};\r\nvar EXCEL_START_TIME = Date.UTC(1899, 11, 30);\r\nvar DAYS_COUNT_BEFORE_29_FEB_1900 = 60;\r\nvar MAX_DIGIT_WIDTH_IN_PIXELS = 7;\r\nvar UNSUPPORTED_FORMAT_MAPPING = {\r\n    quarter: \"shortDate\",\r\n    quarterAndYear: \"shortDate\",\r\n    minute: \"longTime\",\r\n    millisecond: \"longTime\"\r\n};\r\nvar ExcelCreator = _class2.default.inherit({\r\n    _getXMLTag: function(tagName, attributes, content) {\r\n        var result = \"<\" + tagName;\r\n        var i;\r\n        var length = attributes.length;\r\n        var attr;\r\n        for (i = 0; i < length; i++) {\r\n            attr = attributes[i];\r\n            if (void 0 !== attr.value) {\r\n                result = result + \" \" + attr.name + '=\"' + attr.value + '\"'\r\n            }\r\n        }\r\n        return (0, _type.isDefined)(content) ? result + \">\" + content + \"</\" + tagName + \">\" : result + \" />\"\r\n    },\r\n    _convertToExcelCellRef: function(zeroBasedRowIndex, zeroBasedCellIndex) {\r\n        var columnName = \"\";\r\n        var max = 26;\r\n        var charCode;\r\n        var isCellIndexFound;\r\n        while (!isCellIndexFound) {\r\n            charCode = 65 + (zeroBasedCellIndex >= max ? zeroBasedCellIndex % max : Math.ceil(zeroBasedCellIndex));\r\n            columnName = String.fromCharCode(charCode) + columnName;\r\n            if (zeroBasedCellIndex >= max) {\r\n                zeroBasedCellIndex = Math.floor(zeroBasedCellIndex / max) - 1\r\n            } else {\r\n                isCellIndexFound = true\r\n            }\r\n        }\r\n        return columnName + (zeroBasedRowIndex + 1)\r\n    },\r\n    _convertToExcelCellRefAndTrackMaxIndex: function(rowIndex, cellIndex) {\r\n        if (this._maxRowIndex < Number(rowIndex)) {\r\n            this._maxRowIndex = Number(rowIndex)\r\n        }\r\n        if (this._maxColumnIndex < Number(cellIndex)) {\r\n            this._maxColumnIndex = Number(cellIndex)\r\n        }\r\n        return this._convertToExcelCellRef(rowIndex, cellIndex)\r\n    },\r\n    _getDataType: function(dataType) {\r\n        return VALID_TYPES[dataType] || VALID_TYPES.string\r\n    },\r\n    _tryGetExcelCellDataType: function(object) {\r\n        if ((0, _type.isDefined)(object)) {\r\n            if (\"number\" === typeof object) {\r\n                if (isFinite(object)) {\r\n                    return VALID_TYPES.number\r\n                } else {\r\n                    return VALID_TYPES.string\r\n                }\r\n            } else {\r\n                if ((0, _type.isString)(object)) {\r\n                    return VALID_TYPES.string\r\n                } else {\r\n                    if ((0, _type.isDate)(object)) {\r\n                        return VALID_TYPES.number\r\n                    } else {\r\n                        if ((0, _type.isBoolean)(object)) {\r\n                            return VALID_TYPES.boolean\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _formatObjectConverter: function(format, dataType) {\r\n        var result = {\r\n            format: format,\r\n            precision: format && format.precision,\r\n            dataType: dataType\r\n        };\r\n        if ((0, _type.isObject)(format)) {\r\n            return (0, _extend.extend)(result, format, {\r\n                format: format.formatter || format.type,\r\n                currency: format.currency\r\n            })\r\n        }\r\n        return result\r\n    },\r\n    _tryConvertToExcelNumberFormat: function(format, dataType) {\r\n        var currency;\r\n        var newFormat = this._formatObjectConverter(format, dataType);\r\n        format = newFormat.format;\r\n        currency = newFormat.currency;\r\n        dataType = newFormat.dataType;\r\n        if ((0, _type.isDefined)(format) && \"date\" === dataType) {\r\n            format = UNSUPPORTED_FORMAT_MAPPING[format && format.type || format] || format\r\n        }\r\n        return _excel_format_converter2.default.convertFormat(format, newFormat.precision, dataType, currency)\r\n    },\r\n    _appendString: function(value) {\r\n        if ((0, _type.isDefined)(value)) {\r\n            value = String(value);\r\n            if (value.length) {\r\n                value = _string2.default.encodeHtml(value);\r\n                if (void 0 === this._stringHash[value]) {\r\n                    this._stringHash[value] = this._stringArray.length;\r\n                    this._stringArray.push(value)\r\n                }\r\n                return this._stringHash[value]\r\n            }\r\n        }\r\n    },\r\n    _tryGetExcelDateValue: function(date) {\r\n        var days;\r\n        var totalTime;\r\n        if ((0, _type.isDate)(date)) {\r\n            days = Math.floor((Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - EXCEL_START_TIME) / 864e5);\r\n            if (days < DAYS_COUNT_BEFORE_29_FEB_1900) {\r\n                days--\r\n            }\r\n            totalTime = (3600 * date.getHours() + 60 * date.getMinutes() + date.getSeconds()) / 86400;\r\n            return days + totalTime\r\n        }\r\n    },\r\n    _prepareValue: function(rowIndex, cellIndex) {\r\n        var dataProvider = this._dataProvider;\r\n        var _ref = dataProvider.getCellData(rowIndex, cellIndex) || {},\r\n            value = _ref.value,\r\n            cellSourceData = _ref.cellSourceData;\r\n        var sourceValue;\r\n        var type = this._getDataType(dataProvider.getCellType(rowIndex, cellIndex));\r\n        if (type === VALID_TYPES.date && !(0, _type.isDate)(value)) {\r\n            type = VALID_TYPES.string\r\n        }\r\n        switch (type) {\r\n            case VALID_TYPES.string:\r\n                sourceValue = value;\r\n                value = this._appendString(value);\r\n                break;\r\n            case VALID_TYPES.date:\r\n                sourceValue = value;\r\n                value = this._tryGetExcelDateValue(value);\r\n                type = VALID_TYPES.number\r\n        }\r\n        return {\r\n            value: value,\r\n            type: type,\r\n            sourceValue: sourceValue,\r\n            cellSourceData: cellSourceData\r\n        }\r\n    },\r\n    _callCustomizeExcelCell: function(_ref2) {\r\n        var dataProvider = _ref2.dataProvider,\r\n            value = _ref2.value,\r\n            style = _ref2.style,\r\n            sourceData = _ref2.sourceData;\r\n        var styleCopy = _excel2.default.copyCellFormat(style);\r\n        var args = {\r\n            value: value,\r\n            numberFormat: styleCopy.numberFormat,\r\n            clearStyle: function() {\r\n                this.horizontalAlignment = null;\r\n                this.verticalAlignment = null;\r\n                this.wrapTextEnabled = null;\r\n                this.font = null;\r\n                this.numberFormat = null\r\n            }\r\n        };\r\n        if ((0, _type.isDefined)(styleCopy)) {\r\n            if ((0, _type.isDefined)(styleCopy.alignment)) {\r\n                args.horizontalAlignment = styleCopy.alignment.horizontal;\r\n                args.verticalAlignment = styleCopy.alignment.vertical;\r\n                args.wrapTextEnabled = styleCopy.alignment.wrapText\r\n            }\r\n            args.backgroundColor = styleCopy.backgroundColor;\r\n            args.fillPatternType = styleCopy.fillPatternType;\r\n            args.fillPatternColor = styleCopy.fillPatternColor;\r\n            args.font = styleCopy.font\r\n        }\r\n        dataProvider.customizeExcelCell(args, sourceData);\r\n        var newStyle = styleCopy || {};\r\n        newStyle.font = args.font;\r\n        newStyle.alignment = newStyle.alignment || {};\r\n        newStyle.alignment.horizontal = args.horizontalAlignment;\r\n        newStyle.alignment.vertical = args.verticalAlignment;\r\n        newStyle.alignment.wrapText = args.wrapTextEnabled;\r\n        newStyle.backgroundColor = args.backgroundColor;\r\n        newStyle.fillPatternType = args.fillPatternType;\r\n        newStyle.fillPatternColor = args.fillPatternColor;\r\n        newStyle.numberFormat = args.numberFormat;\r\n        return {\r\n            value: args.value,\r\n            style: newStyle\r\n        }\r\n    },\r\n    _getDataArray: function() {\r\n        var that = this;\r\n        var rowIndex;\r\n        var cellIndex;\r\n        var cellsArray;\r\n        var cellData;\r\n        var result = [];\r\n        var dataProvider = that._dataProvider;\r\n        var rowsLength = dataProvider.getRowsCount();\r\n        var columns = dataProvider.getColumns();\r\n        var cellsLength;\r\n        for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\r\n            cellsArray = [];\r\n            cellsLength = columns.length;\r\n            for (cellIndex = 0; cellIndex !== cellsLength; cellIndex++) {\r\n                cellData = that._prepareValue(rowIndex, cellIndex);\r\n                var styleArrayIndex = dataProvider.getStyleId(rowIndex, cellIndex);\r\n                var cellStyleId = this._styleArrayIndexToCellStyleIdMap[styleArrayIndex];\r\n                if (dataProvider.hasCustomizeExcelCell && dataProvider.hasCustomizeExcelCell()) {\r\n                    var value = cellData.sourceValue || cellData.value;\r\n                    var modifiedExcelCell = this._callCustomizeExcelCell({\r\n                        dataProvider: dataProvider,\r\n                        value: value,\r\n                        style: that._styleArray[styleArrayIndex],\r\n                        sourceData: cellData.cellSourceData\r\n                    });\r\n                    if (modifiedExcelCell.value !== value) {\r\n                        if (_typeof(modifiedExcelCell.value) !== _typeof(value) || \"number\" === typeof modifiedExcelCell.value && !isFinite(modifiedExcelCell.value)) {\r\n                            var cellDataType = this._tryGetExcelCellDataType(modifiedExcelCell.value);\r\n                            if ((0, _type.isDefined)(cellDataType)) {\r\n                                cellData.type = cellDataType\r\n                            }\r\n                        }\r\n                        switch (cellData.type) {\r\n                            case VALID_TYPES.string:\r\n                                cellData.value = this._appendString(modifiedExcelCell.value);\r\n                                break;\r\n                            case VALID_TYPES.date:\r\n                                cellData.value = modifiedExcelCell.value;\r\n                                break;\r\n                            case VALID_TYPES.number:\r\n                                var newValue = modifiedExcelCell.value;\r\n                                var excelDateValue = this._tryGetExcelDateValue(newValue);\r\n                                if ((0, _type.isDefined)(excelDateValue)) {\r\n                                    newValue = excelDateValue\r\n                                }\r\n                                cellData.value = newValue;\r\n                                break;\r\n                            default:\r\n                                cellData.value = modifiedExcelCell.value\r\n                        }\r\n                    }\r\n                    cellStyleId = this._excelFile.registerCellFormat(modifiedExcelCell.style)\r\n                }\r\n                cellsArray.push({\r\n                    style: cellStyleId,\r\n                    value: cellData.value,\r\n                    type: cellData.type\r\n                })\r\n            }\r\n            if (!that._needSheetPr && dataProvider.getGroupLevel(rowIndex) > 0) {\r\n                that._needSheetPr = true\r\n            }\r\n            result.push(cellsArray)\r\n        }\r\n        return result\r\n    },\r\n    _calculateWidth: function(pixelsWidth) {\r\n        pixelsWidth = parseInt(pixelsWidth, 10);\r\n        if (!pixelsWidth || pixelsWidth < 5) {\r\n            pixelsWidth = 100\r\n        }\r\n        return Math.min(255, Math.floor((pixelsWidth - 5) / MAX_DIGIT_WIDTH_IN_PIXELS * 100 + .5) / 100)\r\n    },\r\n    _prepareStyleData: function() {\r\n        var _this = this;\r\n        var that = this;\r\n        var styles = that._dataProvider.getStyles();\r\n        that._dataProvider.getColumns().forEach(function(column) {\r\n            that._colsArray.push(that._calculateWidth(column.width))\r\n        });\r\n        var fonts = [{\r\n            size: 11,\r\n            color: {\r\n                theme: 1\r\n            },\r\n            name: \"Calibri\",\r\n            family: 2,\r\n            scheme: \"minor\",\r\n            bold: false\r\n        }, {\r\n            size: 11,\r\n            color: {\r\n                theme: 1\r\n            },\r\n            name: \"Calibri\",\r\n            family: 2,\r\n            scheme: \"minor\",\r\n            bold: true\r\n        }];\r\n        this._excelFile.registerFont(fonts[0]);\r\n        this._excelFile.registerFont(fonts[1]);\r\n        styles.forEach(function(style) {\r\n            var numberFormat = that._tryConvertToExcelNumberFormat(style.format, style.dataType);\r\n            if (!(0, _type.isDefined)(numberFormat)) {\r\n                numberFormat = 0\r\n            }\r\n            that._styleArray.push({\r\n                font: fonts[Number(!!style.bold)],\r\n                numberFormat: numberFormat,\r\n                alignment: {\r\n                    vertical: \"top\",\r\n                    wrapText: !!style.wrapText,\r\n                    horizontal: style.alignment || \"left\"\r\n                }\r\n            })\r\n        });\r\n        that._styleArrayIndexToCellStyleIdMap = that._styleArray.map(function(item) {\r\n            return _this._excelFile.registerCellFormat(item)\r\n        })\r\n    },\r\n    _prepareCellData: function() {\r\n        this._cellsArray = this._getDataArray()\r\n    },\r\n    _createXMLRelationships: function(xmlRelationships) {\r\n        return this._getXMLTag(\"Relationships\", [{\r\n            name: \"xmlns\",\r\n            value: OPEN_XML_FORMAT_URL + \"/package/2006/relationships\"\r\n        }], xmlRelationships)\r\n    },\r\n    _createXMLRelationship: function(id, type, target) {\r\n        return this._getXMLTag(\"Relationship\", [{\r\n            name: \"Id\",\r\n            value: \"rId\" + id\r\n        }, {\r\n            name: \"Type\",\r\n            value: OPEN_XML_FORMAT_URL + \"/officeDocument/2006/relationships/\" + type\r\n        }, {\r\n            name: \"Target\",\r\n            value: target\r\n        }])\r\n    },\r\n    _getWorkbookContent: function() {\r\n        var content = '<bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"0\" windowHeight=\"0\"/></bookViews><sheets><sheet name=\"Sheet\" sheetId=\"1\" r:id=\"rId1\" /></sheets><definedNames><definedName name=\"_xlnm.Print_Titles\" localSheetId=\"0\">Sheet!$1:$1</definedName><definedName name=\"_xlnm._FilterDatabase\" hidden=\"0\" localSheetId=\"0\">Sheet!$A$1:$F$6332</definedName></definedNames>';\r\n        return XML_TAG + this._getXMLTag(\"workbook\", [{\r\n            name: \"xmlns:r\",\r\n            value: OPEN_XML_FORMAT_URL + \"/officeDocument/2006/relationships\"\r\n        }, {\r\n            name: \"xmlns\",\r\n            value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\r\n        }], content)\r\n    },\r\n    _getContentTypesContent: function() {\r\n        return XML_TAG + '<Types xmlns=\"' + OPEN_XML_FORMAT_URL + '/package/2006/content-types\"><Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" /><Default Extension=\"xml\" ContentType=\"application/xml\" /><Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" /><Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" /><Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\" /><Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" /></Types>'\r\n    },\r\n    _generateStylesXML: function() {\r\n        var that = this;\r\n        var folder = that._zip.folder(XL_FOLDER_NAME);\r\n        var XML = \"\";\r\n        XML += this._excelFile.generateNumberFormatsXml();\r\n        XML += this._excelFile.generateFontsXml();\r\n        XML += this._excelFile.generateFillsXml();\r\n        XML += BASE_STYLE_XML2;\r\n        XML += this._excelFile.generateCellFormatsXml();\r\n        XML += that._getXMLTag(\"cellStyles\", [{\r\n            name: \"count\",\r\n            value: 1\r\n        }], that._getXMLTag(\"cellStyle\", [{\r\n            name: \"name\",\r\n            value: \"Normal\"\r\n        }, {\r\n            name: \"xfId\",\r\n            value: 0\r\n        }, {\r\n            name: \"builtinId\",\r\n            value: 0\r\n        }]));\r\n        XML = XML_TAG + that._getXMLTag(\"styleSheet\", [{\r\n            name: \"xmlns\",\r\n            value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\r\n        }], XML);\r\n        folder.file(STYLE_FILE_NAME, XML);\r\n        that._styleArray = []\r\n    },\r\n    _generateStringsXML: function() {\r\n        var folder = this._zip.folder(XL_FOLDER_NAME);\r\n        var stringIndex;\r\n        var stringsLength = this._stringArray.length;\r\n        var sharedStringXml = XML_TAG;\r\n        for (stringIndex = 0; stringIndex < stringsLength; stringIndex++) {\r\n            this._stringArray[stringIndex] = this._getXMLTag(\"si\", [], this._getXMLTag(\"t\", [], this._stringArray[stringIndex]))\r\n        }\r\n        sharedStringXml += this._getXMLTag(\"sst\", [{\r\n            name: \"xmlns\",\r\n            value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\r\n        }, {\r\n            name: \"count\",\r\n            value: this._stringArray.length\r\n        }, {\r\n            name: \"uniqueCount\",\r\n            value: this._stringArray.length\r\n        }], this._stringArray.join(\"\"));\r\n        folder.file(SHAREDSTRING_FILE_NAME, sharedStringXml);\r\n        this._stringArray = []\r\n    },\r\n    _getPaneXML: function() {\r\n        var attributes = [{\r\n            name: \"activePane\",\r\n            value: \"bottomLeft\"\r\n        }, {\r\n            name: \"state\",\r\n            value: \"frozen\"\r\n        }];\r\n        var frozenArea = this._dataProvider.getFrozenArea();\r\n        if (!(frozenArea.x || frozenArea.y)) {\r\n            return \"\"\r\n        }\r\n        if (frozenArea.x) {\r\n            attributes.push({\r\n                name: \"xSplit\",\r\n                value: frozenArea.x\r\n            })\r\n        }\r\n        if (frozenArea.y) {\r\n            attributes.push({\r\n                name: \"ySplit\",\r\n                value: frozenArea.y\r\n            })\r\n        }\r\n        attributes.push({\r\n            name: \"topLeftCell\",\r\n            value: this._convertToExcelCellRefAndTrackMaxIndex(frozenArea.y, frozenArea.x)\r\n        });\r\n        return this._getXMLTag(\"pane\", attributes)\r\n    },\r\n    _getAutoFilterXML: function(maxCellIndex) {\r\n        if (this._options.autoFilterEnabled) {\r\n            return '<autoFilter ref=\"A' + this._dataProvider.getHeaderRowCount() + \":\" + maxCellIndex + '\" />'\r\n        }\r\n        return \"\"\r\n    },\r\n    _getIgnoredErrorsXML: function(maxCellIndex) {\r\n        if (this._options.ignoreErrors) {\r\n            return '<ignoredErrors><ignoredError sqref=\"A1:' + maxCellIndex + '\" numberStoredAsText=\"1\" /></ignoredErrors>'\r\n        }\r\n        return \"\"\r\n    },\r\n    _generateWorksheetXML: function() {\r\n        var colIndex;\r\n        var rowIndex;\r\n        var cellData;\r\n        var xmlCells;\r\n        var rightBottomCellRef;\r\n        var xmlRows = [];\r\n        var rowsLength = this._cellsArray.length;\r\n        var cellsLength;\r\n        var colsLength = this._colsArray.length;\r\n        var rSpans = \"1:\" + colsLength;\r\n        var headerRowCount = this._dataProvider.getHeaderRowCount ? this._dataProvider.getHeaderRowCount() : 1;\r\n        var xmlResult = [WORKSHEET_HEADER_XML];\r\n        xmlResult.push(this._needSheetPr ? GROUP_SHEET_PR_XML : SINGLE_SHEET_PR_XML);\r\n        xmlResult.push('<dimension ref=\"A1:C1\"/>');\r\n        xmlResult.push(\"<sheetViews><sheetView \");\r\n        xmlResult.push(this._rtlEnabled ? 'rightToLeft=\"1\" ' : \"\");\r\n        xmlResult.push('tabSelected=\"1\" workbookViewId=\"0\">');\r\n        xmlResult.push(this._getPaneXML());\r\n        xmlResult.push(\"</sheetView></sheetViews>\");\r\n        xmlResult.push('<sheetFormatPr defaultRowHeight=\"15\"');\r\n        xmlResult.push(' outlineLevelRow=\"' + (this._dataProvider.getRowsCount() > 0 ? this._dataProvider.getGroupLevel(0) : 0) + '\"');\r\n        xmlResult.push(' x14ac:dyDescent=\"0.25\"/>');\r\n        for (colIndex = 0; colIndex < colsLength; colIndex++) {\r\n            this._colsArray[colIndex] = this._getXMLTag(\"col\", [{\r\n                name: \"width\",\r\n                value: this._colsArray[colIndex]\r\n            }, {\r\n                name: \"min\",\r\n                value: Number(colIndex) + 1\r\n            }, {\r\n                name: \"max\",\r\n                value: Number(colIndex) + 1\r\n            }, {\r\n                name: \"customWidth\",\r\n                value: 1\r\n            }])\r\n        }\r\n        xmlResult.push(this._getXMLTag(\"cols\", [], this._colsArray.join(\"\")) + \"<sheetData>\");\r\n        for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\r\n            xmlCells = [];\r\n            cellsLength = this._cellsArray[rowIndex].length;\r\n            for (colIndex = 0; colIndex < cellsLength; colIndex++) {\r\n                rowIndex = Number(rowIndex);\r\n                cellData = this._cellsArray[rowIndex][colIndex];\r\n                xmlCells.push(this._getXMLTag(\"c\", [{\r\n                    name: \"r\",\r\n                    value: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex, colIndex)\r\n                }, {\r\n                    name: \"s\",\r\n                    value: cellData.style\r\n                }, {\r\n                    name: \"t\",\r\n                    value: cellData.type\r\n                }], (0, _type.isDefined)(cellData.value) ? this._getXMLTag(\"v\", [], cellData.value) : null))\r\n            }\r\n            xmlRows.push(this._getXMLTag(\"row\", [{\r\n                name: \"r\",\r\n                value: Number(rowIndex) + 1\r\n            }, {\r\n                name: \"spans\",\r\n                value: rSpans\r\n            }, {\r\n                name: \"outlineLevel\",\r\n                value: rowIndex >= headerRowCount ? this._dataProvider.getGroupLevel(rowIndex) : 0\r\n            }, {\r\n                name: \"x14ac:dyDescent\",\r\n                value: \"0.25\"\r\n            }], xmlCells.join(\"\")));\r\n            this._cellsArray[rowIndex] = null;\r\n            if (xmlRows.length > 1e4) {\r\n                xmlResult.push(xmlRows.join(\"\"));\r\n                xmlRows = []\r\n            }\r\n        }\r\n        xmlResult.push(xmlRows.join(\"\"));\r\n        xmlRows = [];\r\n        rightBottomCellRef = this._convertToExcelCellRef(this._maxRowIndex, this._maxColumnIndex);\r\n        xmlResult.push(\"</sheetData>\" + this._getAutoFilterXML(rightBottomCellRef) + this._generateMergingXML() + this._getIgnoredErrorsXML(rightBottomCellRef) + \"</worksheet>\");\r\n        this._zip.folder(XL_FOLDER_NAME).folder(WORKSHEETS_FOLDER).file(WORKSHEET_FILE_NAME, xmlResult.join(\"\"));\r\n        this._colsArray = [];\r\n        this._cellsArray = [];\r\n        xmlResult = []\r\n    },\r\n    _generateMergingXML: function() {\r\n        var k;\r\n        var l;\r\n        var cellIndex;\r\n        var rowIndex;\r\n        var rowsLength = (0, _type.isDefined)(this._dataProvider.getHeaderRowCount) ? this._dataProvider.getHeaderRowCount() : this._dataProvider.getRowsCount();\r\n        var columnsLength = this._dataProvider.getColumns().length;\r\n        var usedArea = [];\r\n        var mergeArray = [];\r\n        var mergeArrayLength;\r\n        var mergeIndex;\r\n        var mergeXML = \"\";\r\n        for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\r\n            for (cellIndex = 0; cellIndex !== columnsLength; cellIndex++) {\r\n                if (!(0, _type.isDefined)(usedArea[rowIndex]) || !(0, _type.isDefined)(usedArea[rowIndex][cellIndex])) {\r\n                    var cellMerge = this._dataProvider.getCellMerging(rowIndex, cellIndex);\r\n                    if (cellMerge.colspan || cellMerge.rowspan) {\r\n                        mergeArray.push({\r\n                            start: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex, cellIndex),\r\n                            end: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex + (cellMerge.rowspan || 0), cellIndex + (cellMerge.colspan || 0))\r\n                        });\r\n                        for (k = rowIndex; k <= rowIndex + cellMerge.rowspan || 0; k++) {\r\n                            for (l = cellIndex; l <= cellIndex + cellMerge.colspan || 0; l++) {\r\n                                if (!(0, _type.isDefined)(usedArea[k])) {\r\n                                    usedArea[k] = []\r\n                                }\r\n                                usedArea[k][l] = true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        mergeArrayLength = mergeArray.length;\r\n        for (mergeIndex = 0; mergeIndex < mergeArrayLength; mergeIndex++) {\r\n            mergeXML += this._getXMLTag(\"mergeCell\", [{\r\n                name: \"ref\",\r\n                value: mergeArray[mergeIndex].start + \":\" + mergeArray[mergeIndex].end\r\n            }])\r\n        }\r\n        return mergeXML.length ? this._getXMLTag(\"mergeCells\", [{\r\n            name: \"count\",\r\n            value: mergeArrayLength\r\n        }], mergeXML) : \"\"\r\n    },\r\n    _generateCommonXML: function() {\r\n        var relsFileContent = XML_TAG + this._createXMLRelationships(this._createXMLRelationship(1, \"officeDocument\", \"xl/\" + WORKBOOK_FILE_NAME));\r\n        var xmlRelationships;\r\n        var folder = this._zip.folder(XL_FOLDER_NAME);\r\n        var relsXML = XML_TAG;\r\n        this._zip.folder(\"_\" + RELATIONSHIP_PART_NAME).file(\".\" + RELATIONSHIP_PART_NAME, relsFileContent);\r\n        xmlRelationships = this._createXMLRelationship(1, \"worksheet\", \"worksheets/\" + WORKSHEET_FILE_NAME) + this._createXMLRelationship(2, \"styles\", STYLE_FILE_NAME) + this._createXMLRelationship(3, \"sharedStrings\", SHAREDSTRING_FILE_NAME);\r\n        relsXML += this._createXMLRelationships(xmlRelationships);\r\n        folder.folder(\"_\" + RELATIONSHIP_PART_NAME).file(WORKBOOK_FILE_NAME + \".rels\", relsXML);\r\n        folder.file(WORKBOOK_FILE_NAME, this._getWorkbookContent());\r\n        this._zip.file(CONTENTTYPES_FILE_NAME, this._getContentTypesContent())\r\n    },\r\n    _generateContent: function() {\r\n        this._prepareStyleData();\r\n        this._prepareCellData();\r\n        this._generateWorkXML();\r\n        this._generateCommonXML()\r\n    },\r\n    _generateWorkXML: function() {\r\n        this._generateStylesXML();\r\n        this._generateStringsXML();\r\n        this._generateWorksheetXML()\r\n    },\r\n    ctor: function(dataProvider, options) {\r\n        this._rtlEnabled = options && !!options.rtlEnabled;\r\n        this._options = options;\r\n        this._maxRowIndex = 0;\r\n        this._maxColumnIndex = 0;\r\n        this._stringArray = [];\r\n        this._stringHash = {};\r\n        this._styleArray = [];\r\n        this._colsArray = [];\r\n        this._cellsArray = [];\r\n        this._needSheetPr = false;\r\n        this._dataProvider = dataProvider;\r\n        this._excelFile = new _excel2.default;\r\n        if ((0, _type.isDefined)(ExcelCreator.JSZip)) {\r\n            this._zip = new ExcelCreator.JSZip\r\n        } else {\r\n            this._zip = null\r\n        }\r\n    },\r\n    _checkZipState: function() {\r\n        if (!this._zip) {\r\n            throw _ui2.default.Error(\"E1041\", \"JSZip\")\r\n        }\r\n    },\r\n    ready: function() {\r\n        return this._dataProvider.ready()\r\n    },\r\n    getData: function(isBlob) {\r\n        var options = {\r\n            type: isBlob ? \"blob\" : \"base64\",\r\n            compression: \"DEFLATE\",\r\n            mimeType: _file_saver2.default.MIME_TYPES.EXCEL\r\n        };\r\n        var deferred = new _deferred.Deferred;\r\n        this._checkZipState();\r\n        this._generateContent();\r\n        if (this._zip.generateAsync) {\r\n            this._zip.generateAsync(options).then(deferred.resolve)\r\n        } else {\r\n            deferred.resolve(this._zip.generate(options))\r\n        }\r\n        return deferred\r\n    }\r\n});\r\nExcelCreator.JSZip = _jszip2.default;\r\nexports.ExcelCreator = ExcelCreator;\r\nexports.getData = function(data, options) {\r\n    var excelCreator = new exports.ExcelCreator(data, options);\r\n    excelCreator._checkZipState();\r\n    return excelCreator.ready().then(function() {\r\n        return excelCreator.getData((0, _type.isFunction)((0, _window.getWindow)().Blob))\r\n    })\r\n};\r\n"]},"metadata":{},"sourceType":"script"}
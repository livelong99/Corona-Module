{"ast":null,"code":"/**\r\n * DevExtreme (viz/translators/logarithmic_translator.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar vizUtils = require(\"../core/utils\");\n\nvar isDefined = require(\"../../core/utils/type\").isDefined;\n\nvar raiseTo = vizUtils.raiseToExt;\nvar getLog = vizUtils.getLogExt;\nmodule.exports = {\n  _fromValue: function _fromValue(value) {\n    return null !== value ? getLog(value, this._canvasOptions.base, this._businessRange.allowNegatives, this._businessRange.linearThreshold) : value;\n  },\n  _toValue: function _toValue(value) {\n    return null !== value ? raiseTo(value, this._canvasOptions.base, this._businessRange.allowNegatives, this._businessRange.linearThreshold) : value;\n  },\n  getMinBarSize: function getMinBarSize(minBarSize) {\n    var visibleArea = this.getCanvasVisibleArea();\n    var minValue = this.from(visibleArea.min + minBarSize);\n    var canvasOptions = this._canvasOptions;\n    return Math.pow(canvasOptions.base, canvasOptions.rangeMinVisible + this._fromValue(this.from(visibleArea.min)) - this._fromValue(!isDefined(minValue) ? this.from(visibleArea.max) : minValue));\n  },\n  checkMinBarSize: function checkMinBarSize(initialValue, minShownValue, stackValue) {\n    var canvasOptions = this._canvasOptions;\n    var prevValue = stackValue - initialValue;\n    var baseMethod = this.constructor.prototype.checkMinBarSize;\n    var minBarSize;\n    var updateValue;\n\n    if (isDefined(minShownValue) && prevValue > 0) {\n      minBarSize = baseMethod(this._fromValue(stackValue / prevValue), this._fromValue(minShownValue) - canvasOptions.rangeMinVisible);\n      updateValue = Math.pow(canvasOptions.base, this._fromValue(prevValue) + minBarSize) - prevValue;\n    } else {\n      updateValue = baseMethod(initialValue, minShownValue);\n    }\n\n    return updateValue;\n  }\n};","map":{"version":3,"sources":["C:/Users/va112/Documents/Webdev/React/Corona/node_modules/devextreme/viz/translators/logarithmic_translator.js"],"names":["vizUtils","require","isDefined","raiseTo","raiseToExt","getLog","getLogExt","module","exports","_fromValue","value","_canvasOptions","base","_businessRange","allowNegatives","linearThreshold","_toValue","getMinBarSize","minBarSize","visibleArea","getCanvasVisibleArea","minValue","from","min","canvasOptions","Math","pow","rangeMinVisible","max","checkMinBarSize","initialValue","minShownValue","stackValue","prevValue","baseMethod","constructor","prototype","updateValue"],"mappings":"AAAA;;;;;;;;AAQA;;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,uBAAD,CAAP,CAAiCC,SAAjD;;AACA,IAAIC,OAAO,GAAGH,QAAQ,CAACI,UAAvB;AACA,IAAIC,MAAM,GAAGL,QAAQ,CAACM,SAAtB;AACAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,UAAU,EAAE,oBAASC,KAAT,EAAgB;AACxB,WAAO,SAASA,KAAT,GAAiBL,MAAM,CAACK,KAAD,EAAQ,KAAKC,cAAL,CAAoBC,IAA5B,EAAkC,KAAKC,cAAL,CAAoBC,cAAtD,EAAsE,KAAKD,cAAL,CAAoBE,eAA1F,CAAvB,GAAoIL,KAA3I;AACH,GAHY;AAIbM,EAAAA,QAAQ,EAAE,kBAASN,KAAT,EAAgB;AACtB,WAAO,SAASA,KAAT,GAAiBP,OAAO,CAACO,KAAD,EAAQ,KAAKC,cAAL,CAAoBC,IAA5B,EAAkC,KAAKC,cAAL,CAAoBC,cAAtD,EAAsE,KAAKD,cAAL,CAAoBE,eAA1F,CAAxB,GAAqIL,KAA5I;AACH,GANY;AAObO,EAAAA,aAAa,EAAE,uBAASC,UAAT,EAAqB;AAChC,QAAIC,WAAW,GAAG,KAAKC,oBAAL,EAAlB;AACA,QAAIC,QAAQ,GAAG,KAAKC,IAAL,CAAUH,WAAW,CAACI,GAAZ,GAAkBL,UAA5B,CAAf;AACA,QAAIM,aAAa,GAAG,KAAKb,cAAzB;AACA,WAAOc,IAAI,CAACC,GAAL,CAASF,aAAa,CAACZ,IAAvB,EAA6BY,aAAa,CAACG,eAAd,GAAgC,KAAKlB,UAAL,CAAgB,KAAKa,IAAL,CAAUH,WAAW,CAACI,GAAtB,CAAhB,CAAhC,GAA8E,KAAKd,UAAL,CAAgB,CAACP,SAAS,CAACmB,QAAD,CAAV,GAAuB,KAAKC,IAAL,CAAUH,WAAW,CAACS,GAAtB,CAAvB,GAAoDP,QAApE,CAA3G,CAAP;AACH,GAZY;AAabQ,EAAAA,eAAe,EAAE,yBAASC,YAAT,EAAuBC,aAAvB,EAAsCC,UAAtC,EAAkD;AAC/D,QAAIR,aAAa,GAAG,KAAKb,cAAzB;AACA,QAAIsB,SAAS,GAAGD,UAAU,GAAGF,YAA7B;AACA,QAAII,UAAU,GAAG,KAAKC,WAAL,CAAiBC,SAAjB,CAA2BP,eAA5C;AACA,QAAIX,UAAJ;AACA,QAAImB,WAAJ;;AACA,QAAInC,SAAS,CAAC6B,aAAD,CAAT,IAA4BE,SAAS,GAAG,CAA5C,EAA+C;AAC3Cf,MAAAA,UAAU,GAAGgB,UAAU,CAAC,KAAKzB,UAAL,CAAgBuB,UAAU,GAAGC,SAA7B,CAAD,EAA0C,KAAKxB,UAAL,CAAgBsB,aAAhB,IAAiCP,aAAa,CAACG,eAAzF,CAAvB;AACAU,MAAAA,WAAW,GAAGZ,IAAI,CAACC,GAAL,CAASF,aAAa,CAACZ,IAAvB,EAA6B,KAAKH,UAAL,CAAgBwB,SAAhB,IAA6Bf,UAA1D,IAAwEe,SAAtF;AACH,KAHD,MAGO;AACHI,MAAAA,WAAW,GAAGH,UAAU,CAACJ,YAAD,EAAeC,aAAf,CAAxB;AACH;;AACD,WAAOM,WAAP;AACH;AA1BY,CAAjB","sourcesContent":["/**\r\n * DevExtreme (viz/translators/logarithmic_translator.js)\r\n * Version: 19.2.7\r\n * Build date: Thu Mar 26 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar vizUtils = require(\"../core/utils\");\r\nvar isDefined = require(\"../../core/utils/type\").isDefined;\r\nvar raiseTo = vizUtils.raiseToExt;\r\nvar getLog = vizUtils.getLogExt;\r\nmodule.exports = {\r\n    _fromValue: function(value) {\r\n        return null !== value ? getLog(value, this._canvasOptions.base, this._businessRange.allowNegatives, this._businessRange.linearThreshold) : value\r\n    },\r\n    _toValue: function(value) {\r\n        return null !== value ? raiseTo(value, this._canvasOptions.base, this._businessRange.allowNegatives, this._businessRange.linearThreshold) : value\r\n    },\r\n    getMinBarSize: function(minBarSize) {\r\n        var visibleArea = this.getCanvasVisibleArea();\r\n        var minValue = this.from(visibleArea.min + minBarSize);\r\n        var canvasOptions = this._canvasOptions;\r\n        return Math.pow(canvasOptions.base, canvasOptions.rangeMinVisible + this._fromValue(this.from(visibleArea.min)) - this._fromValue(!isDefined(minValue) ? this.from(visibleArea.max) : minValue))\r\n    },\r\n    checkMinBarSize: function(initialValue, minShownValue, stackValue) {\r\n        var canvasOptions = this._canvasOptions;\r\n        var prevValue = stackValue - initialValue;\r\n        var baseMethod = this.constructor.prototype.checkMinBarSize;\r\n        var minBarSize;\r\n        var updateValue;\r\n        if (isDefined(minShownValue) && prevValue > 0) {\r\n            minBarSize = baseMethod(this._fromValue(stackValue / prevValue), this._fromValue(minShownValue) - canvasOptions.rangeMinVisible);\r\n            updateValue = Math.pow(canvasOptions.base, this._fromValue(prevValue) + minBarSize) - prevValue\r\n        } else {\r\n            updateValue = baseMethod(initialValue, minShownValue)\r\n        }\r\n        return updateValue\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}